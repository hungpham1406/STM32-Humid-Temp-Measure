
Humid_Temp_Measurement_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008080  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08008210  08008210  00018210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d4  080085d4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085dc  080085dc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080085e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000002bc  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000490  20000490  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d2e7  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002008  00000000  00000000  0002d52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000df0  00000000  00000000  0002f538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ae0  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021eb8  00000000  00000000  00030e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001089d  00000000  00000000  00052cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ccf53  00000000  00000000  0006355d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004c60  00000000  00000000  001304b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00135110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081f8 	.word	0x080081f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080081f8 	.word	0x080081f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <lcd_send_cmd>:

// rs = 0 => write command, rs = 1 => write data
// en transfer from high to low => data/cmd will be transmit

void lcd_send_cmd (char cmd)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f023 030f 	bic.w	r3, r3, #15
 8000eb4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 (0x0C = 1100 - the second bit is for en pin)
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	f043 030c 	orr.w	r3, r3, #12
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 (0x08 = 1000)
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f043 0308 	orr.w	r3, r3, #8
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ed0:	7bbb      	ldrb	r3, [r7, #14]
 8000ed2:	f043 030c 	orr.w	r3, r3, #12
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ee4:	f107 0208 	add.w	r2, r7, #8
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2304      	movs	r3, #4
 8000eee:	214e      	movs	r1, #78	; 0x4e
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <lcd_send_cmd+0x5c>)
 8000ef2:	f001 fd77 	bl	80029e4 <HAL_I2C_Master_Transmit>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001f0 	.word	0x200001f0

08000f04 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f023 030f 	bic.w	r3, r3, #15
 8000f14:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	f043 030d 	orr.w	r3, r3, #13
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0309 	orr.w	r3, r3, #9
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000f30:	7bbb      	ldrb	r3, [r7, #14]
 8000f32:	f043 030d 	orr.w	r3, r3, #13
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	f043 0309 	orr.w	r3, r3, #9
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f44:	f107 0208 	add.w	r2, r7, #8
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	214e      	movs	r1, #78	; 0x4e
 8000f50:	4803      	ldr	r0, [pc, #12]	; (8000f60 <lcd_send_data+0x5c>)
 8000f52:	f001 fd47 	bl	80029e4 <HAL_I2C_Master_Transmit>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200001f0 	.word	0x200001f0

08000f64 <lcd_clear>:

void lcd_clear (void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
//	lcd_send_cmd (0x80);
//	for (int i=0; i<70; i++)
//	{
//		lcd_send_data (' ');
//	}
	lcd_send_cmd(0x01);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f7ff ff9b 	bl	8000ea4 <lcd_send_cmd>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
    switch (row)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <lcd_put_cur+0x18>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d005      	beq.n	8000f94 <lcd_put_cur+0x22>
 8000f88:	e009      	b.n	8000f9e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f90:	603b      	str	r3, [r7, #0]
            break;
 8000f92:	e004      	b.n	8000f9e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f9a:	603b      	str	r3, [r7, #0]
            break;
 8000f9c:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff7e 	bl	8000ea4 <lcd_send_cmd>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <lcd_init>:


void lcd_init (void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fb4:	2032      	movs	r0, #50	; 0x32
 8000fb6:	f000 fe15 	bl	8001be4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fba:	2030      	movs	r0, #48	; 0x30
 8000fbc:	f7ff ff72 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f000 fe0f 	bl	8001be4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fc6:	2030      	movs	r0, #48	; 0x30
 8000fc8:	f7ff ff6c 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f000 fe09 	bl	8001be4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fd2:	2030      	movs	r0, #48	; 0x30
 8000fd4:	f7ff ff66 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f000 fe03 	bl	8001be4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000fde:	2020      	movs	r0, #32
 8000fe0:	f7ff ff60 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(10);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f000 fdfd 	bl	8001be4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000fea:	2028      	movs	r0, #40	; 0x28
 8000fec:	f7ff ff5a 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 fdf7 	bl	8001be4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ff6:	2008      	movs	r0, #8
 8000ff8:	f7ff ff54 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fdf1 	bl	8001be4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff ff4e 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(2);
 8001008:	2002      	movs	r0, #2
 800100a:	f000 fdeb 	bl	8001be4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800100e:	2006      	movs	r0, #6
 8001010:	f7ff ff48 	bl	8000ea4 <lcd_send_cmd>
	HAL_Delay(1);
 8001014:	2001      	movs	r0, #1
 8001016:	f000 fde5 	bl	8001be4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800101a:	200c      	movs	r0, #12
 800101c:	f7ff ff42 	bl	8000ea4 <lcd_send_cmd>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800102c:	e006      	b.n	800103c <lcd_send_string+0x18>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff64 	bl	8000f04 <lcd_send_data>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f4      	bne.n	800102e <lcd_send_string+0xa>
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <dec_To_Bcd>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/********************************DS3231**********************************/
TIME time;

uint8_t dec_To_Bcd(int val) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <dec_To_Bcd+0x48>)
 800105c:	fb82 1203 	smull	r1, r2, r2, r3
 8001060:	1092      	asrs	r2, r2, #2
 8001062:	17db      	asrs	r3, r3, #31
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	b2d8      	uxtb	r0, r3
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <dec_To_Bcd+0x48>)
 8001070:	fb83 1302 	smull	r1, r3, r3, r2
 8001074:	1099      	asrs	r1, r3, #2
 8001076:	17d3      	asrs	r3, r2, #31
 8001078:	1ac9      	subs	r1, r1, r3
 800107a:	460b      	mov	r3, r1
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	1ad1      	subs	r1, r2, r3
 8001084:	b2cb      	uxtb	r3, r1
 8001086:	4403      	add	r3, r0
 8001088:	b2db      	uxtb	r3, r3
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	66666667 	.word	0x66666667

0800109c <bcd_To_Dec>:

int bcd_To_Dec(uint8_t val) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10) + (val%16));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	461a      	mov	r2, r3
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	4413      	add	r3, r2
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <set_Time>:

void set_Time(uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom,
			  uint8_t month, uint8_t year) {
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	4603      	mov	r3, r0
 80010e0:	71bb      	strb	r3, [r7, #6]
 80010e2:	460b      	mov	r3, r1
 80010e4:	717b      	strb	r3, [r7, #5]
 80010e6:	4613      	mov	r3, r2
 80010e8:	713b      	strb	r3, [r7, #4]
	uint8_t set_time_buffer[7];
	set_time_buffer[0] = dec_To_Bcd(sec);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffaf 	bl	8001050 <dec_To_Bcd>
 80010f2:	4603      	mov	r3, r0
 80010f4:	723b      	strb	r3, [r7, #8]
	set_time_buffer[1] = dec_To_Bcd(min);
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ffa9 	bl	8001050 <dec_To_Bcd>
 80010fe:	4603      	mov	r3, r0
 8001100:	727b      	strb	r3, [r7, #9]
	set_time_buffer[2] = dec_To_Bcd(hour);
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffa3 	bl	8001050 <dec_To_Bcd>
 800110a:	4603      	mov	r3, r0
 800110c:	72bb      	strb	r3, [r7, #10]
	set_time_buffer[3] = dec_To_Bcd(dow);
 800110e:	793b      	ldrb	r3, [r7, #4]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff9d 	bl	8001050 <dec_To_Bcd>
 8001116:	4603      	mov	r3, r0
 8001118:	72fb      	strb	r3, [r7, #11]
	set_time_buffer[4] = dec_To_Bcd(dom);
 800111a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff96 	bl	8001050 <dec_To_Bcd>
 8001124:	4603      	mov	r3, r0
 8001126:	733b      	strb	r3, [r7, #12]
	set_time_buffer[5] = dec_To_Bcd(month);
 8001128:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff8f 	bl	8001050 <dec_To_Bcd>
 8001132:	4603      	mov	r3, r0
 8001134:	737b      	strb	r3, [r7, #13]
	set_time_buffer[6] = dec_To_Bcd(year);
 8001136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff88 	bl	8001050 <dec_To_Bcd>
 8001140:	4603      	mov	r3, r0
 8001142:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time_buffer, 7, 1000);
 8001144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2307      	movs	r3, #7
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	2200      	movs	r2, #0
 8001158:	21d0      	movs	r1, #208	; 0xd0
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <set_Time+0x9c>)
 800115c:	f001 fd40 	bl	8002be0 <HAL_I2C_Mem_Write>
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	200001f0 	.word	0x200001f0

0800116c <get_Time>:

void get_Time(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af04      	add	r7, sp, #16
	uint8_t get_time_buffer[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time_buffer, 7, 1000);
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2307      	movs	r3, #7
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	463b      	mov	r3, r7
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	2200      	movs	r2, #0
 8001184:	21d0      	movs	r1, #208	; 0xd0
 8001186:	481f      	ldr	r0, [pc, #124]	; (8001204 <get_Time+0x98>)
 8001188:	f001 fe24 	bl	8002dd4 <HAL_I2C_Mem_Read>

	time.second 	= bcd_To_Dec(get_time_buffer[0]);
 800118c:	783b      	ldrb	r3, [r7, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff84 	bl	800109c <bcd_To_Dec>
 8001194:	4603      	mov	r3, r0
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <get_Time+0x9c>)
 800119a:	701a      	strb	r2, [r3, #0]
	time.minute 	= bcd_To_Dec(get_time_buffer[1]);
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff7c 	bl	800109c <bcd_To_Dec>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <get_Time+0x9c>)
 80011aa:	705a      	strb	r2, [r3, #1]
	time.hour 		= bcd_To_Dec(get_time_buffer[2]);
 80011ac:	78bb      	ldrb	r3, [r7, #2]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff74 	bl	800109c <bcd_To_Dec>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <get_Time+0x9c>)
 80011ba:	709a      	strb	r2, [r3, #2]
	time.dayOfWeek 	= bcd_To_Dec(get_time_buffer[3]);
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff6c 	bl	800109c <bcd_To_Dec>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <get_Time+0x9c>)
 80011ca:	70da      	strb	r2, [r3, #3]
	time.dayOfMonth = bcd_To_Dec(get_time_buffer[4]);
 80011cc:	793b      	ldrb	r3, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff64 	bl	800109c <bcd_To_Dec>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <get_Time+0x9c>)
 80011da:	711a      	strb	r2, [r3, #4]
	time.month 		= bcd_To_Dec(get_time_buffer[5]);
 80011dc:	797b      	ldrb	r3, [r7, #5]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff5c 	bl	800109c <bcd_To_Dec>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <get_Time+0x9c>)
 80011ea:	715a      	strb	r2, [r3, #5]
	time.year 		= bcd_To_Dec(get_time_buffer[6]);
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff54 	bl	800109c <bcd_To_Dec>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <get_Time+0x9c>)
 80011fa:	719a      	strb	r2, [r3, #6]
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001f0 	.word	0x200001f0
 8001208:	20000334 	.word	0x20000334

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001212:	f000 fc75 	bl	8001b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001216:	f000 f865 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121a:	f000 f9dd 	bl	80015d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800121e:	f000 f9bb 	bl	8001598 <MX_DMA_Init>
  MX_I2C1_Init();
 8001222:	f000 f8c7 	bl	80013b4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001226:	f000 f8f3 	bl	8001410 <MX_TIM2_Init>
  MX_TIM3_Init();
 800122a:	f000 f967 	bl	80014fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 800122e:	4827      	ldr	r0, [pc, #156]	; (80012cc <main+0xc0>)
 8001230:	f003 f90c 	bl	800444c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <main+0xc0>)
 8001236:	f003 f971 	bl	800451c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800123a:	2100      	movs	r1, #0
 800123c:	4824      	ldr	r0, [pc, #144]	; (80012d0 <main+0xc4>)
 800123e:	f003 fa37 	bl	80046b0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_init();
 8001242:	f7ff feb5 	bl	8000fb0 <lcd_init>
  lcd_put_cur(0, 0);
 8001246:	2100      	movs	r1, #0
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fe92 	bl	8000f72 <lcd_put_cur>

  lcd_send_string("Hello_world!");
 800124e:	4821      	ldr	r0, [pc, #132]	; (80012d4 <main+0xc8>)
 8001250:	f7ff fee8 	bl	8001024 <lcd_send_string>

  HAL_Delay(4000);
 8001254:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001258:	f000 fcc4 	bl	8001be4 <HAL_Delay>
  lcd_clear();
 800125c:	f7ff fe82 	bl	8000f64 <lcd_clear>

  set_Time(30, 12, 21, 6, 12, 4, 24);
 8001260:	2318      	movs	r3, #24
 8001262:	9302      	str	r3, [sp, #8]
 8001264:	2304      	movs	r3, #4
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	230c      	movs	r3, #12
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2306      	movs	r3, #6
 800126e:	2215      	movs	r2, #21
 8001270:	210c      	movs	r1, #12
 8001272:	201e      	movs	r0, #30
 8001274:	f7ff ff2a 	bl	80010cc <set_Time>
  char time_buffer[30];

  while (1)
  {
    /* USER CODE END WHILE */
	  get_Time();
 8001278:	f7ff ff78 	bl	800116c <get_Time>
	  sprintf(time_buffer, "%02d:%02d", time.hour, time.minute);
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <main+0xcc>)
 800127e:	789b      	ldrb	r3, [r3, #2]
 8001280:	461a      	mov	r2, r3
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <main+0xcc>)
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	4638      	mov	r0, r7
 8001288:	4914      	ldr	r1, [pc, #80]	; (80012dc <main+0xd0>)
 800128a:	f004 fe59 	bl	8005f40 <siprintf>
	  lcd_put_cur(1, 0);
 800128e:	2100      	movs	r1, #0
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff fe6e 	bl	8000f72 <lcd_put_cur>
	  lcd_send_string(time_buffer);
 8001296:	463b      	mov	r3, r7
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fec3 	bl	8001024 <lcd_send_string>

	  sprintf(time_buffer, "%02d-%02d-20%02d", time.dayOfMonth, time.month, time.year);
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <main+0xcc>)
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <main+0xcc>)
 80012a6:	795b      	ldrb	r3, [r3, #5]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <main+0xcc>)
 80012ac:	799b      	ldrb	r3, [r3, #6]
 80012ae:	4638      	mov	r0, r7
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	460b      	mov	r3, r1
 80012b4:	490a      	ldr	r1, [pc, #40]	; (80012e0 <main+0xd4>)
 80012b6:	f004 fe43 	bl	8005f40 <siprintf>
	  lcd_put_cur(1, 6);
 80012ba:	2106      	movs	r1, #6
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff fe58 	bl	8000f72 <lcd_put_cur>
	  lcd_send_string(time_buffer);
 80012c2:	463b      	mov	r3, r7
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fead 	bl	8001024 <lcd_send_string>
	  get_Time();
 80012ca:	e7d5      	b.n	8001278 <main+0x6c>
 80012cc:	2000028c 	.word	0x2000028c
 80012d0:	20000244 	.word	0x20000244
 80012d4:	08008210 	.word	0x08008210
 80012d8:	20000334 	.word	0x20000334
 80012dc:	08008220 	.word	0x08008220
 80012e0:	0800822c 	.word	0x0800822c

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2230      	movs	r2, #48	; 0x30
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 fe87 	bl	8006006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <SystemClock_Config+0xc8>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a26      	ldr	r2, [pc, #152]	; (80013ac <SystemClock_Config+0xc8>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <SystemClock_Config+0xc8>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <SystemClock_Config+0xcc>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <SystemClock_Config+0xcc>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <SystemClock_Config+0xcc>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	2302      	movs	r3, #2
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001354:	2304      	movs	r3, #4
 8001356:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001358:	2350      	movs	r3, #80	; 0x50
 800135a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135c:	2302      	movs	r3, #2
 800135e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001360:	2304      	movs	r3, #4
 8001362:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fb9b 	bl	8003aa4 <HAL_RCC_OscConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001374:	f000 f966 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001378:	230f      	movs	r3, #15
 800137a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137c:	2302      	movs	r3, #2
 800137e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2101      	movs	r1, #1
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fdfe 	bl	8003f94 <HAL_RCC_ClockConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800139e:	f000 f951 	bl	8001644 <Error_Handler>
  }
}
 80013a2:	bf00      	nop
 80013a4:	3750      	adds	r7, #80	; 0x50
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_I2C1_Init+0x50>)
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <MX_I2C1_Init+0x54>)
 80013bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_I2C1_Init+0x50>)
 80013c0:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_I2C1_Init+0x58>)
 80013c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_I2C1_Init+0x50>)
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <MX_I2C1_Init+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_I2C1_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_I2C1_Init+0x50>)
 80013f2:	f001 f9b3 	bl	800275c <HAL_I2C_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013fc:	f000 f922 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200001f0 	.word	0x200001f0
 8001408:	40005400 	.word	0x40005400
 800140c:	000186a0 	.word	0x000186a0

08001410 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	; 0x38
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]
 800143e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001440:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_TIM2_Init+0xe8>)
 800144a:	2227      	movs	r2, #39	; 0x27
 800144c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001456:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800145a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145c:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <MX_TIM2_Init+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001468:	4823      	ldr	r0, [pc, #140]	; (80014f8 <MX_TIM2_Init+0xe8>)
 800146a:	f002 ff9f 	bl	80043ac <HAL_TIM_Base_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001474:	f000 f8e6 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800147e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001482:	4619      	mov	r1, r3
 8001484:	481c      	ldr	r0, [pc, #112]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001486:	f003 fb8d 	bl	8004ba4 <HAL_TIM_ConfigClockSource>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001490:	f000 f8d8 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001494:	4818      	ldr	r0, [pc, #96]	; (80014f8 <MX_TIM2_Init+0xe8>)
 8001496:	f003 f8b1 	bl	80045fc <HAL_TIM_PWM_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014a0:	f000 f8d0 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4619      	mov	r1, r3
 80014b2:	4811      	ldr	r0, [pc, #68]	; (80014f8 <MX_TIM2_Init+0xe8>)
 80014b4:	f003 ff8c 	bl	80053d0 <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014be:	f000 f8c1 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c2:	2360      	movs	r3, #96	; 0x60
 80014c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_TIM2_Init+0xe8>)
 80014da:	f003 faa1 	bl	8004a20 <HAL_TIM_PWM_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014e4:	f000 f8ae 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_TIM2_Init+0xe8>)
 80014ea:	f000 f991 	bl	8001810 <HAL_TIM_MspPostInit>

}
 80014ee:	bf00      	nop
 80014f0:	3738      	adds	r7, #56	; 0x38
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000244 	.word	0x20000244

080014fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_TIM3_Init+0x94>)
 800151a:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <MX_TIM3_Init+0x98>)
 800151c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40-1;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_TIM3_Init+0x94>)
 8001520:	2227      	movs	r2, #39	; 0x27
 8001522:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_TIM3_Init+0x94>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_TIM3_Init+0x94>)
 800152c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001530:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_TIM3_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_TIM3_Init+0x94>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <MX_TIM3_Init+0x94>)
 8001540:	f002 ff34 	bl	80043ac <HAL_TIM_Base_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800154a:	f000 f87b 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001552:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4619      	mov	r1, r3
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_TIM3_Init+0x94>)
 800155c:	f003 fb22 	bl	8004ba4 <HAL_TIM_ConfigClockSource>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001566:	f000 f86d 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_TIM3_Init+0x94>)
 8001578:	f003 ff2a 	bl	80053d0 <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001582:	f000 f85f 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000028c 	.word	0x2000028c
 8001594:	40000400 	.word	0x40000400

08001598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_DMA_Init+0x3c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <MX_DMA_Init+0x3c>)
 80015a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_DMA_Init+0x3c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2010      	movs	r0, #16
 80015c0:	f000 fc0f 	bl	8001de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015c4:	2010      	movs	r0, #16
 80015c6:	f000 fc28 	bl	8001e1a <HAL_NVIC_EnableIRQ>

}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_GPIO_Init+0x68>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <MX_GPIO_Init+0x68>)
 80015e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_GPIO_Init+0x68>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_GPIO_Init+0x68>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <MX_GPIO_Init+0x68>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <MX_GPIO_Init+0x68>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_GPIO_Init+0x68>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <MX_GPIO_Init+0x68>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_GPIO_Init+0x68>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>
	...

08001650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_MspInit+0x4c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a0f      	ldr	r2, [pc, #60]	; (800169c <HAL_MspInit+0x4c>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_MspInit+0x4c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_MspInit+0x4c>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a19      	ldr	r2, [pc, #100]	; (8001724 <HAL_I2C_MspInit+0x84>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12b      	bne.n	800171a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_I2C_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a17      	ldr	r2, [pc, #92]	; (8001728 <HAL_I2C_MspInit+0x88>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_I2C_MspInit+0x88>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016de:	23c0      	movs	r3, #192	; 0xc0
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ee:	2304      	movs	r3, #4
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <HAL_I2C_MspInit+0x8c>)
 80016fa:	f000 fe93 	bl	8002424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_I2C_MspInit+0x88>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_I2C_MspInit+0x88>)
 8001708:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_I2C_MspInit+0x88>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40005400 	.word	0x40005400
 8001728:	40023800 	.word	0x40023800
 800172c:	40020400 	.word	0x40020400

08001730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d13e      	bne.n	80017c0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <HAL_TIM_Base_MspInit+0xd0>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a2d      	ldr	r2, [pc, #180]	; (8001800 <HAL_TIM_Base_MspInit+0xd0>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_TIM_Base_MspInit+0xd0>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800175e:	4b29      	ldr	r3, [pc, #164]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 8001760:	4a29      	ldr	r2, [pc, #164]	; (8001808 <HAL_TIM_Base_MspInit+0xd8>)
 8001762:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 8001766:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800176a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 800176e:	2240      	movs	r2, #64	; 0x40
 8001770:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 800177a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800177e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 8001782:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001786:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 800178a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800178e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80017a2:	4818      	ldr	r0, [pc, #96]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 80017a4:	f000 fb54 	bl	8001e50 <HAL_DMA_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80017ae:	f7ff ff49 	bl	8001644 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a13      	ldr	r2, [pc, #76]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_TIM_Base_MspInit+0xd4>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017be:	e01a      	b.n	80017f6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_TIM_Base_MspInit+0xdc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d115      	bne.n	80017f6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_TIM_Base_MspInit+0xd0>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <HAL_TIM_Base_MspInit+0xd0>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_TIM_Base_MspInit+0xd0>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	201d      	movs	r0, #29
 80017ec:	f000 faf9 	bl	8001de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017f0:	201d      	movs	r0, #29
 80017f2:	f000 fb12 	bl	8001e1a <HAL_NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	200002d4 	.word	0x200002d4
 8001808:	40026088 	.word	0x40026088
 800180c:	40000400 	.word	0x40000400

08001810 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001830:	d11d      	bne.n	800186e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_TIM_MspPostInit+0x68>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_TIM_MspPostInit+0x68>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_TIM_MspPostInit+0x68>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800184e:	2301      	movs	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800185e:	2301      	movs	r3, #1
 8001860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	4619      	mov	r1, r3
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <HAL_TIM_MspPostInit+0x6c>)
 800186a:	f000 fddb 	bl	8002424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800186e:	bf00      	nop
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40020000 	.word	0x40020000

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001884:	e7fe      	b.n	8001884 <NMI_Handler+0x4>

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018cc:	f000 f96a 	bl	8001ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <DMA1_Stream5_IRQHandler+0x10>)
 80018da:	f000 fb67 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200002d4 	.word	0x200002d4

080018e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM3_IRQHandler+0x10>)
 80018ee:	f002 ffa7 	bl	8004840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000028c 	.word	0x2000028c

080018fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return 1;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_kill>:

int _kill(int pid, int sig)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001916:	f004 fbc9 	bl	80060ac <__errno>
 800191a:	4603      	mov	r3, r0
 800191c:	2216      	movs	r2, #22
 800191e:	601a      	str	r2, [r3, #0]
  return -1;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_exit>:

void _exit (int status)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ffe7 	bl	800190c <_kill>
  while (1) {}    /* Make sure we hang here */
 800193e:	e7fe      	b.n	800193e <_exit+0x12>

08001940 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e00a      	b.n	8001968 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001952:	f3af 8000 	nop.w
 8001956:	4601      	mov	r1, r0
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	b2ca      	uxtb	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbf0      	blt.n	8001952 <_read+0x12>
  }

  return len;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	e009      	b.n	80019a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	60ba      	str	r2, [r7, #8]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf1      	blt.n	800198c <_write+0x12>
  }
  return len;
 80019a8:	687b      	ldr	r3, [r7, #4]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_close>:

int _close(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019da:	605a      	str	r2, [r3, #4]
  return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_isatty>:

int _isatty(int file)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f004 fb2e 	bl	80060ac <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20020000 	.word	0x20020000
 8001a7c:	00000400 	.word	0x00000400
 8001a80:	2000033c 	.word	0x2000033c
 8001a84:	20000490 	.word	0x20000490

08001a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <SystemInit+0x20>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <SystemInit+0x20>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ab0:	f7ff ffea 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ab6:	490d      	ldr	r1, [pc, #52]	; (8001aec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001acc:	4c0a      	ldr	r4, [pc, #40]	; (8001af8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ada:	f004 faed 	bl	80060b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ade:	f7ff fb95 	bl	800120c <main>
  bx  lr    
 8001ae2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001af0:	080085e4 	.word	0x080085e4
  ldr r2, =_sbss
 8001af4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001af8:	20000490 	.word	0x20000490

08001afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC_IRQHandler>
	...

08001b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <HAL_Init+0x40>)
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_Init+0x40>)
 8001b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <HAL_Init+0x40>)
 8001b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f000 f94f 	bl	8001dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2e:	200f      	movs	r0, #15
 8001b30:	f000 f808 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b34:	f7ff fd8c 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00

08001b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_InitTick+0x54>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_InitTick+0x58>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f967 	bl	8001e36 <HAL_SYSTICK_Config>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00e      	b.n	8001b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d80a      	bhi.n	8001b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f000 f92f 	bl	8001de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b84:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <HAL_InitTick+0x5c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x20>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000340 	.word	0x20000340

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_GetTick+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000340 	.word	0x20000340

08001be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff ffee 	bl	8001bcc <HAL_GetTick>
 8001bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfc:	d005      	beq.n	8001c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_Delay+0x44>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c0a:	bf00      	nop
 8001c0c:	f7ff ffde 	bl	8001bcc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d8f7      	bhi.n	8001c0c <HAL_Delay+0x28>
  {
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000008 	.word	0x20000008

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0b      	blt.n	8001cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <__NVIC_EnableIRQ+0x38>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	; (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d98:	d301      	bcc.n	8001d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00f      	b.n	8001dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <SysTick_Config+0x40>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da6:	210f      	movs	r1, #15
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f7ff ff8e 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <SysTick_Config+0x40>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <SysTick_Config+0x40>)
 8001db8:	2207      	movs	r2, #7
 8001dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	e000e010 	.word	0xe000e010

08001dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff29 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df4:	f7ff ff3e 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	6978      	ldr	r0, [r7, #20]
 8001e00:	f7ff ff8e 	bl	8001d20 <NVIC_EncodePriority>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff5d 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff31 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ffa2 	bl	8001d88 <SysTick_Config>
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff feb6 	bl	8001bcc <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e099      	b.n	8001fa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e8c:	e00f      	b.n	8001eae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e8e:	f7ff fe9d 	bl	8001bcc <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d908      	bls.n	8001eae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e078      	b.n	8001fa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e8      	bne.n	8001e8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <HAL_DMA_Init+0x158>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d107      	bne.n	8001f18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	4313      	orrs	r3, r2
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f023 0307 	bic.w	r3, r3, #7
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d117      	bne.n	8001f72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00e      	beq.n	8001f72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f9e9 	bl	800232c <DMA_CheckFifoParam>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e016      	b.n	8001fa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f9a0 	bl	80022c0 <DMA_CalcBaseAndBitshift>
 8001f80:	4603      	mov	r3, r0
 8001f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	223f      	movs	r2, #63	; 0x3f
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	f010803f 	.word	0xf010803f

08001fac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fb8:	4b8e      	ldr	r3, [pc, #568]	; (80021f4 <HAL_DMA_IRQHandler+0x248>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a8e      	ldr	r2, [pc, #568]	; (80021f8 <HAL_DMA_IRQHandler+0x24c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01a      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2208      	movs	r2, #8
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2201      	movs	r2, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2201      	movs	r2, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2204      	movs	r2, #4
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2204      	movs	r2, #4
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2210      	movs	r2, #16
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03c      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2210      	movs	r2, #16
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d024      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
 80020da:	e01f      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e016      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2220      	movs	r2, #32
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 808f 	beq.w	800224c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8087 	beq.w	800224c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2220      	movs	r2, #32
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b05      	cmp	r3, #5
 8002154:	d136      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0216 	bic.w	r2, r2, #22
 8002164:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002174:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <HAL_DMA_IRQHandler+0x1da>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0208 	bic.w	r2, r2, #8
 8002194:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	223f      	movs	r2, #63	; 0x3f
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07e      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
        }
        return;
 80021c2:	e079      	b.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01d      	beq.n	800220e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d031      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e02c      	b.n	800224c <HAL_DMA_IRQHandler+0x2a0>
 80021f2:	bf00      	nop
 80021f4:	20000000 	.word	0x20000000
 80021f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d023      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
 800220c:	e01e      	b.n	800224c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10f      	bne.n	800223c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0210 	bic.w	r2, r2, #16
 800222a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	2b00      	cmp	r3, #0
 8002252:	d032      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2205      	movs	r2, #5
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3301      	adds	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	d307      	bcc.n	8002294 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f2      	bne.n	8002278 <HAL_DMA_IRQHandler+0x2cc>
 8002292:	e000      	b.n	8002296 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002294:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
 80022b6:	e000      	b.n	80022ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80022b8:	bf00      	nop
    }
  }
}
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	3b10      	subs	r3, #16
 80022d0:	4a14      	ldr	r2, [pc, #80]	; (8002324 <DMA_CalcBaseAndBitshift+0x64>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <DMA_CalcBaseAndBitshift+0x68>)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d909      	bls.n	8002302 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	1d1a      	adds	r2, r3, #4
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	659a      	str	r2, [r3, #88]	; 0x58
 8002300:	e007      	b.n	8002312 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800230a:	f023 0303 	bic.w	r3, r3, #3
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	aaaaaaab 	.word	0xaaaaaaab
 8002328:	08008258 	.word	0x08008258

0800232c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d11f      	bne.n	8002386 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d856      	bhi.n	80023fa <DMA_CheckFifoParam+0xce>
 800234c:	a201      	add	r2, pc, #4	; (adr r2, 8002354 <DMA_CheckFifoParam+0x28>)
 800234e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002352:	bf00      	nop
 8002354:	08002365 	.word	0x08002365
 8002358:	08002377 	.word	0x08002377
 800235c:	08002365 	.word	0x08002365
 8002360:	080023fb 	.word	0x080023fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d046      	beq.n	80023fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002374:	e043      	b.n	80023fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800237e:	d140      	bne.n	8002402 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002384:	e03d      	b.n	8002402 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238e:	d121      	bne.n	80023d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d837      	bhi.n	8002406 <DMA_CheckFifoParam+0xda>
 8002396:	a201      	add	r2, pc, #4	; (adr r2, 800239c <DMA_CheckFifoParam+0x70>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	080023ad 	.word	0x080023ad
 80023a0:	080023b3 	.word	0x080023b3
 80023a4:	080023ad 	.word	0x080023ad
 80023a8:	080023c5 	.word	0x080023c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      break;
 80023b0:	e030      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d025      	beq.n	800240a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c2:	e022      	b.n	800240a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023cc:	d11f      	bne.n	800240e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023d2:	e01c      	b.n	800240e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d903      	bls.n	80023e2 <DMA_CheckFifoParam+0xb6>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d003      	beq.n	80023e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023e0:	e018      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      break;
 80023e6:	e015      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00e      	beq.n	8002412 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      break;
 80023f8:	e00b      	b.n	8002412 <DMA_CheckFifoParam+0xe6>
      break;
 80023fa:	bf00      	nop
 80023fc:	e00a      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;
 80023fe:	bf00      	nop
 8002400:	e008      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;
 8002402:	bf00      	nop
 8002404:	e006      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;
 8002406:	bf00      	nop
 8002408:	e004      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e002      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;   
 800240e:	bf00      	nop
 8002410:	e000      	b.n	8002414 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
    }
  } 
  
  return status; 
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop

08002424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e16b      	b.n	8002718 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002440:	2201      	movs	r2, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	429a      	cmp	r2, r3
 800245a:	f040 815a 	bne.w	8002712 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d005      	beq.n	8002476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002472:	2b02      	cmp	r3, #2
 8002474:	d130      	bne.n	80024d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2203      	movs	r2, #3
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 0201 	and.w	r2, r3, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d017      	beq.n	8002514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d123      	bne.n	8002568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	08da      	lsrs	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3208      	adds	r2, #8
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	220f      	movs	r2, #15
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	08da      	lsrs	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3208      	adds	r2, #8
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0203 	and.w	r2, r3, #3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80b4 	beq.w	8002712 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b60      	ldr	r3, [pc, #384]	; (8002730 <HAL_GPIO_Init+0x30c>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a5f      	ldr	r2, [pc, #380]	; (8002730 <HAL_GPIO_Init+0x30c>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <HAL_GPIO_Init+0x30c>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c6:	4a5b      	ldr	r2, [pc, #364]	; (8002734 <HAL_GPIO_Init+0x310>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	220f      	movs	r2, #15
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_GPIO_Init+0x314>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d02b      	beq.n	800264a <HAL_GPIO_Init+0x226>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a51      	ldr	r2, [pc, #324]	; (800273c <HAL_GPIO_Init+0x318>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d025      	beq.n	8002646 <HAL_GPIO_Init+0x222>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a50      	ldr	r2, [pc, #320]	; (8002740 <HAL_GPIO_Init+0x31c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d01f      	beq.n	8002642 <HAL_GPIO_Init+0x21e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4f      	ldr	r2, [pc, #316]	; (8002744 <HAL_GPIO_Init+0x320>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d019      	beq.n	800263e <HAL_GPIO_Init+0x21a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4e      	ldr	r2, [pc, #312]	; (8002748 <HAL_GPIO_Init+0x324>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0x216>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4d      	ldr	r2, [pc, #308]	; (800274c <HAL_GPIO_Init+0x328>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00d      	beq.n	8002636 <HAL_GPIO_Init+0x212>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4c      	ldr	r2, [pc, #304]	; (8002750 <HAL_GPIO_Init+0x32c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x20e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4b      	ldr	r2, [pc, #300]	; (8002754 <HAL_GPIO_Init+0x330>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_GPIO_Init+0x20a>
 800262a:	2307      	movs	r3, #7
 800262c:	e00e      	b.n	800264c <HAL_GPIO_Init+0x228>
 800262e:	2308      	movs	r3, #8
 8002630:	e00c      	b.n	800264c <HAL_GPIO_Init+0x228>
 8002632:	2306      	movs	r3, #6
 8002634:	e00a      	b.n	800264c <HAL_GPIO_Init+0x228>
 8002636:	2305      	movs	r3, #5
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x228>
 800263a:	2304      	movs	r3, #4
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x228>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x228>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x228>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x228>
 800264a:	2300      	movs	r3, #0
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265c:	4935      	ldr	r1, [pc, #212]	; (8002734 <HAL_GPIO_Init+0x310>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266a:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <HAL_GPIO_Init+0x334>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268e:	4a32      	ldr	r2, [pc, #200]	; (8002758 <HAL_GPIO_Init+0x334>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_GPIO_Init+0x334>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b8:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_GPIO_Init+0x334>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026be:	4b26      	ldr	r3, [pc, #152]	; (8002758 <HAL_GPIO_Init+0x334>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e2:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <HAL_GPIO_Init+0x334>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_GPIO_Init+0x334>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270c:	4a12      	ldr	r2, [pc, #72]	; (8002758 <HAL_GPIO_Init+0x334>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	f67f ae90 	bls.w	8002440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40013800 	.word	0x40013800
 8002738:	40020000 	.word	0x40020000
 800273c:	40020400 	.word	0x40020400
 8002740:	40020800 	.word	0x40020800
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40021000 	.word	0x40021000
 800274c:	40021400 	.word	0x40021400
 8002750:	40021800 	.word	0x40021800
 8002754:	40021c00 	.word	0x40021c00
 8002758:	40013c00 	.word	0x40013c00

0800275c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e12b      	b.n	80029c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe ff8c 	bl	80016a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2224      	movs	r2, #36	; 0x24
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027c0:	f001 fde0 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 80027c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a81      	ldr	r2, [pc, #516]	; (80029d0 <HAL_I2C_Init+0x274>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d807      	bhi.n	80027e0 <HAL_I2C_Init+0x84>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a80      	ldr	r2, [pc, #512]	; (80029d4 <HAL_I2C_Init+0x278>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	bf94      	ite	ls
 80027d8:	2301      	movls	r3, #1
 80027da:	2300      	movhi	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e006      	b.n	80027ee <HAL_I2C_Init+0x92>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a7d      	ldr	r2, [pc, #500]	; (80029d8 <HAL_I2C_Init+0x27c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	bf94      	ite	ls
 80027e8:	2301      	movls	r3, #1
 80027ea:	2300      	movhi	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0e7      	b.n	80029c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a78      	ldr	r2, [pc, #480]	; (80029dc <HAL_I2C_Init+0x280>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0c9b      	lsrs	r3, r3, #18
 8002800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_I2C_Init+0x274>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d802      	bhi.n	8002830 <HAL_I2C_Init+0xd4>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	e009      	b.n	8002844 <HAL_I2C_Init+0xe8>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4a69      	ldr	r2, [pc, #420]	; (80029e0 <HAL_I2C_Init+0x284>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	3301      	adds	r3, #1
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	430b      	orrs	r3, r1
 800284a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002856:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	495c      	ldr	r1, [pc, #368]	; (80029d0 <HAL_I2C_Init+0x274>)
 8002860:	428b      	cmp	r3, r1
 8002862:	d819      	bhi.n	8002898 <HAL_I2C_Init+0x13c>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e59      	subs	r1, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002878:	400b      	ands	r3, r1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_I2C_Init+0x138>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e59      	subs	r1, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fbb1 f3f3 	udiv	r3, r1, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002892:	e051      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002894:	2304      	movs	r3, #4
 8002896:	e04f      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <HAL_I2C_Init+0x168>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1e58      	subs	r0, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	440b      	add	r3, r1
 80028ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e012      	b.n	80028ea <HAL_I2C_Init+0x18e>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e58      	subs	r0, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	0099      	lsls	r1, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Init+0x196>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e022      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10e      	bne.n	8002918 <HAL_I2C_Init+0x1bc>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e58      	subs	r0, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6859      	ldr	r1, [r3, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	440b      	add	r3, r1
 8002908:	fbb0 f3f3 	udiv	r3, r0, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002916:	e00f      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	0099      	lsls	r1, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	fbb0 f3f3 	udiv	r3, r0, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	6809      	ldr	r1, [r1, #0]
 800293c:	4313      	orrs	r3, r2
 800293e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002966:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6911      	ldr	r1, [r2, #16]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68d2      	ldr	r2, [r2, #12]
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	000186a0 	.word	0x000186a0
 80029d4:	001e847f 	.word	0x001e847f
 80029d8:	003d08ff 	.word	0x003d08ff
 80029dc:	431bde83 	.word	0x431bde83
 80029e0:	10624dd3 	.word	0x10624dd3

080029e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	461a      	mov	r2, r3
 80029f0:	460b      	mov	r3, r1
 80029f2:	817b      	strh	r3, [r7, #10]
 80029f4:	4613      	mov	r3, r2
 80029f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff f8e8 	bl	8001bcc <HAL_GetTick>
 80029fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	f040 80e0 	bne.w	8002bcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2319      	movs	r3, #25
 8002a12:	2201      	movs	r2, #1
 8002a14:	4970      	ldr	r1, [pc, #448]	; (8002bd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fe0e 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
 8002a24:	e0d3      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_I2C_Master_Transmit+0x50>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e0cc      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d007      	beq.n	8002a5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2221      	movs	r2, #33	; 0x21
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2210      	movs	r2, #16
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	893a      	ldrh	r2, [r7, #8]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4a50      	ldr	r2, [pc, #320]	; (8002bdc <HAL_I2C_Master_Transmit+0x1f8>)
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a9c:	8979      	ldrh	r1, [r7, #10]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	6a3a      	ldr	r2, [r7, #32]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fbc8 	bl	8003238 <I2C_MasterRequestWrite>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e08d      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ac8:	e066      	b.n	8002b98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	6a39      	ldr	r1, [r7, #32]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fecc 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d107      	bne.n	8002af2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d11b      	bne.n	8002b6c <HAL_I2C_Master_Transmit+0x188>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d017      	beq.n	8002b6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	781a      	ldrb	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	6a39      	ldr	r1, [r7, #32]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fec3 	bl	80038fc <I2C_WaitOnBTFFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00d      	beq.n	8002b98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d107      	bne.n	8002b94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e01a      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d194      	bne.n	8002aca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	00100002 	.word	0x00100002
 8002bdc:	ffff0000 	.word	0xffff0000

08002be0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	817b      	strh	r3, [r7, #10]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	813b      	strh	r3, [r7, #8]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bfa:	f7fe ffe7 	bl	8001bcc <HAL_GetTick>
 8002bfe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	f040 80d9 	bne.w	8002dc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2319      	movs	r3, #25
 8002c14:	2201      	movs	r2, #1
 8002c16:	496d      	ldr	r1, [pc, #436]	; (8002dcc <HAL_I2C_Mem_Write+0x1ec>)
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fd0d 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
 8002c26:	e0cc      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_I2C_Mem_Write+0x56>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e0c5      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d007      	beq.n	8002c5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2221      	movs	r2, #33	; 0x21
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2240      	movs	r2, #64	; 0x40
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a3a      	ldr	r2, [r7, #32]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a4d      	ldr	r2, [pc, #308]	; (8002dd0 <HAL_I2C_Mem_Write+0x1f0>)
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c9e:	88f8      	ldrh	r0, [r7, #6]
 8002ca0:	893a      	ldrh	r2, [r7, #8]
 8002ca2:	8979      	ldrh	r1, [r7, #10]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	4603      	mov	r3, r0
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fb44 	bl	800333c <I2C_RequestMemoryWrite>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d052      	beq.n	8002d60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e081      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fdd2 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d107      	bne.n	8002ce6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e06b      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d11b      	bne.n	8002d60 <HAL_I2C_Mem_Write+0x180>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d017      	beq.n	8002d60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1aa      	bne.n	8002cbe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fdc5 	bl	80038fc <I2C_WaitOnBTFFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d107      	bne.n	8002d90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e016      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e000      	b.n	8002dc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
  }
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	00100002 	.word	0x00100002
 8002dd0:	ffff0000 	.word	0xffff0000

08002dd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08c      	sub	sp, #48	; 0x30
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	817b      	strh	r3, [r7, #10]
 8002de6:	460b      	mov	r3, r1
 8002de8:	813b      	strh	r3, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dee:	f7fe feed 	bl	8001bcc <HAL_GetTick>
 8002df2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	f040 8214 	bne.w	800322a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2319      	movs	r3, #25
 8002e08:	2201      	movs	r2, #1
 8002e0a:	497b      	ldr	r1, [pc, #492]	; (8002ff8 <HAL_I2C_Mem_Read+0x224>)
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fc13 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e207      	b.n	800322c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_I2C_Mem_Read+0x56>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e200      	b.n	800322c <HAL_I2C_Mem_Read+0x458>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d007      	beq.n	8002e50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2222      	movs	r2, #34	; 0x22
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a5b      	ldr	r2, [pc, #364]	; (8002ffc <HAL_I2C_Mem_Read+0x228>)
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e92:	88f8      	ldrh	r0, [r7, #6]
 8002e94:	893a      	ldrh	r2, [r7, #8]
 8002e96:	8979      	ldrh	r1, [r7, #10]
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fae0 	bl	8003468 <I2C_RequestMemoryRead>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1bc      	b.n	800322c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d113      	bne.n	8002ee2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	623b      	str	r3, [r7, #32]
 8002ece:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e190      	b.n	8003204 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d11b      	bne.n	8002f22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e170      	b.n	8003204 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d11b      	bne.n	8002f62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	e150      	b.n	8003204 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f78:	e144      	b.n	8003204 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	f200 80f1 	bhi.w	8003166 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d123      	bne.n	8002fd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fcfb 	bl	800398c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e145      	b.n	800322c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fd2:	e117      	b.n	8003204 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d14e      	bne.n	800307a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	4906      	ldr	r1, [pc, #24]	; (8003000 <HAL_I2C_Mem_Read+0x22c>)
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fb26 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e11a      	b.n	800322c <HAL_I2C_Mem_Read+0x458>
 8002ff6:	bf00      	nop
 8002ff8:	00100002 	.word	0x00100002
 8002ffc:	ffff0000 	.word	0xffff0000
 8003000:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003078:	e0c4      	b.n	8003204 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	2200      	movs	r2, #0
 8003082:	496c      	ldr	r1, [pc, #432]	; (8003234 <HAL_I2C_Mem_Read+0x460>)
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fad7 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0cb      	b.n	800322c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	2200      	movs	r2, #0
 80030de:	4955      	ldr	r1, [pc, #340]	; (8003234 <HAL_I2C_Mem_Read+0x460>)
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 faa9 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e09d      	b.n	800322c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003164:	e04e      	b.n	8003204 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fc0e 	bl	800398c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e058      	b.n	800322c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d124      	bne.n	8003204 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d107      	bne.n	80031d2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	f47f aeb6 	bne.w	8002f7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e000      	b.n	800322c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800322a:	2302      	movs	r3, #2
  }
}
 800322c:	4618      	mov	r0, r3
 800322e:	3728      	adds	r7, #40	; 0x28
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	00010004 	.word	0x00010004

08003238 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d006      	beq.n	8003262 <I2C_MasterRequestWrite+0x2a>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d003      	beq.n	8003262 <I2C_MasterRequestWrite+0x2a>
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003260:	d108      	bne.n	8003274 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e00b      	b.n	800328c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	2b12      	cmp	r3, #18
 800327a:	d107      	bne.n	800328c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f9cd 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b2:	d103      	bne.n	80032bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e035      	b.n	800332c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c8:	d108      	bne.n	80032dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032d8:	611a      	str	r2, [r3, #16]
 80032da:	e01b      	b.n	8003314 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032dc:	897b      	ldrh	r3, [r7, #10]
 80032de:	11db      	asrs	r3, r3, #7
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 0306 	and.w	r3, r3, #6
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f063 030f 	orn	r3, r3, #15
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	490e      	ldr	r1, [pc, #56]	; (8003334 <I2C_MasterRequestWrite+0xfc>)
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fa16 	bl	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e010      	b.n	800332c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800330a:	897b      	ldrh	r3, [r7, #10]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4907      	ldr	r1, [pc, #28]	; (8003338 <I2C_MasterRequestWrite+0x100>)
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fa06 	bl	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	00010008 	.word	0x00010008
 8003338:	00010002 	.word	0x00010002

0800333c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	4608      	mov	r0, r1
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	4603      	mov	r3, r0
 800334c:	817b      	strh	r3, [r7, #10]
 800334e:	460b      	mov	r3, r1
 8003350:	813b      	strh	r3, [r7, #8]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003364:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	2200      	movs	r2, #0
 800336e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f960 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d103      	bne.n	8003396 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e05f      	b.n	800345a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	6a3a      	ldr	r2, [r7, #32]
 80033ae:	492d      	ldr	r1, [pc, #180]	; (8003464 <I2C_RequestMemoryWrite+0x128>)
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f9bb 	bl	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e04c      	b.n	800345a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d8:	6a39      	ldr	r1, [r7, #32]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fa46 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d107      	bne.n	80033fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e02b      	b.n	800345a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003408:	893b      	ldrh	r3, [r7, #8]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	611a      	str	r2, [r3, #16]
 8003412:	e021      	b.n	8003458 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003414:	893b      	ldrh	r3, [r7, #8]
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	b29b      	uxth	r3, r3
 800341a:	b2da      	uxtb	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	6a39      	ldr	r1, [r7, #32]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fa20 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2b04      	cmp	r3, #4
 8003438:	d107      	bne.n	800344a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003448:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e005      	b.n	800345a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800344e:	893b      	ldrh	r3, [r7, #8]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	00010002 	.word	0x00010002

08003468 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4603      	mov	r3, r0
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	460b      	mov	r3, r1
 800347c:	813b      	strh	r3, [r7, #8]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003490:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f8c2 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00d      	beq.n	80034d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c8:	d103      	bne.n	80034d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0aa      	b.n	800362c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034d6:	897b      	ldrh	r3, [r7, #10]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	6a3a      	ldr	r2, [r7, #32]
 80034ea:	4952      	ldr	r1, [pc, #328]	; (8003634 <I2C_RequestMemoryRead+0x1cc>)
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f91d 	bl	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e097      	b.n	800362c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003514:	6a39      	ldr	r1, [r7, #32]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f9a8 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00d      	beq.n	800353e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b04      	cmp	r3, #4
 8003528:	d107      	bne.n	800353a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003538:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e076      	b.n	800362c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003544:	893b      	ldrh	r3, [r7, #8]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	611a      	str	r2, [r3, #16]
 800354e:	e021      	b.n	8003594 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003550:	893b      	ldrh	r3, [r7, #8]
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	b29b      	uxth	r3, r3
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800355e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003560:	6a39      	ldr	r1, [r7, #32]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f982 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b04      	cmp	r3, #4
 8003574:	d107      	bne.n	8003586 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003584:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e050      	b.n	800362c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800358a:	893b      	ldrh	r3, [r7, #8]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	6a39      	ldr	r1, [r7, #32]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f967 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00d      	beq.n	80035c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d107      	bne.n	80035bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e035      	b.n	800362c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f82b 	bl	8003638 <I2C_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f6:	d103      	bne.n	8003600 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e013      	b.n	800362c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003604:	897b      	ldrh	r3, [r7, #10]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	6a3a      	ldr	r2, [r7, #32]
 8003618:	4906      	ldr	r1, [pc, #24]	; (8003634 <I2C_RequestMemoryRead+0x1cc>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f886 	bl	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	00010002 	.word	0x00010002

08003638 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003648:	e048      	b.n	80036dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d044      	beq.n	80036dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fe fabb 	bl	8001bcc <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d139      	bne.n	80036dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	0c1b      	lsrs	r3, r3, #16
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d10d      	bne.n	800368e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	43da      	mvns	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4013      	ands	r3, r2
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	e00c      	b.n	80036a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	43da      	mvns	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4013      	ands	r3, r2
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d116      	bne.n	80036dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e023      	b.n	8003724 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	0c1b      	lsrs	r3, r3, #16
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d10d      	bne.n	8003702 <I2C_WaitOnFlagUntilTimeout+0xca>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	43da      	mvns	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	e00c      	b.n	800371c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	43da      	mvns	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4013      	ands	r3, r2
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	429a      	cmp	r2, r3
 8003720:	d093      	beq.n	800364a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800373a:	e071      	b.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374a:	d123      	bne.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003764:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f043 0204 	orr.w	r2, r3, #4
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e067      	b.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	d041      	beq.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379c:	f7fe fa16 	bl	8001bcc <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d302      	bcc.n	80037b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d136      	bne.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d10c      	bne.n	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	43da      	mvns	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4013      	ands	r3, r2
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bf14      	ite	ne
 80037ce:	2301      	movne	r3, #1
 80037d0:	2300      	moveq	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	e00b      	b.n	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	43da      	mvns	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d016      	beq.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e021      	b.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	0c1b      	lsrs	r3, r3, #16
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d10c      	bne.n	8003844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	43da      	mvns	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	e00b      	b.n	800385c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	bf14      	ite	ne
 8003856:	2301      	movne	r3, #1
 8003858:	2300      	moveq	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	f47f af6d 	bne.w	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003878:	e034      	b.n	80038e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f8e3 	bl	8003a46 <I2C_IsAcknowledgeFailed>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e034      	b.n	80038f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d028      	beq.n	80038e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003892:	f7fe f99b 	bl	8001bcc <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d11d      	bne.n	80038e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	2b80      	cmp	r3, #128	; 0x80
 80038b4:	d016      	beq.n	80038e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f043 0220 	orr.w	r2, r3, #32
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e007      	b.n	80038f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b80      	cmp	r3, #128	; 0x80
 80038f0:	d1c3      	bne.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003908:	e034      	b.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f89b 	bl	8003a46 <I2C_IsAcknowledgeFailed>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e034      	b.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d028      	beq.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003922:	f7fe f953 	bl	8001bcc <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d11d      	bne.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b04      	cmp	r3, #4
 8003944:	d016      	beq.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e007      	b.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d1c3      	bne.n	800390a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003998:	e049      	b.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d119      	bne.n	80039dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0210 	mvn.w	r2, #16
 80039b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e030      	b.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039dc:	f7fe f8f6 	bl	8001bcc <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d302      	bcc.n	80039f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d11d      	bne.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d016      	beq.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f043 0220 	orr.w	r2, r3, #32
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e007      	b.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d1ae      	bne.n	800399a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5c:	d11b      	bne.n	8003a96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f043 0204 	orr.w	r2, r3, #4
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e267      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d075      	beq.n	8003bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ac2:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d00c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ace:	4b85      	ldr	r3, [pc, #532]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d112      	bne.n	8003b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ada:	4b82      	ldr	r3, [pc, #520]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d05b      	beq.n	8003bac <HAL_RCC_OscConfig+0x108>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d157      	bne.n	8003bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e242      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d106      	bne.n	8003b18 <HAL_RCC_OscConfig+0x74>
 8003b0a:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a75      	ldr	r2, [pc, #468]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xb0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x98>
 8003b22:	4b70      	ldr	r3, [pc, #448]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a6f      	ldr	r2, [pc, #444]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b6d      	ldr	r3, [pc, #436]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a6c      	ldr	r2, [pc, #432]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xb0>
 8003b3c:	4b69      	ldr	r3, [pc, #420]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a68      	ldr	r2, [pc, #416]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b66      	ldr	r3, [pc, #408]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a65      	ldr	r2, [pc, #404]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fe f836 	bl	8001bcc <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fe f832 	bl	8001bcc <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e207      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b5b      	ldr	r3, [pc, #364]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xc0>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fe f822 	bl	8001bcc <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe f81e 	bl	8001bcc <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1f3      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	4b51      	ldr	r3, [pc, #324]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0xe8>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d063      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bba:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc6:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d11c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd2:	4b44      	ldr	r3, [pc, #272]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d116      	bne.n	8003c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x152>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e1c7      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4937      	ldr	r1, [pc, #220]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	e03a      	b.n	8003c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c14:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <HAL_RCC_OscConfig+0x244>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fd ffd7 	bl	8001bcc <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fd ffd3 	bl	8001bcc <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e1a8      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	4b2b      	ldr	r3, [pc, #172]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4925      	ldr	r1, [pc, #148]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]
 8003c54:	e015      	b.n	8003c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <HAL_RCC_OscConfig+0x244>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd ffb6 	bl	8001bcc <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c64:	f7fd ffb2 	bl	8001bcc <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e187      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d036      	beq.n	8003cfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_RCC_OscConfig+0x248>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fd ff96 	bl	8001bcc <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fd ff92 	bl	8001bcc <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e167      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x200>
 8003cc2:	e01b      	b.n	8003cfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_RCC_OscConfig+0x248>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cca:	f7fd ff7f 	bl	8001bcc <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd0:	e00e      	b.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7fd ff7b 	bl	8001bcc <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d907      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e150      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	42470000 	.word	0x42470000
 8003cec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	4b88      	ldr	r3, [pc, #544]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ea      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8097 	beq.w	8003e38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0e:	4b81      	ldr	r3, [pc, #516]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10f      	bne.n	8003d3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	4b7d      	ldr	r3, [pc, #500]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	4a7c      	ldr	r2, [pc, #496]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2a:	4b7a      	ldr	r3, [pc, #488]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3a:	4b77      	ldr	r3, [pc, #476]	; (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d118      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d46:	4b74      	ldr	r3, [pc, #464]	; (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a73      	ldr	r2, [pc, #460]	; (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d52:	f7fd ff3b 	bl	8001bcc <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5a:	f7fd ff37 	bl	8001bcc <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e10c      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6c:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x2ea>
 8003d80:	4b64      	ldr	r3, [pc, #400]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a63      	ldr	r2, [pc, #396]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8c:	e01c      	b.n	8003dc8 <HAL_RCC_OscConfig+0x324>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b05      	cmp	r3, #5
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x30c>
 8003d96:	4b5f      	ldr	r3, [pc, #380]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a5e      	ldr	r2, [pc, #376]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
 8003da2:	4b5c      	ldr	r3, [pc, #368]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	4a5b      	ldr	r2, [pc, #364]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6713      	str	r3, [r2, #112]	; 0x70
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0x324>
 8003db0:	4b58      	ldr	r3, [pc, #352]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a57      	ldr	r2, [pc, #348]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbc:	4b55      	ldr	r3, [pc, #340]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4a54      	ldr	r2, [pc, #336]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	f023 0304 	bic.w	r3, r3, #4
 8003dc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fd fefc 	bl	8001bcc <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd8:	f7fd fef8 	bl	8001bcc <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e0cb      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dee:	4b49      	ldr	r3, [pc, #292]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0ee      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x334>
 8003dfa:	e014      	b.n	8003e26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfc:	f7fd fee6 	bl	8001bcc <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e04:	f7fd fee2 	bl	8001bcc <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0b5      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1a:	4b3e      	ldr	r3, [pc, #248]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ee      	bne.n	8003e04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2c:	4b39      	ldr	r3, [pc, #228]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	4a38      	ldr	r2, [pc, #224]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a1 	beq.w	8003f84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e42:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d05c      	beq.n	8003f08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d141      	bne.n	8003eda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <HAL_RCC_OscConfig+0x478>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fd feb6 	bl	8001bcc <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fd feb2 	bl	8001bcc <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e087      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	491b      	ldr	r1, [pc, #108]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_RCC_OscConfig+0x478>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7fd fe8b 	bl	8001bcc <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fd fe87 	bl	8001bcc <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e05c      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x416>
 8003ed8:	e054      	b.n	8003f84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <HAL_RCC_OscConfig+0x478>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fe74 	bl	8001bcc <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fd fe70 	bl	8001bcc <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e045      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x444>
 8003f06:	e03d      	b.n	8003f84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e038      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
 8003f14:	40023800 	.word	0x40023800
 8003f18:	40007000 	.word	0x40007000
 8003f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x4ec>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d028      	beq.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d121      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d11a      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f50:	4013      	ands	r3, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d111      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800

08003f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0cc      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b68      	ldr	r3, [pc, #416]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d90c      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b65      	ldr	r3, [pc, #404]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b63      	ldr	r3, [pc, #396]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0b8      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe8:	4b59      	ldr	r3, [pc, #356]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a58      	ldr	r2, [pc, #352]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004000:	4b53      	ldr	r3, [pc, #332]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a52      	ldr	r2, [pc, #328]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800400a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b50      	ldr	r3, [pc, #320]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	494d      	ldr	r1, [pc, #308]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d044      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b47      	ldr	r3, [pc, #284]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d119      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e07f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d003      	beq.n	8004052 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800404e:	2b03      	cmp	r3, #3
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004052:	4b3f      	ldr	r3, [pc, #252]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e06f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004062:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e067      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004072:	4b37      	ldr	r3, [pc, #220]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 0203 	bic.w	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4934      	ldr	r1, [pc, #208]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004084:	f7fd fda2 	bl	8001bcc <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800408c:	f7fd fd9e 	bl	8001bcc <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e04f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 020c 	and.w	r2, r3, #12
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d1eb      	bne.n	800408c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b4:	4b25      	ldr	r3, [pc, #148]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d20c      	bcs.n	80040dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b22      	ldr	r3, [pc, #136]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b20      	ldr	r3, [pc, #128]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e032      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4916      	ldr	r1, [pc, #88]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	490e      	ldr	r1, [pc, #56]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800411a:	f000 f821 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 800411e:	4602      	mov	r2, r0
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	490a      	ldr	r1, [pc, #40]	; (8004154 <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	5ccb      	ldrb	r3, [r1, r3]
 800412e:	fa22 f303 	lsr.w	r3, r2, r3
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd fd02 	bl	8001b44 <HAL_InitTick>

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023c00 	.word	0x40023c00
 8004150:	40023800 	.word	0x40023800
 8004154:	08008240 	.word	0x08008240
 8004158:	20000000 	.word	0x20000000
 800415c:	20000004 	.word	0x20000004

08004160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004164:	b094      	sub	sp, #80	; 0x50
 8004166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	647b      	str	r3, [r7, #68]	; 0x44
 800416c:	2300      	movs	r3, #0
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004170:	2300      	movs	r3, #0
 8004172:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004178:	4b79      	ldr	r3, [pc, #484]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d00d      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004184:	2b08      	cmp	r3, #8
 8004186:	f200 80e1 	bhi.w	800434c <HAL_RCC_GetSysClockFreq+0x1ec>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x34>
 800418e:	2b04      	cmp	r3, #4
 8004190:	d003      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0x3a>
 8004192:	e0db      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004194:	4b73      	ldr	r3, [pc, #460]	; (8004364 <HAL_RCC_GetSysClockFreq+0x204>)
 8004196:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004198:	e0db      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800419a:	4b73      	ldr	r3, [pc, #460]	; (8004368 <HAL_RCC_GetSysClockFreq+0x208>)
 800419c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800419e:	e0d8      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a0:	4b6f      	ldr	r3, [pc, #444]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041aa:	4b6d      	ldr	r3, [pc, #436]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d063      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b6:	4b6a      	ldr	r3, [pc, #424]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	099b      	lsrs	r3, r3, #6
 80041bc:	2200      	movs	r2, #0
 80041be:	63bb      	str	r3, [r7, #56]	; 0x38
 80041c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c8:	633b      	str	r3, [r7, #48]	; 0x30
 80041ca:	2300      	movs	r3, #0
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
 80041ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041d2:	4622      	mov	r2, r4
 80041d4:	462b      	mov	r3, r5
 80041d6:	f04f 0000 	mov.w	r0, #0
 80041da:	f04f 0100 	mov.w	r1, #0
 80041de:	0159      	lsls	r1, r3, #5
 80041e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041e4:	0150      	lsls	r0, r2, #5
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4621      	mov	r1, r4
 80041ec:	1a51      	subs	r1, r2, r1
 80041ee:	6139      	str	r1, [r7, #16]
 80041f0:	4629      	mov	r1, r5
 80041f2:	eb63 0301 	sbc.w	r3, r3, r1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004204:	4659      	mov	r1, fp
 8004206:	018b      	lsls	r3, r1, #6
 8004208:	4651      	mov	r1, sl
 800420a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800420e:	4651      	mov	r1, sl
 8004210:	018a      	lsls	r2, r1, #6
 8004212:	4651      	mov	r1, sl
 8004214:	ebb2 0801 	subs.w	r8, r2, r1
 8004218:	4659      	mov	r1, fp
 800421a:	eb63 0901 	sbc.w	r9, r3, r1
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800422a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800422e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004232:	4690      	mov	r8, r2
 8004234:	4699      	mov	r9, r3
 8004236:	4623      	mov	r3, r4
 8004238:	eb18 0303 	adds.w	r3, r8, r3
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	462b      	mov	r3, r5
 8004240:	eb49 0303 	adc.w	r3, r9, r3
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004252:	4629      	mov	r1, r5
 8004254:	024b      	lsls	r3, r1, #9
 8004256:	4621      	mov	r1, r4
 8004258:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800425c:	4621      	mov	r1, r4
 800425e:	024a      	lsls	r2, r1, #9
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004266:	2200      	movs	r2, #0
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
 800426a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800426c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004270:	f7fc fc9a 	bl	8000ba8 <__aeabi_uldivmod>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4613      	mov	r3, r2
 800427a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800427c:	e058      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427e:	4b38      	ldr	r3, [pc, #224]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	2200      	movs	r2, #0
 8004286:	4618      	mov	r0, r3
 8004288:	4611      	mov	r1, r2
 800428a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
 8004294:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004298:	4642      	mov	r2, r8
 800429a:	464b      	mov	r3, r9
 800429c:	f04f 0000 	mov.w	r0, #0
 80042a0:	f04f 0100 	mov.w	r1, #0
 80042a4:	0159      	lsls	r1, r3, #5
 80042a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042aa:	0150      	lsls	r0, r2, #5
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4641      	mov	r1, r8
 80042b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042b6:	4649      	mov	r1, r9
 80042b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042d0:	ebb2 040a 	subs.w	r4, r2, sl
 80042d4:	eb63 050b 	sbc.w	r5, r3, fp
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	00eb      	lsls	r3, r5, #3
 80042e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e6:	00e2      	lsls	r2, r4, #3
 80042e8:	4614      	mov	r4, r2
 80042ea:	461d      	mov	r5, r3
 80042ec:	4643      	mov	r3, r8
 80042ee:	18e3      	adds	r3, r4, r3
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	464b      	mov	r3, r9
 80042f4:	eb45 0303 	adc.w	r3, r5, r3
 80042f8:	607b      	str	r3, [r7, #4]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004306:	4629      	mov	r1, r5
 8004308:	028b      	lsls	r3, r1, #10
 800430a:	4621      	mov	r1, r4
 800430c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004310:	4621      	mov	r1, r4
 8004312:	028a      	lsls	r2, r1, #10
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431a:	2200      	movs	r2, #0
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	61fa      	str	r2, [r7, #28]
 8004320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004324:	f7fc fc40 	bl	8000ba8 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4613      	mov	r3, r2
 800432e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	3301      	adds	r3, #1
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800434a:	e002      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_RCC_GetSysClockFreq+0x204>)
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004354:	4618      	mov	r0, r3
 8004356:	3750      	adds	r7, #80	; 0x50
 8004358:	46bd      	mov	sp, r7
 800435a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800
 8004364:	00f42400 	.word	0x00f42400
 8004368:	007a1200 	.word	0x007a1200

0800436c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_RCC_GetHCLKFreq+0x14>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000000 	.word	0x20000000

08004384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004388:	f7ff fff0 	bl	800436c <HAL_RCC_GetHCLKFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	0a9b      	lsrs	r3, r3, #10
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	4903      	ldr	r1, [pc, #12]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40023800 	.word	0x40023800
 80043a8:	08008250 	.word	0x08008250

080043ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e041      	b.n	8004442 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd f9ac 	bl	8001730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f000 fcd4 	bl	8004d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	d001      	beq.n	8004464 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e046      	b.n	80044f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a23      	ldr	r2, [pc, #140]	; (8004500 <HAL_TIM_Base_Start+0xb4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d022      	beq.n	80044bc <HAL_TIM_Base_Start+0x70>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447e:	d01d      	beq.n	80044bc <HAL_TIM_Base_Start+0x70>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <HAL_TIM_Base_Start+0xb8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d018      	beq.n	80044bc <HAL_TIM_Base_Start+0x70>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <HAL_TIM_Base_Start+0xbc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <HAL_TIM_Base_Start+0x70>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_TIM_Base_Start+0xc0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00e      	beq.n	80044bc <HAL_TIM_Base_Start+0x70>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <HAL_TIM_Base_Start+0xc4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_TIM_Base_Start+0x70>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a19      	ldr	r2, [pc, #100]	; (8004514 <HAL_TIM_Base_Start+0xc8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_TIM_Base_Start+0x70>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a18      	ldr	r2, [pc, #96]	; (8004518 <HAL_TIM_Base_Start+0xcc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d111      	bne.n	80044e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b06      	cmp	r3, #6
 80044cc:	d010      	beq.n	80044f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044de:	e007      	b.n	80044f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40010000 	.word	0x40010000
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40010400 	.word	0x40010400
 8004514:	40014000 	.word	0x40014000
 8004518:	40001800 	.word	0x40001800

0800451c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d001      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e04e      	b.n	80045d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d022      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d01d      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d018      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d013      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <HAL_TIM_Base_Start_IT+0xd0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00e      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d009      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_TIM_Base_Start_IT+0x80>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d111      	bne.n	80045c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b06      	cmp	r3, #6
 80045ac:	d010      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0201 	orr.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045be:	e007      	b.n	80045d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40010400 	.word	0x40010400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40001800 	.word	0x40001800

080045fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e041      	b.n	8004692 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f839 	bl	800469a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f000 fbac 	bl	8004d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <HAL_TIM_PWM_Start+0x24>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e022      	b.n	800471a <HAL_TIM_PWM_Start+0x6a>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d109      	bne.n	80046ee <HAL_TIM_PWM_Start+0x3e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	bf14      	ite	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	2300      	moveq	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	e015      	b.n	800471a <HAL_TIM_PWM_Start+0x6a>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d109      	bne.n	8004708 <HAL_TIM_PWM_Start+0x58>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e008      	b.n	800471a <HAL_TIM_PWM_Start+0x6a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b01      	cmp	r3, #1
 8004712:	bf14      	ite	ne
 8004714:	2301      	movne	r3, #1
 8004716:	2300      	moveq	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e07c      	b.n	800481c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d104      	bne.n	8004732 <HAL_TIM_PWM_Start+0x82>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004730:	e013      	b.n	800475a <HAL_TIM_PWM_Start+0xaa>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d104      	bne.n	8004742 <HAL_TIM_PWM_Start+0x92>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004740:	e00b      	b.n	800475a <HAL_TIM_PWM_Start+0xaa>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b08      	cmp	r3, #8
 8004746:	d104      	bne.n	8004752 <HAL_TIM_PWM_Start+0xa2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004750:	e003      	b.n	800475a <HAL_TIM_PWM_Start+0xaa>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2202      	movs	r2, #2
 8004756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2201      	movs	r2, #1
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fe0e 	bl	8005384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a2d      	ldr	r2, [pc, #180]	; (8004824 <HAL_TIM_PWM_Start+0x174>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_TIM_PWM_Start+0xcc>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <HAL_TIM_PWM_Start+0x178>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_TIM_PWM_Start+0xd0>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_TIM_PWM_Start+0xd2>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004794:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a22      	ldr	r2, [pc, #136]	; (8004824 <HAL_TIM_PWM_Start+0x174>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d022      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d01d      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1f      	ldr	r2, [pc, #124]	; (800482c <HAL_TIM_PWM_Start+0x17c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d018      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <HAL_TIM_PWM_Start+0x180>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <HAL_TIM_PWM_Start+0x184>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a16      	ldr	r2, [pc, #88]	; (8004828 <HAL_TIM_PWM_Start+0x178>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_TIM_PWM_Start+0x188>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x136>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a16      	ldr	r2, [pc, #88]	; (800483c <HAL_TIM_PWM_Start+0x18c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d111      	bne.n	800480a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b06      	cmp	r3, #6
 80047f6:	d010      	beq.n	800481a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004808:	e007      	b.n	800481a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40010000 	.word	0x40010000
 8004828:	40010400 	.word	0x40010400
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40014000 	.word	0x40014000
 800483c:	40001800 	.word	0x40001800

08004840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d020      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0202 	mvn.w	r2, #2
 8004874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa65 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fa57 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fa68 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d020      	beq.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01b      	beq.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0204 	mvn.w	r2, #4
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fa3f 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fa31 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fa42 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d020      	beq.n	800493c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01b      	beq.n	800493c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0208 	mvn.w	r2, #8
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2204      	movs	r2, #4
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa19 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa0b 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa1c 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b00      	cmp	r3, #0
 8004944:	d020      	beq.n	8004988 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01b      	beq.n	8004988 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0210 	mvn.w	r2, #16
 8004958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2208      	movs	r2, #8
 800495e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f9f3 	bl	8004d5a <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9e5 	bl	8004d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f9f6 	bl	8004d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00c      	beq.n	80049ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0201 	mvn.w	r2, #1
 80049a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9c3 	bl	8004d32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00c      	beq.n	80049d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fd86 	bl	80054dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00c      	beq.n	80049f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f9c7 	bl	8004d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0220 	mvn.w	r2, #32
 8004a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fd58 	bl	80054c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0ae      	b.n	8004b9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	f200 809f 	bhi.w	8004b8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004a89 	.word	0x08004a89
 8004a58:	08004b8d 	.word	0x08004b8d
 8004a5c:	08004b8d 	.word	0x08004b8d
 8004a60:	08004b8d 	.word	0x08004b8d
 8004a64:	08004ac9 	.word	0x08004ac9
 8004a68:	08004b8d 	.word	0x08004b8d
 8004a6c:	08004b8d 	.word	0x08004b8d
 8004a70:	08004b8d 	.word	0x08004b8d
 8004a74:	08004b0b 	.word	0x08004b0b
 8004a78:	08004b8d 	.word	0x08004b8d
 8004a7c:	08004b8d 	.word	0x08004b8d
 8004a80:	08004b8d 	.word	0x08004b8d
 8004a84:	08004b4b 	.word	0x08004b4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fa2e 	bl	8004ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0208 	orr.w	r2, r2, #8
 8004aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6999      	ldr	r1, [r3, #24]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	619a      	str	r2, [r3, #24]
      break;
 8004ac6:	e064      	b.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fa7e 	bl	8004fd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	021a      	lsls	r2, r3, #8
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	619a      	str	r2, [r3, #24]
      break;
 8004b08:	e043      	b.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fad3 	bl	80050bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0208 	orr.w	r2, r2, #8
 8004b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0204 	bic.w	r2, r2, #4
 8004b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69d9      	ldr	r1, [r3, #28]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	61da      	str	r2, [r3, #28]
      break;
 8004b48:	e023      	b.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fb27 	bl	80051a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69d9      	ldr	r1, [r3, #28]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	021a      	lsls	r2, r3, #8
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	61da      	str	r2, [r3, #28]
      break;
 8004b8a:	e002      	b.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e0b4      	b.n	8004d2a <HAL_TIM_ConfigClockSource+0x186>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf8:	d03e      	beq.n	8004c78 <HAL_TIM_ConfigClockSource+0xd4>
 8004bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfe:	f200 8087 	bhi.w	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c06:	f000 8086 	beq.w	8004d16 <HAL_TIM_ConfigClockSource+0x172>
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0e:	d87f      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b70      	cmp	r3, #112	; 0x70
 8004c12:	d01a      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0xa6>
 8004c14:	2b70      	cmp	r3, #112	; 0x70
 8004c16:	d87b      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b60      	cmp	r3, #96	; 0x60
 8004c1a:	d050      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x11a>
 8004c1c:	2b60      	cmp	r3, #96	; 0x60
 8004c1e:	d877      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b50      	cmp	r3, #80	; 0x50
 8004c22:	d03c      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0xfa>
 8004c24:	2b50      	cmp	r3, #80	; 0x50
 8004c26:	d873      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d058      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x13a>
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d86f      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b30      	cmp	r3, #48	; 0x30
 8004c32:	d064      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c34:	2b30      	cmp	r3, #48	; 0x30
 8004c36:	d86b      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d060      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d867      	bhi.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d05c      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d05a      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x15a>
 8004c48:	e062      	b.n	8004d10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c5a:	f000 fb73 	bl	8005344 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	609a      	str	r2, [r3, #8]
      break;
 8004c76:	e04f      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c88:	f000 fb5c 	bl	8005344 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c9a:	609a      	str	r2, [r3, #8]
      break;
 8004c9c:	e03c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	461a      	mov	r2, r3
 8004cac:	f000 fad0 	bl	8005250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2150      	movs	r1, #80	; 0x50
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fb29 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8004cbc:	e02c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f000 faef 	bl	80052ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2160      	movs	r1, #96	; 0x60
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fb19 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8004cdc:	e01c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cea:	461a      	mov	r2, r3
 8004cec:	f000 fab0 	bl	8005250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2140      	movs	r1, #64	; 0x40
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fb09 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8004cfc:	e00c      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f000 fb00 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8004d0e:	e003      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      break;
 8004d14:	e000      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a46      	ldr	r2, [pc, #280]	; (8004ec4 <TIM_Base_SetConfig+0x12c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d013      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db6:	d00f      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a43      	ldr	r2, [pc, #268]	; (8004ec8 <TIM_Base_SetConfig+0x130>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a42      	ldr	r2, [pc, #264]	; (8004ecc <TIM_Base_SetConfig+0x134>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a41      	ldr	r2, [pc, #260]	; (8004ed0 <TIM_Base_SetConfig+0x138>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a40      	ldr	r2, [pc, #256]	; (8004ed4 <TIM_Base_SetConfig+0x13c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d108      	bne.n	8004dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a35      	ldr	r2, [pc, #212]	; (8004ec4 <TIM_Base_SetConfig+0x12c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d02b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d027      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a32      	ldr	r2, [pc, #200]	; (8004ec8 <TIM_Base_SetConfig+0x130>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d023      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a31      	ldr	r2, [pc, #196]	; (8004ecc <TIM_Base_SetConfig+0x134>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01f      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a30      	ldr	r2, [pc, #192]	; (8004ed0 <TIM_Base_SetConfig+0x138>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2f      	ldr	r2, [pc, #188]	; (8004ed4 <TIM_Base_SetConfig+0x13c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d017      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2e      	ldr	r2, [pc, #184]	; (8004ed8 <TIM_Base_SetConfig+0x140>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d013      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2d      	ldr	r2, [pc, #180]	; (8004edc <TIM_Base_SetConfig+0x144>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00f      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ee0 <TIM_Base_SetConfig+0x148>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2b      	ldr	r2, [pc, #172]	; (8004ee4 <TIM_Base_SetConfig+0x14c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <TIM_Base_SetConfig+0x150>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a29      	ldr	r2, [pc, #164]	; (8004eec <TIM_Base_SetConfig+0x154>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d108      	bne.n	8004e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a10      	ldr	r2, [pc, #64]	; (8004ec4 <TIM_Base_SetConfig+0x12c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0xf8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a12      	ldr	r2, [pc, #72]	; (8004ed4 <TIM_Base_SetConfig+0x13c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d103      	bne.n	8004e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d105      	bne.n	8004eb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f023 0201 	bic.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	611a      	str	r2, [r3, #16]
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800
 8004ee4:	40001800 	.word	0x40001800
 8004ee8:	40001c00 	.word	0x40001c00
 8004eec:	40002000 	.word	0x40002000

08004ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f023 0201 	bic.w	r2, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0303 	bic.w	r3, r3, #3
 8004f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f023 0302 	bic.w	r3, r3, #2
 8004f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a20      	ldr	r2, [pc, #128]	; (8004fc8 <TIM_OC1_SetConfig+0xd8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC1_SetConfig+0x64>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	; (8004fcc <TIM_OC1_SetConfig+0xdc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10c      	bne.n	8004f6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0308 	bic.w	r3, r3, #8
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f023 0304 	bic.w	r3, r3, #4
 8004f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a15      	ldr	r2, [pc, #84]	; (8004fc8 <TIM_OC1_SetConfig+0xd8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_OC1_SetConfig+0x8e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <TIM_OC1_SetConfig+0xdc>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d111      	bne.n	8004fa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40010000 	.word	0x40010000
 8004fcc:	40010400 	.word	0x40010400

08004fd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	f023 0210 	bic.w	r2, r3, #16
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0320 	bic.w	r3, r3, #32
 800501a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a22      	ldr	r2, [pc, #136]	; (80050b4 <TIM_OC2_SetConfig+0xe4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d003      	beq.n	8005038 <TIM_OC2_SetConfig+0x68>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a21      	ldr	r2, [pc, #132]	; (80050b8 <TIM_OC2_SetConfig+0xe8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10d      	bne.n	8005054 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005052:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <TIM_OC2_SetConfig+0xe4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_OC2_SetConfig+0x94>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a16      	ldr	r2, [pc, #88]	; (80050b8 <TIM_OC2_SetConfig+0xe8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d113      	bne.n	800508c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800506a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40010400 	.word	0x40010400

080050bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a21      	ldr	r2, [pc, #132]	; (800519c <TIM_OC3_SetConfig+0xe0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d003      	beq.n	8005122 <TIM_OC3_SetConfig+0x66>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a20      	ldr	r2, [pc, #128]	; (80051a0 <TIM_OC3_SetConfig+0xe4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d10d      	bne.n	800513e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800513c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a16      	ldr	r2, [pc, #88]	; (800519c <TIM_OC3_SetConfig+0xe0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_OC3_SetConfig+0x92>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a15      	ldr	r2, [pc, #84]	; (80051a0 <TIM_OC3_SetConfig+0xe4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d113      	bne.n	8005176 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800515c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	621a      	str	r2, [r3, #32]
}
 8005190:	bf00      	nop
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40010000 	.word	0x40010000
 80051a0:	40010400 	.word	0x40010400

080051a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	031b      	lsls	r3, r3, #12
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a12      	ldr	r2, [pc, #72]	; (8005248 <TIM_OC4_SetConfig+0xa4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_OC4_SetConfig+0x68>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a11      	ldr	r2, [pc, #68]	; (800524c <TIM_OC4_SetConfig+0xa8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d109      	bne.n	8005220 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	019b      	lsls	r3, r3, #6
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40010400 	.word	0x40010400

08005250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0201 	bic.w	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800527a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f023 030a 	bic.w	r3, r3, #10
 800528c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b087      	sub	sp, #28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f023 0210 	bic.w	r2, r3, #16
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	031b      	lsls	r3, r3, #12
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	f043 0307 	orr.w	r3, r3, #7
 8005330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	021a      	lsls	r2, r3, #8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	431a      	orrs	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4313      	orrs	r3, r2
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	609a      	str	r2, [r3, #8]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 031f 	and.w	r3, r3, #31
 8005396:	2201      	movs	r2, #1
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a1a      	ldr	r2, [r3, #32]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	43db      	mvns	r3, r3
 80053a6:	401a      	ands	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1a      	ldr	r2, [r3, #32]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	fa01 f303 	lsl.w	r3, r1, r3
 80053bc:	431a      	orrs	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e05a      	b.n	800549e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a21      	ldr	r2, [pc, #132]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d022      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005434:	d01d      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d018      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1a      	ldr	r2, [pc, #104]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00e      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a18      	ldr	r2, [pc, #96]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10c      	bne.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4313      	orrs	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40000c00 	.word	0x40000c00
 80054bc:	40010400 	.word	0x40010400
 80054c0:	40014000 	.word	0x40014000
 80054c4:	40001800 	.word	0x40001800

080054c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <__cvt>:
 80054f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054f4:	ec55 4b10 	vmov	r4, r5, d0
 80054f8:	2d00      	cmp	r5, #0
 80054fa:	460e      	mov	r6, r1
 80054fc:	4619      	mov	r1, r3
 80054fe:	462b      	mov	r3, r5
 8005500:	bfbb      	ittet	lt
 8005502:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005506:	461d      	movlt	r5, r3
 8005508:	2300      	movge	r3, #0
 800550a:	232d      	movlt	r3, #45	; 0x2d
 800550c:	700b      	strb	r3, [r1, #0]
 800550e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005510:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005514:	4691      	mov	r9, r2
 8005516:	f023 0820 	bic.w	r8, r3, #32
 800551a:	bfbc      	itt	lt
 800551c:	4622      	movlt	r2, r4
 800551e:	4614      	movlt	r4, r2
 8005520:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005524:	d005      	beq.n	8005532 <__cvt+0x42>
 8005526:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800552a:	d100      	bne.n	800552e <__cvt+0x3e>
 800552c:	3601      	adds	r6, #1
 800552e:	2102      	movs	r1, #2
 8005530:	e000      	b.n	8005534 <__cvt+0x44>
 8005532:	2103      	movs	r1, #3
 8005534:	ab03      	add	r3, sp, #12
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	ab02      	add	r3, sp, #8
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	ec45 4b10 	vmov	d0, r4, r5
 8005540:	4653      	mov	r3, sl
 8005542:	4632      	mov	r2, r6
 8005544:	f000 fe68 	bl	8006218 <_dtoa_r>
 8005548:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800554c:	4607      	mov	r7, r0
 800554e:	d102      	bne.n	8005556 <__cvt+0x66>
 8005550:	f019 0f01 	tst.w	r9, #1
 8005554:	d022      	beq.n	800559c <__cvt+0xac>
 8005556:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800555a:	eb07 0906 	add.w	r9, r7, r6
 800555e:	d110      	bne.n	8005582 <__cvt+0x92>
 8005560:	783b      	ldrb	r3, [r7, #0]
 8005562:	2b30      	cmp	r3, #48	; 0x30
 8005564:	d10a      	bne.n	800557c <__cvt+0x8c>
 8005566:	2200      	movs	r2, #0
 8005568:	2300      	movs	r3, #0
 800556a:	4620      	mov	r0, r4
 800556c:	4629      	mov	r1, r5
 800556e:	f7fb faab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005572:	b918      	cbnz	r0, 800557c <__cvt+0x8c>
 8005574:	f1c6 0601 	rsb	r6, r6, #1
 8005578:	f8ca 6000 	str.w	r6, [sl]
 800557c:	f8da 3000 	ldr.w	r3, [sl]
 8005580:	4499      	add	r9, r3
 8005582:	2200      	movs	r2, #0
 8005584:	2300      	movs	r3, #0
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	f7fb fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800558e:	b108      	cbz	r0, 8005594 <__cvt+0xa4>
 8005590:	f8cd 900c 	str.w	r9, [sp, #12]
 8005594:	2230      	movs	r2, #48	; 0x30
 8005596:	9b03      	ldr	r3, [sp, #12]
 8005598:	454b      	cmp	r3, r9
 800559a:	d307      	bcc.n	80055ac <__cvt+0xbc>
 800559c:	9b03      	ldr	r3, [sp, #12]
 800559e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055a0:	1bdb      	subs	r3, r3, r7
 80055a2:	4638      	mov	r0, r7
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	b004      	add	sp, #16
 80055a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ac:	1c59      	adds	r1, r3, #1
 80055ae:	9103      	str	r1, [sp, #12]
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	e7f0      	b.n	8005596 <__cvt+0xa6>

080055b4 <__exponent>:
 80055b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055b6:	4603      	mov	r3, r0
 80055b8:	2900      	cmp	r1, #0
 80055ba:	bfb8      	it	lt
 80055bc:	4249      	neglt	r1, r1
 80055be:	f803 2b02 	strb.w	r2, [r3], #2
 80055c2:	bfb4      	ite	lt
 80055c4:	222d      	movlt	r2, #45	; 0x2d
 80055c6:	222b      	movge	r2, #43	; 0x2b
 80055c8:	2909      	cmp	r1, #9
 80055ca:	7042      	strb	r2, [r0, #1]
 80055cc:	dd2a      	ble.n	8005624 <__exponent+0x70>
 80055ce:	f10d 0207 	add.w	r2, sp, #7
 80055d2:	4617      	mov	r7, r2
 80055d4:	260a      	movs	r6, #10
 80055d6:	4694      	mov	ip, r2
 80055d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80055dc:	fb06 1415 	mls	r4, r6, r5, r1
 80055e0:	3430      	adds	r4, #48	; 0x30
 80055e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80055e6:	460c      	mov	r4, r1
 80055e8:	2c63      	cmp	r4, #99	; 0x63
 80055ea:	f102 32ff 	add.w	r2, r2, #4294967295
 80055ee:	4629      	mov	r1, r5
 80055f0:	dcf1      	bgt.n	80055d6 <__exponent+0x22>
 80055f2:	3130      	adds	r1, #48	; 0x30
 80055f4:	f1ac 0402 	sub.w	r4, ip, #2
 80055f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80055fc:	1c41      	adds	r1, r0, #1
 80055fe:	4622      	mov	r2, r4
 8005600:	42ba      	cmp	r2, r7
 8005602:	d30a      	bcc.n	800561a <__exponent+0x66>
 8005604:	f10d 0209 	add.w	r2, sp, #9
 8005608:	eba2 020c 	sub.w	r2, r2, ip
 800560c:	42bc      	cmp	r4, r7
 800560e:	bf88      	it	hi
 8005610:	2200      	movhi	r2, #0
 8005612:	4413      	add	r3, r2
 8005614:	1a18      	subs	r0, r3, r0
 8005616:	b003      	add	sp, #12
 8005618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800561e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005622:	e7ed      	b.n	8005600 <__exponent+0x4c>
 8005624:	2330      	movs	r3, #48	; 0x30
 8005626:	3130      	adds	r1, #48	; 0x30
 8005628:	7083      	strb	r3, [r0, #2]
 800562a:	70c1      	strb	r1, [r0, #3]
 800562c:	1d03      	adds	r3, r0, #4
 800562e:	e7f1      	b.n	8005614 <__exponent+0x60>

08005630 <_printf_float>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	ed2d 8b02 	vpush	{d8}
 8005638:	b08d      	sub	sp, #52	; 0x34
 800563a:	460c      	mov	r4, r1
 800563c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005640:	4616      	mov	r6, r2
 8005642:	461f      	mov	r7, r3
 8005644:	4605      	mov	r5, r0
 8005646:	f000 fce7 	bl	8006018 <_localeconv_r>
 800564a:	f8d0 a000 	ldr.w	sl, [r0]
 800564e:	4650      	mov	r0, sl
 8005650:	f7fa fe0e 	bl	8000270 <strlen>
 8005654:	2300      	movs	r3, #0
 8005656:	930a      	str	r3, [sp, #40]	; 0x28
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	9305      	str	r3, [sp, #20]
 800565c:	f8d8 3000 	ldr.w	r3, [r8]
 8005660:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005664:	3307      	adds	r3, #7
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	f103 0208 	add.w	r2, r3, #8
 800566e:	f8c8 2000 	str.w	r2, [r8]
 8005672:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800567a:	9307      	str	r3, [sp, #28]
 800567c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005680:	ee08 0a10 	vmov	s16, r0
 8005684:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800568c:	4b9e      	ldr	r3, [pc, #632]	; (8005908 <_printf_float+0x2d8>)
 800568e:	f04f 32ff 	mov.w	r2, #4294967295
 8005692:	f7fb fa4b 	bl	8000b2c <__aeabi_dcmpun>
 8005696:	bb88      	cbnz	r0, 80056fc <_printf_float+0xcc>
 8005698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800569c:	4b9a      	ldr	r3, [pc, #616]	; (8005908 <_printf_float+0x2d8>)
 800569e:	f04f 32ff 	mov.w	r2, #4294967295
 80056a2:	f7fb fa25 	bl	8000af0 <__aeabi_dcmple>
 80056a6:	bb48      	cbnz	r0, 80056fc <_printf_float+0xcc>
 80056a8:	2200      	movs	r2, #0
 80056aa:	2300      	movs	r3, #0
 80056ac:	4640      	mov	r0, r8
 80056ae:	4649      	mov	r1, r9
 80056b0:	f7fb fa14 	bl	8000adc <__aeabi_dcmplt>
 80056b4:	b110      	cbz	r0, 80056bc <_printf_float+0x8c>
 80056b6:	232d      	movs	r3, #45	; 0x2d
 80056b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056bc:	4a93      	ldr	r2, [pc, #588]	; (800590c <_printf_float+0x2dc>)
 80056be:	4b94      	ldr	r3, [pc, #592]	; (8005910 <_printf_float+0x2e0>)
 80056c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80056c4:	bf94      	ite	ls
 80056c6:	4690      	movls	r8, r2
 80056c8:	4698      	movhi	r8, r3
 80056ca:	2303      	movs	r3, #3
 80056cc:	6123      	str	r3, [r4, #16]
 80056ce:	9b05      	ldr	r3, [sp, #20]
 80056d0:	f023 0304 	bic.w	r3, r3, #4
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	f04f 0900 	mov.w	r9, #0
 80056da:	9700      	str	r7, [sp, #0]
 80056dc:	4633      	mov	r3, r6
 80056de:	aa0b      	add	r2, sp, #44	; 0x2c
 80056e0:	4621      	mov	r1, r4
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f9da 	bl	8005a9c <_printf_common>
 80056e8:	3001      	adds	r0, #1
 80056ea:	f040 8090 	bne.w	800580e <_printf_float+0x1de>
 80056ee:	f04f 30ff 	mov.w	r0, #4294967295
 80056f2:	b00d      	add	sp, #52	; 0x34
 80056f4:	ecbd 8b02 	vpop	{d8}
 80056f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fc:	4642      	mov	r2, r8
 80056fe:	464b      	mov	r3, r9
 8005700:	4640      	mov	r0, r8
 8005702:	4649      	mov	r1, r9
 8005704:	f7fb fa12 	bl	8000b2c <__aeabi_dcmpun>
 8005708:	b140      	cbz	r0, 800571c <_printf_float+0xec>
 800570a:	464b      	mov	r3, r9
 800570c:	2b00      	cmp	r3, #0
 800570e:	bfbc      	itt	lt
 8005710:	232d      	movlt	r3, #45	; 0x2d
 8005712:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005716:	4a7f      	ldr	r2, [pc, #508]	; (8005914 <_printf_float+0x2e4>)
 8005718:	4b7f      	ldr	r3, [pc, #508]	; (8005918 <_printf_float+0x2e8>)
 800571a:	e7d1      	b.n	80056c0 <_printf_float+0x90>
 800571c:	6863      	ldr	r3, [r4, #4]
 800571e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005722:	9206      	str	r2, [sp, #24]
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	d13f      	bne.n	80057a8 <_printf_float+0x178>
 8005728:	2306      	movs	r3, #6
 800572a:	6063      	str	r3, [r4, #4]
 800572c:	9b05      	ldr	r3, [sp, #20]
 800572e:	6861      	ldr	r1, [r4, #4]
 8005730:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005734:	2300      	movs	r3, #0
 8005736:	9303      	str	r3, [sp, #12]
 8005738:	ab0a      	add	r3, sp, #40	; 0x28
 800573a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800573e:	ab09      	add	r3, sp, #36	; 0x24
 8005740:	ec49 8b10 	vmov	d0, r8, r9
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	6022      	str	r2, [r4, #0]
 8005748:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800574c:	4628      	mov	r0, r5
 800574e:	f7ff fecf 	bl	80054f0 <__cvt>
 8005752:	9b06      	ldr	r3, [sp, #24]
 8005754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005756:	2b47      	cmp	r3, #71	; 0x47
 8005758:	4680      	mov	r8, r0
 800575a:	d108      	bne.n	800576e <_printf_float+0x13e>
 800575c:	1cc8      	adds	r0, r1, #3
 800575e:	db02      	blt.n	8005766 <_printf_float+0x136>
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	4299      	cmp	r1, r3
 8005764:	dd41      	ble.n	80057ea <_printf_float+0x1ba>
 8005766:	f1ab 0302 	sub.w	r3, fp, #2
 800576a:	fa5f fb83 	uxtb.w	fp, r3
 800576e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005772:	d820      	bhi.n	80057b6 <_printf_float+0x186>
 8005774:	3901      	subs	r1, #1
 8005776:	465a      	mov	r2, fp
 8005778:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800577c:	9109      	str	r1, [sp, #36]	; 0x24
 800577e:	f7ff ff19 	bl	80055b4 <__exponent>
 8005782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005784:	1813      	adds	r3, r2, r0
 8005786:	2a01      	cmp	r2, #1
 8005788:	4681      	mov	r9, r0
 800578a:	6123      	str	r3, [r4, #16]
 800578c:	dc02      	bgt.n	8005794 <_printf_float+0x164>
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	07d2      	lsls	r2, r2, #31
 8005792:	d501      	bpl.n	8005798 <_printf_float+0x168>
 8005794:	3301      	adds	r3, #1
 8005796:	6123      	str	r3, [r4, #16]
 8005798:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800579c:	2b00      	cmp	r3, #0
 800579e:	d09c      	beq.n	80056da <_printf_float+0xaa>
 80057a0:	232d      	movs	r3, #45	; 0x2d
 80057a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057a6:	e798      	b.n	80056da <_printf_float+0xaa>
 80057a8:	9a06      	ldr	r2, [sp, #24]
 80057aa:	2a47      	cmp	r2, #71	; 0x47
 80057ac:	d1be      	bne.n	800572c <_printf_float+0xfc>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1bc      	bne.n	800572c <_printf_float+0xfc>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e7b9      	b.n	800572a <_printf_float+0xfa>
 80057b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80057ba:	d118      	bne.n	80057ee <_printf_float+0x1be>
 80057bc:	2900      	cmp	r1, #0
 80057be:	6863      	ldr	r3, [r4, #4]
 80057c0:	dd0b      	ble.n	80057da <_printf_float+0x1aa>
 80057c2:	6121      	str	r1, [r4, #16]
 80057c4:	b913      	cbnz	r3, 80057cc <_printf_float+0x19c>
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	07d0      	lsls	r0, r2, #31
 80057ca:	d502      	bpl.n	80057d2 <_printf_float+0x1a2>
 80057cc:	3301      	adds	r3, #1
 80057ce:	440b      	add	r3, r1
 80057d0:	6123      	str	r3, [r4, #16]
 80057d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80057d4:	f04f 0900 	mov.w	r9, #0
 80057d8:	e7de      	b.n	8005798 <_printf_float+0x168>
 80057da:	b913      	cbnz	r3, 80057e2 <_printf_float+0x1b2>
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	07d2      	lsls	r2, r2, #31
 80057e0:	d501      	bpl.n	80057e6 <_printf_float+0x1b6>
 80057e2:	3302      	adds	r3, #2
 80057e4:	e7f4      	b.n	80057d0 <_printf_float+0x1a0>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e7f2      	b.n	80057d0 <_printf_float+0x1a0>
 80057ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80057ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f0:	4299      	cmp	r1, r3
 80057f2:	db05      	blt.n	8005800 <_printf_float+0x1d0>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	6121      	str	r1, [r4, #16]
 80057f8:	07d8      	lsls	r0, r3, #31
 80057fa:	d5ea      	bpl.n	80057d2 <_printf_float+0x1a2>
 80057fc:	1c4b      	adds	r3, r1, #1
 80057fe:	e7e7      	b.n	80057d0 <_printf_float+0x1a0>
 8005800:	2900      	cmp	r1, #0
 8005802:	bfd4      	ite	le
 8005804:	f1c1 0202 	rsble	r2, r1, #2
 8005808:	2201      	movgt	r2, #1
 800580a:	4413      	add	r3, r2
 800580c:	e7e0      	b.n	80057d0 <_printf_float+0x1a0>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	055a      	lsls	r2, r3, #21
 8005812:	d407      	bmi.n	8005824 <_printf_float+0x1f4>
 8005814:	6923      	ldr	r3, [r4, #16]
 8005816:	4642      	mov	r2, r8
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	47b8      	blx	r7
 800581e:	3001      	adds	r0, #1
 8005820:	d12c      	bne.n	800587c <_printf_float+0x24c>
 8005822:	e764      	b.n	80056ee <_printf_float+0xbe>
 8005824:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005828:	f240 80e0 	bls.w	80059ec <_printf_float+0x3bc>
 800582c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005830:	2200      	movs	r2, #0
 8005832:	2300      	movs	r3, #0
 8005834:	f7fb f948 	bl	8000ac8 <__aeabi_dcmpeq>
 8005838:	2800      	cmp	r0, #0
 800583a:	d034      	beq.n	80058a6 <_printf_float+0x276>
 800583c:	4a37      	ldr	r2, [pc, #220]	; (800591c <_printf_float+0x2ec>)
 800583e:	2301      	movs	r3, #1
 8005840:	4631      	mov	r1, r6
 8005842:	4628      	mov	r0, r5
 8005844:	47b8      	blx	r7
 8005846:	3001      	adds	r0, #1
 8005848:	f43f af51 	beq.w	80056ee <_printf_float+0xbe>
 800584c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005850:	429a      	cmp	r2, r3
 8005852:	db02      	blt.n	800585a <_printf_float+0x22a>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	07d8      	lsls	r0, r3, #31
 8005858:	d510      	bpl.n	800587c <_printf_float+0x24c>
 800585a:	ee18 3a10 	vmov	r3, s16
 800585e:	4652      	mov	r2, sl
 8005860:	4631      	mov	r1, r6
 8005862:	4628      	mov	r0, r5
 8005864:	47b8      	blx	r7
 8005866:	3001      	adds	r0, #1
 8005868:	f43f af41 	beq.w	80056ee <_printf_float+0xbe>
 800586c:	f04f 0800 	mov.w	r8, #0
 8005870:	f104 091a 	add.w	r9, r4, #26
 8005874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005876:	3b01      	subs	r3, #1
 8005878:	4543      	cmp	r3, r8
 800587a:	dc09      	bgt.n	8005890 <_printf_float+0x260>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	079b      	lsls	r3, r3, #30
 8005880:	f100 8107 	bmi.w	8005a92 <_printf_float+0x462>
 8005884:	68e0      	ldr	r0, [r4, #12]
 8005886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005888:	4298      	cmp	r0, r3
 800588a:	bfb8      	it	lt
 800588c:	4618      	movlt	r0, r3
 800588e:	e730      	b.n	80056f2 <_printf_float+0xc2>
 8005890:	2301      	movs	r3, #1
 8005892:	464a      	mov	r2, r9
 8005894:	4631      	mov	r1, r6
 8005896:	4628      	mov	r0, r5
 8005898:	47b8      	blx	r7
 800589a:	3001      	adds	r0, #1
 800589c:	f43f af27 	beq.w	80056ee <_printf_float+0xbe>
 80058a0:	f108 0801 	add.w	r8, r8, #1
 80058a4:	e7e6      	b.n	8005874 <_printf_float+0x244>
 80058a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	dc39      	bgt.n	8005920 <_printf_float+0x2f0>
 80058ac:	4a1b      	ldr	r2, [pc, #108]	; (800591c <_printf_float+0x2ec>)
 80058ae:	2301      	movs	r3, #1
 80058b0:	4631      	mov	r1, r6
 80058b2:	4628      	mov	r0, r5
 80058b4:	47b8      	blx	r7
 80058b6:	3001      	adds	r0, #1
 80058b8:	f43f af19 	beq.w	80056ee <_printf_float+0xbe>
 80058bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80058c0:	4313      	orrs	r3, r2
 80058c2:	d102      	bne.n	80058ca <_printf_float+0x29a>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	07d9      	lsls	r1, r3, #31
 80058c8:	d5d8      	bpl.n	800587c <_printf_float+0x24c>
 80058ca:	ee18 3a10 	vmov	r3, s16
 80058ce:	4652      	mov	r2, sl
 80058d0:	4631      	mov	r1, r6
 80058d2:	4628      	mov	r0, r5
 80058d4:	47b8      	blx	r7
 80058d6:	3001      	adds	r0, #1
 80058d8:	f43f af09 	beq.w	80056ee <_printf_float+0xbe>
 80058dc:	f04f 0900 	mov.w	r9, #0
 80058e0:	f104 0a1a 	add.w	sl, r4, #26
 80058e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e6:	425b      	negs	r3, r3
 80058e8:	454b      	cmp	r3, r9
 80058ea:	dc01      	bgt.n	80058f0 <_printf_float+0x2c0>
 80058ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ee:	e792      	b.n	8005816 <_printf_float+0x1e6>
 80058f0:	2301      	movs	r3, #1
 80058f2:	4652      	mov	r2, sl
 80058f4:	4631      	mov	r1, r6
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b8      	blx	r7
 80058fa:	3001      	adds	r0, #1
 80058fc:	f43f aef7 	beq.w	80056ee <_printf_float+0xbe>
 8005900:	f109 0901 	add.w	r9, r9, #1
 8005904:	e7ee      	b.n	80058e4 <_printf_float+0x2b4>
 8005906:	bf00      	nop
 8005908:	7fefffff 	.word	0x7fefffff
 800590c:	08008260 	.word	0x08008260
 8005910:	08008264 	.word	0x08008264
 8005914:	08008268 	.word	0x08008268
 8005918:	0800826c 	.word	0x0800826c
 800591c:	08008270 	.word	0x08008270
 8005920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005924:	429a      	cmp	r2, r3
 8005926:	bfa8      	it	ge
 8005928:	461a      	movge	r2, r3
 800592a:	2a00      	cmp	r2, #0
 800592c:	4691      	mov	r9, r2
 800592e:	dc37      	bgt.n	80059a0 <_printf_float+0x370>
 8005930:	f04f 0b00 	mov.w	fp, #0
 8005934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005938:	f104 021a 	add.w	r2, r4, #26
 800593c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800593e:	9305      	str	r3, [sp, #20]
 8005940:	eba3 0309 	sub.w	r3, r3, r9
 8005944:	455b      	cmp	r3, fp
 8005946:	dc33      	bgt.n	80059b0 <_printf_float+0x380>
 8005948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800594c:	429a      	cmp	r2, r3
 800594e:	db3b      	blt.n	80059c8 <_printf_float+0x398>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	07da      	lsls	r2, r3, #31
 8005954:	d438      	bmi.n	80059c8 <_printf_float+0x398>
 8005956:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800595a:	eba2 0903 	sub.w	r9, r2, r3
 800595e:	9b05      	ldr	r3, [sp, #20]
 8005960:	1ad2      	subs	r2, r2, r3
 8005962:	4591      	cmp	r9, r2
 8005964:	bfa8      	it	ge
 8005966:	4691      	movge	r9, r2
 8005968:	f1b9 0f00 	cmp.w	r9, #0
 800596c:	dc35      	bgt.n	80059da <_printf_float+0x3aa>
 800596e:	f04f 0800 	mov.w	r8, #0
 8005972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005976:	f104 0a1a 	add.w	sl, r4, #26
 800597a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	eba3 0309 	sub.w	r3, r3, r9
 8005984:	4543      	cmp	r3, r8
 8005986:	f77f af79 	ble.w	800587c <_printf_float+0x24c>
 800598a:	2301      	movs	r3, #1
 800598c:	4652      	mov	r2, sl
 800598e:	4631      	mov	r1, r6
 8005990:	4628      	mov	r0, r5
 8005992:	47b8      	blx	r7
 8005994:	3001      	adds	r0, #1
 8005996:	f43f aeaa 	beq.w	80056ee <_printf_float+0xbe>
 800599a:	f108 0801 	add.w	r8, r8, #1
 800599e:	e7ec      	b.n	800597a <_printf_float+0x34a>
 80059a0:	4613      	mov	r3, r2
 80059a2:	4631      	mov	r1, r6
 80059a4:	4642      	mov	r2, r8
 80059a6:	4628      	mov	r0, r5
 80059a8:	47b8      	blx	r7
 80059aa:	3001      	adds	r0, #1
 80059ac:	d1c0      	bne.n	8005930 <_printf_float+0x300>
 80059ae:	e69e      	b.n	80056ee <_printf_float+0xbe>
 80059b0:	2301      	movs	r3, #1
 80059b2:	4631      	mov	r1, r6
 80059b4:	4628      	mov	r0, r5
 80059b6:	9205      	str	r2, [sp, #20]
 80059b8:	47b8      	blx	r7
 80059ba:	3001      	adds	r0, #1
 80059bc:	f43f ae97 	beq.w	80056ee <_printf_float+0xbe>
 80059c0:	9a05      	ldr	r2, [sp, #20]
 80059c2:	f10b 0b01 	add.w	fp, fp, #1
 80059c6:	e7b9      	b.n	800593c <_printf_float+0x30c>
 80059c8:	ee18 3a10 	vmov	r3, s16
 80059cc:	4652      	mov	r2, sl
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	d1be      	bne.n	8005956 <_printf_float+0x326>
 80059d8:	e689      	b.n	80056ee <_printf_float+0xbe>
 80059da:	9a05      	ldr	r2, [sp, #20]
 80059dc:	464b      	mov	r3, r9
 80059de:	4442      	add	r2, r8
 80059e0:	4631      	mov	r1, r6
 80059e2:	4628      	mov	r0, r5
 80059e4:	47b8      	blx	r7
 80059e6:	3001      	adds	r0, #1
 80059e8:	d1c1      	bne.n	800596e <_printf_float+0x33e>
 80059ea:	e680      	b.n	80056ee <_printf_float+0xbe>
 80059ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ee:	2a01      	cmp	r2, #1
 80059f0:	dc01      	bgt.n	80059f6 <_printf_float+0x3c6>
 80059f2:	07db      	lsls	r3, r3, #31
 80059f4:	d53a      	bpl.n	8005a6c <_printf_float+0x43c>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4642      	mov	r2, r8
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b8      	blx	r7
 8005a00:	3001      	adds	r0, #1
 8005a02:	f43f ae74 	beq.w	80056ee <_printf_float+0xbe>
 8005a06:	ee18 3a10 	vmov	r3, s16
 8005a0a:	4652      	mov	r2, sl
 8005a0c:	4631      	mov	r1, r6
 8005a0e:	4628      	mov	r0, r5
 8005a10:	47b8      	blx	r7
 8005a12:	3001      	adds	r0, #1
 8005a14:	f43f ae6b 	beq.w	80056ee <_printf_float+0xbe>
 8005a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005a24:	f7fb f850 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a28:	b9d8      	cbnz	r0, 8005a62 <_printf_float+0x432>
 8005a2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005a2e:	f108 0201 	add.w	r2, r8, #1
 8005a32:	4631      	mov	r1, r6
 8005a34:	4628      	mov	r0, r5
 8005a36:	47b8      	blx	r7
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d10e      	bne.n	8005a5a <_printf_float+0x42a>
 8005a3c:	e657      	b.n	80056ee <_printf_float+0xbe>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4652      	mov	r2, sl
 8005a42:	4631      	mov	r1, r6
 8005a44:	4628      	mov	r0, r5
 8005a46:	47b8      	blx	r7
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f43f ae50 	beq.w	80056ee <_printf_float+0xbe>
 8005a4e:	f108 0801 	add.w	r8, r8, #1
 8005a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a54:	3b01      	subs	r3, #1
 8005a56:	4543      	cmp	r3, r8
 8005a58:	dcf1      	bgt.n	8005a3e <_printf_float+0x40e>
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a60:	e6da      	b.n	8005818 <_printf_float+0x1e8>
 8005a62:	f04f 0800 	mov.w	r8, #0
 8005a66:	f104 0a1a 	add.w	sl, r4, #26
 8005a6a:	e7f2      	b.n	8005a52 <_printf_float+0x422>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	4642      	mov	r2, r8
 8005a70:	e7df      	b.n	8005a32 <_printf_float+0x402>
 8005a72:	2301      	movs	r3, #1
 8005a74:	464a      	mov	r2, r9
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	47b8      	blx	r7
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	f43f ae36 	beq.w	80056ee <_printf_float+0xbe>
 8005a82:	f108 0801 	add.w	r8, r8, #1
 8005a86:	68e3      	ldr	r3, [r4, #12]
 8005a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a8a:	1a5b      	subs	r3, r3, r1
 8005a8c:	4543      	cmp	r3, r8
 8005a8e:	dcf0      	bgt.n	8005a72 <_printf_float+0x442>
 8005a90:	e6f8      	b.n	8005884 <_printf_float+0x254>
 8005a92:	f04f 0800 	mov.w	r8, #0
 8005a96:	f104 0919 	add.w	r9, r4, #25
 8005a9a:	e7f4      	b.n	8005a86 <_printf_float+0x456>

08005a9c <_printf_common>:
 8005a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	4699      	mov	r9, r3
 8005aa4:	688a      	ldr	r2, [r1, #8]
 8005aa6:	690b      	ldr	r3, [r1, #16]
 8005aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aac:	4293      	cmp	r3, r2
 8005aae:	bfb8      	it	lt
 8005ab0:	4613      	movlt	r3, r2
 8005ab2:	6033      	str	r3, [r6, #0]
 8005ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ab8:	4607      	mov	r7, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	b10a      	cbz	r2, 8005ac2 <_printf_common+0x26>
 8005abe:	3301      	adds	r3, #1
 8005ac0:	6033      	str	r3, [r6, #0]
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	0699      	lsls	r1, r3, #26
 8005ac6:	bf42      	ittt	mi
 8005ac8:	6833      	ldrmi	r3, [r6, #0]
 8005aca:	3302      	addmi	r3, #2
 8005acc:	6033      	strmi	r3, [r6, #0]
 8005ace:	6825      	ldr	r5, [r4, #0]
 8005ad0:	f015 0506 	ands.w	r5, r5, #6
 8005ad4:	d106      	bne.n	8005ae4 <_printf_common+0x48>
 8005ad6:	f104 0a19 	add.w	sl, r4, #25
 8005ada:	68e3      	ldr	r3, [r4, #12]
 8005adc:	6832      	ldr	r2, [r6, #0]
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	dc26      	bgt.n	8005b32 <_printf_common+0x96>
 8005ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ae8:	1e13      	subs	r3, r2, #0
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	bf18      	it	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	0692      	lsls	r2, r2, #26
 8005af2:	d42b      	bmi.n	8005b4c <_printf_common+0xb0>
 8005af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af8:	4649      	mov	r1, r9
 8005afa:	4638      	mov	r0, r7
 8005afc:	47c0      	blx	r8
 8005afe:	3001      	adds	r0, #1
 8005b00:	d01e      	beq.n	8005b40 <_printf_common+0xa4>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	6922      	ldr	r2, [r4, #16]
 8005b06:	f003 0306 	and.w	r3, r3, #6
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	bf02      	ittt	eq
 8005b0e:	68e5      	ldreq	r5, [r4, #12]
 8005b10:	6833      	ldreq	r3, [r6, #0]
 8005b12:	1aed      	subeq	r5, r5, r3
 8005b14:	68a3      	ldr	r3, [r4, #8]
 8005b16:	bf0c      	ite	eq
 8005b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b1c:	2500      	movne	r5, #0
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	bfc4      	itt	gt
 8005b22:	1a9b      	subgt	r3, r3, r2
 8005b24:	18ed      	addgt	r5, r5, r3
 8005b26:	2600      	movs	r6, #0
 8005b28:	341a      	adds	r4, #26
 8005b2a:	42b5      	cmp	r5, r6
 8005b2c:	d11a      	bne.n	8005b64 <_printf_common+0xc8>
 8005b2e:	2000      	movs	r0, #0
 8005b30:	e008      	b.n	8005b44 <_printf_common+0xa8>
 8005b32:	2301      	movs	r3, #1
 8005b34:	4652      	mov	r2, sl
 8005b36:	4649      	mov	r1, r9
 8005b38:	4638      	mov	r0, r7
 8005b3a:	47c0      	blx	r8
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d103      	bne.n	8005b48 <_printf_common+0xac>
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295
 8005b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b48:	3501      	adds	r5, #1
 8005b4a:	e7c6      	b.n	8005ada <_printf_common+0x3e>
 8005b4c:	18e1      	adds	r1, r4, r3
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	2030      	movs	r0, #48	; 0x30
 8005b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b56:	4422      	add	r2, r4
 8005b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b60:	3302      	adds	r3, #2
 8005b62:	e7c7      	b.n	8005af4 <_printf_common+0x58>
 8005b64:	2301      	movs	r3, #1
 8005b66:	4622      	mov	r2, r4
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	47c0      	blx	r8
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d0e6      	beq.n	8005b40 <_printf_common+0xa4>
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7d9      	b.n	8005b2a <_printf_common+0x8e>
	...

08005b78 <_printf_i>:
 8005b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	7e0f      	ldrb	r7, [r1, #24]
 8005b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b80:	2f78      	cmp	r7, #120	; 0x78
 8005b82:	4691      	mov	r9, r2
 8005b84:	4680      	mov	r8, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	469a      	mov	sl, r3
 8005b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b8e:	d807      	bhi.n	8005ba0 <_printf_i+0x28>
 8005b90:	2f62      	cmp	r7, #98	; 0x62
 8005b92:	d80a      	bhi.n	8005baa <_printf_i+0x32>
 8005b94:	2f00      	cmp	r7, #0
 8005b96:	f000 80d4 	beq.w	8005d42 <_printf_i+0x1ca>
 8005b9a:	2f58      	cmp	r7, #88	; 0x58
 8005b9c:	f000 80c0 	beq.w	8005d20 <_printf_i+0x1a8>
 8005ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ba8:	e03a      	b.n	8005c20 <_printf_i+0xa8>
 8005baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bae:	2b15      	cmp	r3, #21
 8005bb0:	d8f6      	bhi.n	8005ba0 <_printf_i+0x28>
 8005bb2:	a101      	add	r1, pc, #4	; (adr r1, 8005bb8 <_printf_i+0x40>)
 8005bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb8:	08005c11 	.word	0x08005c11
 8005bbc:	08005c25 	.word	0x08005c25
 8005bc0:	08005ba1 	.word	0x08005ba1
 8005bc4:	08005ba1 	.word	0x08005ba1
 8005bc8:	08005ba1 	.word	0x08005ba1
 8005bcc:	08005ba1 	.word	0x08005ba1
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005ba1 	.word	0x08005ba1
 8005bd8:	08005ba1 	.word	0x08005ba1
 8005bdc:	08005ba1 	.word	0x08005ba1
 8005be0:	08005ba1 	.word	0x08005ba1
 8005be4:	08005d29 	.word	0x08005d29
 8005be8:	08005c51 	.word	0x08005c51
 8005bec:	08005ce3 	.word	0x08005ce3
 8005bf0:	08005ba1 	.word	0x08005ba1
 8005bf4:	08005ba1 	.word	0x08005ba1
 8005bf8:	08005d4b 	.word	0x08005d4b
 8005bfc:	08005ba1 	.word	0x08005ba1
 8005c00:	08005c51 	.word	0x08005c51
 8005c04:	08005ba1 	.word	0x08005ba1
 8005c08:	08005ba1 	.word	0x08005ba1
 8005c0c:	08005ceb 	.word	0x08005ceb
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	602a      	str	r2, [r5, #0]
 8005c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c20:	2301      	movs	r3, #1
 8005c22:	e09f      	b.n	8005d64 <_printf_i+0x1ec>
 8005c24:	6820      	ldr	r0, [r4, #0]
 8005c26:	682b      	ldr	r3, [r5, #0]
 8005c28:	0607      	lsls	r7, r0, #24
 8005c2a:	f103 0104 	add.w	r1, r3, #4
 8005c2e:	6029      	str	r1, [r5, #0]
 8005c30:	d501      	bpl.n	8005c36 <_printf_i+0xbe>
 8005c32:	681e      	ldr	r6, [r3, #0]
 8005c34:	e003      	b.n	8005c3e <_printf_i+0xc6>
 8005c36:	0646      	lsls	r6, r0, #25
 8005c38:	d5fb      	bpl.n	8005c32 <_printf_i+0xba>
 8005c3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	da03      	bge.n	8005c4a <_printf_i+0xd2>
 8005c42:	232d      	movs	r3, #45	; 0x2d
 8005c44:	4276      	negs	r6, r6
 8005c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c4a:	485a      	ldr	r0, [pc, #360]	; (8005db4 <_printf_i+0x23c>)
 8005c4c:	230a      	movs	r3, #10
 8005c4e:	e012      	b.n	8005c76 <_printf_i+0xfe>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	6820      	ldr	r0, [r4, #0]
 8005c54:	1d19      	adds	r1, r3, #4
 8005c56:	6029      	str	r1, [r5, #0]
 8005c58:	0605      	lsls	r5, r0, #24
 8005c5a:	d501      	bpl.n	8005c60 <_printf_i+0xe8>
 8005c5c:	681e      	ldr	r6, [r3, #0]
 8005c5e:	e002      	b.n	8005c66 <_printf_i+0xee>
 8005c60:	0641      	lsls	r1, r0, #25
 8005c62:	d5fb      	bpl.n	8005c5c <_printf_i+0xe4>
 8005c64:	881e      	ldrh	r6, [r3, #0]
 8005c66:	4853      	ldr	r0, [pc, #332]	; (8005db4 <_printf_i+0x23c>)
 8005c68:	2f6f      	cmp	r7, #111	; 0x6f
 8005c6a:	bf0c      	ite	eq
 8005c6c:	2308      	moveq	r3, #8
 8005c6e:	230a      	movne	r3, #10
 8005c70:	2100      	movs	r1, #0
 8005c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c76:	6865      	ldr	r5, [r4, #4]
 8005c78:	60a5      	str	r5, [r4, #8]
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	bfa2      	ittt	ge
 8005c7e:	6821      	ldrge	r1, [r4, #0]
 8005c80:	f021 0104 	bicge.w	r1, r1, #4
 8005c84:	6021      	strge	r1, [r4, #0]
 8005c86:	b90e      	cbnz	r6, 8005c8c <_printf_i+0x114>
 8005c88:	2d00      	cmp	r5, #0
 8005c8a:	d04b      	beq.n	8005d24 <_printf_i+0x1ac>
 8005c8c:	4615      	mov	r5, r2
 8005c8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c92:	fb03 6711 	mls	r7, r3, r1, r6
 8005c96:	5dc7      	ldrb	r7, [r0, r7]
 8005c98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c9c:	4637      	mov	r7, r6
 8005c9e:	42bb      	cmp	r3, r7
 8005ca0:	460e      	mov	r6, r1
 8005ca2:	d9f4      	bls.n	8005c8e <_printf_i+0x116>
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d10b      	bne.n	8005cc0 <_printf_i+0x148>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	07de      	lsls	r6, r3, #31
 8005cac:	d508      	bpl.n	8005cc0 <_printf_i+0x148>
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	6861      	ldr	r1, [r4, #4]
 8005cb2:	4299      	cmp	r1, r3
 8005cb4:	bfde      	ittt	le
 8005cb6:	2330      	movle	r3, #48	; 0x30
 8005cb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cc0:	1b52      	subs	r2, r2, r5
 8005cc2:	6122      	str	r2, [r4, #16]
 8005cc4:	f8cd a000 	str.w	sl, [sp]
 8005cc8:	464b      	mov	r3, r9
 8005cca:	aa03      	add	r2, sp, #12
 8005ccc:	4621      	mov	r1, r4
 8005cce:	4640      	mov	r0, r8
 8005cd0:	f7ff fee4 	bl	8005a9c <_printf_common>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d14a      	bne.n	8005d6e <_printf_i+0x1f6>
 8005cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cdc:	b004      	add	sp, #16
 8005cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	f043 0320 	orr.w	r3, r3, #32
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	4833      	ldr	r0, [pc, #204]	; (8005db8 <_printf_i+0x240>)
 8005cec:	2778      	movs	r7, #120	; 0x78
 8005cee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	6829      	ldr	r1, [r5, #0]
 8005cf6:	061f      	lsls	r7, r3, #24
 8005cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cfc:	d402      	bmi.n	8005d04 <_printf_i+0x18c>
 8005cfe:	065f      	lsls	r7, r3, #25
 8005d00:	bf48      	it	mi
 8005d02:	b2b6      	uxthmi	r6, r6
 8005d04:	07df      	lsls	r7, r3, #31
 8005d06:	bf48      	it	mi
 8005d08:	f043 0320 	orrmi.w	r3, r3, #32
 8005d0c:	6029      	str	r1, [r5, #0]
 8005d0e:	bf48      	it	mi
 8005d10:	6023      	strmi	r3, [r4, #0]
 8005d12:	b91e      	cbnz	r6, 8005d1c <_printf_i+0x1a4>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	f023 0320 	bic.w	r3, r3, #32
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	2310      	movs	r3, #16
 8005d1e:	e7a7      	b.n	8005c70 <_printf_i+0xf8>
 8005d20:	4824      	ldr	r0, [pc, #144]	; (8005db4 <_printf_i+0x23c>)
 8005d22:	e7e4      	b.n	8005cee <_printf_i+0x176>
 8005d24:	4615      	mov	r5, r2
 8005d26:	e7bd      	b.n	8005ca4 <_printf_i+0x12c>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	6826      	ldr	r6, [r4, #0]
 8005d2c:	6961      	ldr	r1, [r4, #20]
 8005d2e:	1d18      	adds	r0, r3, #4
 8005d30:	6028      	str	r0, [r5, #0]
 8005d32:	0635      	lsls	r5, r6, #24
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	d501      	bpl.n	8005d3c <_printf_i+0x1c4>
 8005d38:	6019      	str	r1, [r3, #0]
 8005d3a:	e002      	b.n	8005d42 <_printf_i+0x1ca>
 8005d3c:	0670      	lsls	r0, r6, #25
 8005d3e:	d5fb      	bpl.n	8005d38 <_printf_i+0x1c0>
 8005d40:	8019      	strh	r1, [r3, #0]
 8005d42:	2300      	movs	r3, #0
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	4615      	mov	r5, r2
 8005d48:	e7bc      	b.n	8005cc4 <_printf_i+0x14c>
 8005d4a:	682b      	ldr	r3, [r5, #0]
 8005d4c:	1d1a      	adds	r2, r3, #4
 8005d4e:	602a      	str	r2, [r5, #0]
 8005d50:	681d      	ldr	r5, [r3, #0]
 8005d52:	6862      	ldr	r2, [r4, #4]
 8005d54:	2100      	movs	r1, #0
 8005d56:	4628      	mov	r0, r5
 8005d58:	f7fa fa3a 	bl	80001d0 <memchr>
 8005d5c:	b108      	cbz	r0, 8005d62 <_printf_i+0x1ea>
 8005d5e:	1b40      	subs	r0, r0, r5
 8005d60:	6060      	str	r0, [r4, #4]
 8005d62:	6863      	ldr	r3, [r4, #4]
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	2300      	movs	r3, #0
 8005d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d6c:	e7aa      	b.n	8005cc4 <_printf_i+0x14c>
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	462a      	mov	r2, r5
 8005d72:	4649      	mov	r1, r9
 8005d74:	4640      	mov	r0, r8
 8005d76:	47d0      	blx	sl
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d0ad      	beq.n	8005cd8 <_printf_i+0x160>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	079b      	lsls	r3, r3, #30
 8005d80:	d413      	bmi.n	8005daa <_printf_i+0x232>
 8005d82:	68e0      	ldr	r0, [r4, #12]
 8005d84:	9b03      	ldr	r3, [sp, #12]
 8005d86:	4298      	cmp	r0, r3
 8005d88:	bfb8      	it	lt
 8005d8a:	4618      	movlt	r0, r3
 8005d8c:	e7a6      	b.n	8005cdc <_printf_i+0x164>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4632      	mov	r2, r6
 8005d92:	4649      	mov	r1, r9
 8005d94:	4640      	mov	r0, r8
 8005d96:	47d0      	blx	sl
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d09d      	beq.n	8005cd8 <_printf_i+0x160>
 8005d9c:	3501      	adds	r5, #1
 8005d9e:	68e3      	ldr	r3, [r4, #12]
 8005da0:	9903      	ldr	r1, [sp, #12]
 8005da2:	1a5b      	subs	r3, r3, r1
 8005da4:	42ab      	cmp	r3, r5
 8005da6:	dcf2      	bgt.n	8005d8e <_printf_i+0x216>
 8005da8:	e7eb      	b.n	8005d82 <_printf_i+0x20a>
 8005daa:	2500      	movs	r5, #0
 8005dac:	f104 0619 	add.w	r6, r4, #25
 8005db0:	e7f5      	b.n	8005d9e <_printf_i+0x226>
 8005db2:	bf00      	nop
 8005db4:	08008272 	.word	0x08008272
 8005db8:	08008283 	.word	0x08008283

08005dbc <std>:
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	b510      	push	{r4, lr}
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8005dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dca:	6083      	str	r3, [r0, #8]
 8005dcc:	8181      	strh	r1, [r0, #12]
 8005dce:	6643      	str	r3, [r0, #100]	; 0x64
 8005dd0:	81c2      	strh	r2, [r0, #14]
 8005dd2:	6183      	str	r3, [r0, #24]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	305c      	adds	r0, #92	; 0x5c
 8005dda:	f000 f914 	bl	8006006 <memset>
 8005dde:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <std+0x58>)
 8005de0:	6263      	str	r3, [r4, #36]	; 0x24
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <std+0x5c>)
 8005de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005de6:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <std+0x60>)
 8005de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dea:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <std+0x64>)
 8005dec:	6323      	str	r3, [r4, #48]	; 0x30
 8005dee:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <std+0x68>)
 8005df0:	6224      	str	r4, [r4, #32]
 8005df2:	429c      	cmp	r4, r3
 8005df4:	d006      	beq.n	8005e04 <std+0x48>
 8005df6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005dfa:	4294      	cmp	r4, r2
 8005dfc:	d002      	beq.n	8005e04 <std+0x48>
 8005dfe:	33d0      	adds	r3, #208	; 0xd0
 8005e00:	429c      	cmp	r4, r3
 8005e02:	d105      	bne.n	8005e10 <std+0x54>
 8005e04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e0c:	f000 b978 	b.w	8006100 <__retarget_lock_init_recursive>
 8005e10:	bd10      	pop	{r4, pc}
 8005e12:	bf00      	nop
 8005e14:	08005f81 	.word	0x08005f81
 8005e18:	08005fa3 	.word	0x08005fa3
 8005e1c:	08005fdb 	.word	0x08005fdb
 8005e20:	08005fff 	.word	0x08005fff
 8005e24:	20000344 	.word	0x20000344

08005e28 <stdio_exit_handler>:
 8005e28:	4a02      	ldr	r2, [pc, #8]	; (8005e34 <stdio_exit_handler+0xc>)
 8005e2a:	4903      	ldr	r1, [pc, #12]	; (8005e38 <stdio_exit_handler+0x10>)
 8005e2c:	4803      	ldr	r0, [pc, #12]	; (8005e3c <stdio_exit_handler+0x14>)
 8005e2e:	f000 b869 	b.w	8005f04 <_fwalk_sglue>
 8005e32:	bf00      	nop
 8005e34:	2000000c 	.word	0x2000000c
 8005e38:	08007ab1 	.word	0x08007ab1
 8005e3c:	20000018 	.word	0x20000018

08005e40 <cleanup_stdio>:
 8005e40:	6841      	ldr	r1, [r0, #4]
 8005e42:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <cleanup_stdio+0x34>)
 8005e44:	4299      	cmp	r1, r3
 8005e46:	b510      	push	{r4, lr}
 8005e48:	4604      	mov	r4, r0
 8005e4a:	d001      	beq.n	8005e50 <cleanup_stdio+0x10>
 8005e4c:	f001 fe30 	bl	8007ab0 <_fflush_r>
 8005e50:	68a1      	ldr	r1, [r4, #8]
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <cleanup_stdio+0x38>)
 8005e54:	4299      	cmp	r1, r3
 8005e56:	d002      	beq.n	8005e5e <cleanup_stdio+0x1e>
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f001 fe29 	bl	8007ab0 <_fflush_r>
 8005e5e:	68e1      	ldr	r1, [r4, #12]
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <cleanup_stdio+0x3c>)
 8005e62:	4299      	cmp	r1, r3
 8005e64:	d004      	beq.n	8005e70 <cleanup_stdio+0x30>
 8005e66:	4620      	mov	r0, r4
 8005e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e6c:	f001 be20 	b.w	8007ab0 <_fflush_r>
 8005e70:	bd10      	pop	{r4, pc}
 8005e72:	bf00      	nop
 8005e74:	20000344 	.word	0x20000344
 8005e78:	200003ac 	.word	0x200003ac
 8005e7c:	20000414 	.word	0x20000414

08005e80 <global_stdio_init.part.0>:
 8005e80:	b510      	push	{r4, lr}
 8005e82:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <global_stdio_init.part.0+0x30>)
 8005e84:	4c0b      	ldr	r4, [pc, #44]	; (8005eb4 <global_stdio_init.part.0+0x34>)
 8005e86:	4a0c      	ldr	r2, [pc, #48]	; (8005eb8 <global_stdio_init.part.0+0x38>)
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2104      	movs	r1, #4
 8005e90:	f7ff ff94 	bl	8005dbc <std>
 8005e94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e98:	2201      	movs	r2, #1
 8005e9a:	2109      	movs	r1, #9
 8005e9c:	f7ff ff8e 	bl	8005dbc <std>
 8005ea0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eaa:	2112      	movs	r1, #18
 8005eac:	f7ff bf86 	b.w	8005dbc <std>
 8005eb0:	2000047c 	.word	0x2000047c
 8005eb4:	20000344 	.word	0x20000344
 8005eb8:	08005e29 	.word	0x08005e29

08005ebc <__sfp_lock_acquire>:
 8005ebc:	4801      	ldr	r0, [pc, #4]	; (8005ec4 <__sfp_lock_acquire+0x8>)
 8005ebe:	f000 b920 	b.w	8006102 <__retarget_lock_acquire_recursive>
 8005ec2:	bf00      	nop
 8005ec4:	20000485 	.word	0x20000485

08005ec8 <__sfp_lock_release>:
 8005ec8:	4801      	ldr	r0, [pc, #4]	; (8005ed0 <__sfp_lock_release+0x8>)
 8005eca:	f000 b91b 	b.w	8006104 <__retarget_lock_release_recursive>
 8005ece:	bf00      	nop
 8005ed0:	20000485 	.word	0x20000485

08005ed4 <__sinit>:
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	f7ff fff0 	bl	8005ebc <__sfp_lock_acquire>
 8005edc:	6a23      	ldr	r3, [r4, #32]
 8005ede:	b11b      	cbz	r3, 8005ee8 <__sinit+0x14>
 8005ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee4:	f7ff bff0 	b.w	8005ec8 <__sfp_lock_release>
 8005ee8:	4b04      	ldr	r3, [pc, #16]	; (8005efc <__sinit+0x28>)
 8005eea:	6223      	str	r3, [r4, #32]
 8005eec:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <__sinit+0x2c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1f5      	bne.n	8005ee0 <__sinit+0xc>
 8005ef4:	f7ff ffc4 	bl	8005e80 <global_stdio_init.part.0>
 8005ef8:	e7f2      	b.n	8005ee0 <__sinit+0xc>
 8005efa:	bf00      	nop
 8005efc:	08005e41 	.word	0x08005e41
 8005f00:	2000047c 	.word	0x2000047c

08005f04 <_fwalk_sglue>:
 8005f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f08:	4607      	mov	r7, r0
 8005f0a:	4688      	mov	r8, r1
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	2600      	movs	r6, #0
 8005f10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f14:	f1b9 0901 	subs.w	r9, r9, #1
 8005f18:	d505      	bpl.n	8005f26 <_fwalk_sglue+0x22>
 8005f1a:	6824      	ldr	r4, [r4, #0]
 8005f1c:	2c00      	cmp	r4, #0
 8005f1e:	d1f7      	bne.n	8005f10 <_fwalk_sglue+0xc>
 8005f20:	4630      	mov	r0, r6
 8005f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f26:	89ab      	ldrh	r3, [r5, #12]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d907      	bls.n	8005f3c <_fwalk_sglue+0x38>
 8005f2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f30:	3301      	adds	r3, #1
 8005f32:	d003      	beq.n	8005f3c <_fwalk_sglue+0x38>
 8005f34:	4629      	mov	r1, r5
 8005f36:	4638      	mov	r0, r7
 8005f38:	47c0      	blx	r8
 8005f3a:	4306      	orrs	r6, r0
 8005f3c:	3568      	adds	r5, #104	; 0x68
 8005f3e:	e7e9      	b.n	8005f14 <_fwalk_sglue+0x10>

08005f40 <siprintf>:
 8005f40:	b40e      	push	{r1, r2, r3}
 8005f42:	b500      	push	{lr}
 8005f44:	b09c      	sub	sp, #112	; 0x70
 8005f46:	ab1d      	add	r3, sp, #116	; 0x74
 8005f48:	9002      	str	r0, [sp, #8]
 8005f4a:	9006      	str	r0, [sp, #24]
 8005f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f50:	4809      	ldr	r0, [pc, #36]	; (8005f78 <siprintf+0x38>)
 8005f52:	9107      	str	r1, [sp, #28]
 8005f54:	9104      	str	r1, [sp, #16]
 8005f56:	4909      	ldr	r1, [pc, #36]	; (8005f7c <siprintf+0x3c>)
 8005f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f5c:	9105      	str	r1, [sp, #20]
 8005f5e:	6800      	ldr	r0, [r0, #0]
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	a902      	add	r1, sp, #8
 8005f64:	f001 fc20 	bl	80077a8 <_svfiprintf_r>
 8005f68:	9b02      	ldr	r3, [sp, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	b01c      	add	sp, #112	; 0x70
 8005f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f74:	b003      	add	sp, #12
 8005f76:	4770      	bx	lr
 8005f78:	20000064 	.word	0x20000064
 8005f7c:	ffff0208 	.word	0xffff0208

08005f80 <__sread>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	460c      	mov	r4, r1
 8005f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f88:	f000 f86c 	bl	8006064 <_read_r>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	bfab      	itete	ge
 8005f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f92:	89a3      	ldrhlt	r3, [r4, #12]
 8005f94:	181b      	addge	r3, r3, r0
 8005f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f9a:	bfac      	ite	ge
 8005f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f9e:	81a3      	strhlt	r3, [r4, #12]
 8005fa0:	bd10      	pop	{r4, pc}

08005fa2 <__swrite>:
 8005fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa6:	461f      	mov	r7, r3
 8005fa8:	898b      	ldrh	r3, [r1, #12]
 8005faa:	05db      	lsls	r3, r3, #23
 8005fac:	4605      	mov	r5, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	d505      	bpl.n	8005fc0 <__swrite+0x1e>
 8005fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb8:	2302      	movs	r3, #2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f000 f840 	bl	8006040 <_lseek_r>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	4632      	mov	r2, r6
 8005fce:	463b      	mov	r3, r7
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd6:	f000 b857 	b.w	8006088 <_write_r>

08005fda <__sseek>:
 8005fda:	b510      	push	{r4, lr}
 8005fdc:	460c      	mov	r4, r1
 8005fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe2:	f000 f82d 	bl	8006040 <_lseek_r>
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	bf15      	itete	ne
 8005fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ff6:	81a3      	strheq	r3, [r4, #12]
 8005ff8:	bf18      	it	ne
 8005ffa:	81a3      	strhne	r3, [r4, #12]
 8005ffc:	bd10      	pop	{r4, pc}

08005ffe <__sclose>:
 8005ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006002:	f000 b80d 	b.w	8006020 <_close_r>

08006006 <memset>:
 8006006:	4402      	add	r2, r0
 8006008:	4603      	mov	r3, r0
 800600a:	4293      	cmp	r3, r2
 800600c:	d100      	bne.n	8006010 <memset+0xa>
 800600e:	4770      	bx	lr
 8006010:	f803 1b01 	strb.w	r1, [r3], #1
 8006014:	e7f9      	b.n	800600a <memset+0x4>
	...

08006018 <_localeconv_r>:
 8006018:	4800      	ldr	r0, [pc, #0]	; (800601c <_localeconv_r+0x4>)
 800601a:	4770      	bx	lr
 800601c:	20000158 	.word	0x20000158

08006020 <_close_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4d06      	ldr	r5, [pc, #24]	; (800603c <_close_r+0x1c>)
 8006024:	2300      	movs	r3, #0
 8006026:	4604      	mov	r4, r0
 8006028:	4608      	mov	r0, r1
 800602a:	602b      	str	r3, [r5, #0]
 800602c:	f7fb fcc1 	bl	80019b2 <_close>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_close_r+0x1a>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_close_r+0x1a>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	20000480 	.word	0x20000480

08006040 <_lseek_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d07      	ldr	r5, [pc, #28]	; (8006060 <_lseek_r+0x20>)
 8006044:	4604      	mov	r4, r0
 8006046:	4608      	mov	r0, r1
 8006048:	4611      	mov	r1, r2
 800604a:	2200      	movs	r2, #0
 800604c:	602a      	str	r2, [r5, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	f7fb fcd6 	bl	8001a00 <_lseek>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_lseek_r+0x1e>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_lseek_r+0x1e>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	20000480 	.word	0x20000480

08006064 <_read_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4d07      	ldr	r5, [pc, #28]	; (8006084 <_read_r+0x20>)
 8006068:	4604      	mov	r4, r0
 800606a:	4608      	mov	r0, r1
 800606c:	4611      	mov	r1, r2
 800606e:	2200      	movs	r2, #0
 8006070:	602a      	str	r2, [r5, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	f7fb fc64 	bl	8001940 <_read>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_read_r+0x1e>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	b103      	cbz	r3, 8006082 <_read_r+0x1e>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	20000480 	.word	0x20000480

08006088 <_write_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d07      	ldr	r5, [pc, #28]	; (80060a8 <_write_r+0x20>)
 800608c:	4604      	mov	r4, r0
 800608e:	4608      	mov	r0, r1
 8006090:	4611      	mov	r1, r2
 8006092:	2200      	movs	r2, #0
 8006094:	602a      	str	r2, [r5, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	f7fb fc6f 	bl	800197a <_write>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_write_r+0x1e>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_write_r+0x1e>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	20000480 	.word	0x20000480

080060ac <__errno>:
 80060ac:	4b01      	ldr	r3, [pc, #4]	; (80060b4 <__errno+0x8>)
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20000064 	.word	0x20000064

080060b8 <__libc_init_array>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	4d0d      	ldr	r5, [pc, #52]	; (80060f0 <__libc_init_array+0x38>)
 80060bc:	4c0d      	ldr	r4, [pc, #52]	; (80060f4 <__libc_init_array+0x3c>)
 80060be:	1b64      	subs	r4, r4, r5
 80060c0:	10a4      	asrs	r4, r4, #2
 80060c2:	2600      	movs	r6, #0
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	d109      	bne.n	80060dc <__libc_init_array+0x24>
 80060c8:	4d0b      	ldr	r5, [pc, #44]	; (80060f8 <__libc_init_array+0x40>)
 80060ca:	4c0c      	ldr	r4, [pc, #48]	; (80060fc <__libc_init_array+0x44>)
 80060cc:	f002 f894 	bl	80081f8 <_init>
 80060d0:	1b64      	subs	r4, r4, r5
 80060d2:	10a4      	asrs	r4, r4, #2
 80060d4:	2600      	movs	r6, #0
 80060d6:	42a6      	cmp	r6, r4
 80060d8:	d105      	bne.n	80060e6 <__libc_init_array+0x2e>
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e0:	4798      	blx	r3
 80060e2:	3601      	adds	r6, #1
 80060e4:	e7ee      	b.n	80060c4 <__libc_init_array+0xc>
 80060e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ea:	4798      	blx	r3
 80060ec:	3601      	adds	r6, #1
 80060ee:	e7f2      	b.n	80060d6 <__libc_init_array+0x1e>
 80060f0:	080085dc 	.word	0x080085dc
 80060f4:	080085dc 	.word	0x080085dc
 80060f8:	080085dc 	.word	0x080085dc
 80060fc:	080085e0 	.word	0x080085e0

08006100 <__retarget_lock_init_recursive>:
 8006100:	4770      	bx	lr

08006102 <__retarget_lock_acquire_recursive>:
 8006102:	4770      	bx	lr

08006104 <__retarget_lock_release_recursive>:
 8006104:	4770      	bx	lr

08006106 <quorem>:
 8006106:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610a:	6903      	ldr	r3, [r0, #16]
 800610c:	690c      	ldr	r4, [r1, #16]
 800610e:	42a3      	cmp	r3, r4
 8006110:	4607      	mov	r7, r0
 8006112:	db7e      	blt.n	8006212 <quorem+0x10c>
 8006114:	3c01      	subs	r4, #1
 8006116:	f101 0814 	add.w	r8, r1, #20
 800611a:	f100 0514 	add.w	r5, r0, #20
 800611e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006128:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800612c:	3301      	adds	r3, #1
 800612e:	429a      	cmp	r2, r3
 8006130:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006134:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006138:	fbb2 f6f3 	udiv	r6, r2, r3
 800613c:	d331      	bcc.n	80061a2 <quorem+0x9c>
 800613e:	f04f 0e00 	mov.w	lr, #0
 8006142:	4640      	mov	r0, r8
 8006144:	46ac      	mov	ip, r5
 8006146:	46f2      	mov	sl, lr
 8006148:	f850 2b04 	ldr.w	r2, [r0], #4
 800614c:	b293      	uxth	r3, r2
 800614e:	fb06 e303 	mla	r3, r6, r3, lr
 8006152:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006156:	0c1a      	lsrs	r2, r3, #16
 8006158:	b29b      	uxth	r3, r3
 800615a:	ebaa 0303 	sub.w	r3, sl, r3
 800615e:	f8dc a000 	ldr.w	sl, [ip]
 8006162:	fa13 f38a 	uxtah	r3, r3, sl
 8006166:	fb06 220e 	mla	r2, r6, lr, r2
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	9b00      	ldr	r3, [sp, #0]
 800616e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006172:	b292      	uxth	r2, r2
 8006174:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800617c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006180:	4581      	cmp	r9, r0
 8006182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006186:	f84c 3b04 	str.w	r3, [ip], #4
 800618a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800618e:	d2db      	bcs.n	8006148 <quorem+0x42>
 8006190:	f855 300b 	ldr.w	r3, [r5, fp]
 8006194:	b92b      	cbnz	r3, 80061a2 <quorem+0x9c>
 8006196:	9b01      	ldr	r3, [sp, #4]
 8006198:	3b04      	subs	r3, #4
 800619a:	429d      	cmp	r5, r3
 800619c:	461a      	mov	r2, r3
 800619e:	d32c      	bcc.n	80061fa <quorem+0xf4>
 80061a0:	613c      	str	r4, [r7, #16]
 80061a2:	4638      	mov	r0, r7
 80061a4:	f001 f9a6 	bl	80074f4 <__mcmp>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	db22      	blt.n	80061f2 <quorem+0xec>
 80061ac:	3601      	adds	r6, #1
 80061ae:	4629      	mov	r1, r5
 80061b0:	2000      	movs	r0, #0
 80061b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80061b6:	f8d1 c000 	ldr.w	ip, [r1]
 80061ba:	b293      	uxth	r3, r2
 80061bc:	1ac3      	subs	r3, r0, r3
 80061be:	0c12      	lsrs	r2, r2, #16
 80061c0:	fa13 f38c 	uxtah	r3, r3, ip
 80061c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80061c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061d2:	45c1      	cmp	r9, r8
 80061d4:	f841 3b04 	str.w	r3, [r1], #4
 80061d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061dc:	d2e9      	bcs.n	80061b2 <quorem+0xac>
 80061de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061e6:	b922      	cbnz	r2, 80061f2 <quorem+0xec>
 80061e8:	3b04      	subs	r3, #4
 80061ea:	429d      	cmp	r5, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	d30a      	bcc.n	8006206 <quorem+0x100>
 80061f0:	613c      	str	r4, [r7, #16]
 80061f2:	4630      	mov	r0, r6
 80061f4:	b003      	add	sp, #12
 80061f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	3b04      	subs	r3, #4
 80061fe:	2a00      	cmp	r2, #0
 8006200:	d1ce      	bne.n	80061a0 <quorem+0x9a>
 8006202:	3c01      	subs	r4, #1
 8006204:	e7c9      	b.n	800619a <quorem+0x94>
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	3b04      	subs	r3, #4
 800620a:	2a00      	cmp	r2, #0
 800620c:	d1f0      	bne.n	80061f0 <quorem+0xea>
 800620e:	3c01      	subs	r4, #1
 8006210:	e7eb      	b.n	80061ea <quorem+0xe4>
 8006212:	2000      	movs	r0, #0
 8006214:	e7ee      	b.n	80061f4 <quorem+0xee>
	...

08006218 <_dtoa_r>:
 8006218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	ed2d 8b04 	vpush	{d8-d9}
 8006220:	69c5      	ldr	r5, [r0, #28]
 8006222:	b093      	sub	sp, #76	; 0x4c
 8006224:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006228:	ec57 6b10 	vmov	r6, r7, d0
 800622c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006230:	9107      	str	r1, [sp, #28]
 8006232:	4604      	mov	r4, r0
 8006234:	920a      	str	r2, [sp, #40]	; 0x28
 8006236:	930d      	str	r3, [sp, #52]	; 0x34
 8006238:	b975      	cbnz	r5, 8006258 <_dtoa_r+0x40>
 800623a:	2010      	movs	r0, #16
 800623c:	f000 fe2a 	bl	8006e94 <malloc>
 8006240:	4602      	mov	r2, r0
 8006242:	61e0      	str	r0, [r4, #28]
 8006244:	b920      	cbnz	r0, 8006250 <_dtoa_r+0x38>
 8006246:	4bae      	ldr	r3, [pc, #696]	; (8006500 <_dtoa_r+0x2e8>)
 8006248:	21ef      	movs	r1, #239	; 0xef
 800624a:	48ae      	ldr	r0, [pc, #696]	; (8006504 <_dtoa_r+0x2ec>)
 800624c:	f001 fc90 	bl	8007b70 <__assert_func>
 8006250:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006254:	6005      	str	r5, [r0, #0]
 8006256:	60c5      	str	r5, [r0, #12]
 8006258:	69e3      	ldr	r3, [r4, #28]
 800625a:	6819      	ldr	r1, [r3, #0]
 800625c:	b151      	cbz	r1, 8006274 <_dtoa_r+0x5c>
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	604a      	str	r2, [r1, #4]
 8006262:	2301      	movs	r3, #1
 8006264:	4093      	lsls	r3, r2
 8006266:	608b      	str	r3, [r1, #8]
 8006268:	4620      	mov	r0, r4
 800626a:	f000 ff07 	bl	800707c <_Bfree>
 800626e:	69e3      	ldr	r3, [r4, #28]
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	1e3b      	subs	r3, r7, #0
 8006276:	bfbb      	ittet	lt
 8006278:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800627c:	9303      	strlt	r3, [sp, #12]
 800627e:	2300      	movge	r3, #0
 8006280:	2201      	movlt	r2, #1
 8006282:	bfac      	ite	ge
 8006284:	f8c8 3000 	strge.w	r3, [r8]
 8006288:	f8c8 2000 	strlt.w	r2, [r8]
 800628c:	4b9e      	ldr	r3, [pc, #632]	; (8006508 <_dtoa_r+0x2f0>)
 800628e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006292:	ea33 0308 	bics.w	r3, r3, r8
 8006296:	d11b      	bne.n	80062d0 <_dtoa_r+0xb8>
 8006298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800629a:	f242 730f 	movw	r3, #9999	; 0x270f
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80062a4:	4333      	orrs	r3, r6
 80062a6:	f000 8593 	beq.w	8006dd0 <_dtoa_r+0xbb8>
 80062aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062ac:	b963      	cbnz	r3, 80062c8 <_dtoa_r+0xb0>
 80062ae:	4b97      	ldr	r3, [pc, #604]	; (800650c <_dtoa_r+0x2f4>)
 80062b0:	e027      	b.n	8006302 <_dtoa_r+0xea>
 80062b2:	4b97      	ldr	r3, [pc, #604]	; (8006510 <_dtoa_r+0x2f8>)
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	9800      	ldr	r0, [sp, #0]
 80062be:	b013      	add	sp, #76	; 0x4c
 80062c0:	ecbd 8b04 	vpop	{d8-d9}
 80062c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c8:	4b90      	ldr	r3, [pc, #576]	; (800650c <_dtoa_r+0x2f4>)
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	3303      	adds	r3, #3
 80062ce:	e7f3      	b.n	80062b8 <_dtoa_r+0xa0>
 80062d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80062d4:	2200      	movs	r2, #0
 80062d6:	ec51 0b17 	vmov	r0, r1, d7
 80062da:	eeb0 8a47 	vmov.f32	s16, s14
 80062de:	eef0 8a67 	vmov.f32	s17, s15
 80062e2:	2300      	movs	r3, #0
 80062e4:	f7fa fbf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80062e8:	4681      	mov	r9, r0
 80062ea:	b160      	cbz	r0, 8006306 <_dtoa_r+0xee>
 80062ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062ee:	2301      	movs	r3, #1
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 8568 	beq.w	8006dca <_dtoa_r+0xbb2>
 80062fa:	4b86      	ldr	r3, [pc, #536]	; (8006514 <_dtoa_r+0x2fc>)
 80062fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	3b01      	subs	r3, #1
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	e7da      	b.n	80062bc <_dtoa_r+0xa4>
 8006306:	aa10      	add	r2, sp, #64	; 0x40
 8006308:	a911      	add	r1, sp, #68	; 0x44
 800630a:	4620      	mov	r0, r4
 800630c:	eeb0 0a48 	vmov.f32	s0, s16
 8006310:	eef0 0a68 	vmov.f32	s1, s17
 8006314:	f001 f994 	bl	8007640 <__d2b>
 8006318:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800631c:	4682      	mov	sl, r0
 800631e:	2d00      	cmp	r5, #0
 8006320:	d07f      	beq.n	8006422 <_dtoa_r+0x20a>
 8006322:	ee18 3a90 	vmov	r3, s17
 8006326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800632a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800632e:	ec51 0b18 	vmov	r0, r1, d8
 8006332:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006336:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800633a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800633e:	4619      	mov	r1, r3
 8006340:	2200      	movs	r2, #0
 8006342:	4b75      	ldr	r3, [pc, #468]	; (8006518 <_dtoa_r+0x300>)
 8006344:	f7f9 ffa0 	bl	8000288 <__aeabi_dsub>
 8006348:	a367      	add	r3, pc, #412	; (adr r3, 80064e8 <_dtoa_r+0x2d0>)
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	f7fa f953 	bl	80005f8 <__aeabi_dmul>
 8006352:	a367      	add	r3, pc, #412	; (adr r3, 80064f0 <_dtoa_r+0x2d8>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f7f9 ff98 	bl	800028c <__adddf3>
 800635c:	4606      	mov	r6, r0
 800635e:	4628      	mov	r0, r5
 8006360:	460f      	mov	r7, r1
 8006362:	f7fa f8df 	bl	8000524 <__aeabi_i2d>
 8006366:	a364      	add	r3, pc, #400	; (adr r3, 80064f8 <_dtoa_r+0x2e0>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f7fa f944 	bl	80005f8 <__aeabi_dmul>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	4630      	mov	r0, r6
 8006376:	4639      	mov	r1, r7
 8006378:	f7f9 ff88 	bl	800028c <__adddf3>
 800637c:	4606      	mov	r6, r0
 800637e:	460f      	mov	r7, r1
 8006380:	f7fa fbea 	bl	8000b58 <__aeabi_d2iz>
 8006384:	2200      	movs	r2, #0
 8006386:	4683      	mov	fp, r0
 8006388:	2300      	movs	r3, #0
 800638a:	4630      	mov	r0, r6
 800638c:	4639      	mov	r1, r7
 800638e:	f7fa fba5 	bl	8000adc <__aeabi_dcmplt>
 8006392:	b148      	cbz	r0, 80063a8 <_dtoa_r+0x190>
 8006394:	4658      	mov	r0, fp
 8006396:	f7fa f8c5 	bl	8000524 <__aeabi_i2d>
 800639a:	4632      	mov	r2, r6
 800639c:	463b      	mov	r3, r7
 800639e:	f7fa fb93 	bl	8000ac8 <__aeabi_dcmpeq>
 80063a2:	b908      	cbnz	r0, 80063a8 <_dtoa_r+0x190>
 80063a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063a8:	f1bb 0f16 	cmp.w	fp, #22
 80063ac:	d857      	bhi.n	800645e <_dtoa_r+0x246>
 80063ae:	4b5b      	ldr	r3, [pc, #364]	; (800651c <_dtoa_r+0x304>)
 80063b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	ec51 0b18 	vmov	r0, r1, d8
 80063bc:	f7fa fb8e 	bl	8000adc <__aeabi_dcmplt>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d04e      	beq.n	8006462 <_dtoa_r+0x24a>
 80063c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063c8:	2300      	movs	r3, #0
 80063ca:	930c      	str	r3, [sp, #48]	; 0x30
 80063cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063ce:	1b5b      	subs	r3, r3, r5
 80063d0:	1e5a      	subs	r2, r3, #1
 80063d2:	bf45      	ittet	mi
 80063d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80063d8:	9305      	strmi	r3, [sp, #20]
 80063da:	2300      	movpl	r3, #0
 80063dc:	2300      	movmi	r3, #0
 80063de:	9206      	str	r2, [sp, #24]
 80063e0:	bf54      	ite	pl
 80063e2:	9305      	strpl	r3, [sp, #20]
 80063e4:	9306      	strmi	r3, [sp, #24]
 80063e6:	f1bb 0f00 	cmp.w	fp, #0
 80063ea:	db3c      	blt.n	8006466 <_dtoa_r+0x24e>
 80063ec:	9b06      	ldr	r3, [sp, #24]
 80063ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80063f2:	445b      	add	r3, fp
 80063f4:	9306      	str	r3, [sp, #24]
 80063f6:	2300      	movs	r3, #0
 80063f8:	9308      	str	r3, [sp, #32]
 80063fa:	9b07      	ldr	r3, [sp, #28]
 80063fc:	2b09      	cmp	r3, #9
 80063fe:	d868      	bhi.n	80064d2 <_dtoa_r+0x2ba>
 8006400:	2b05      	cmp	r3, #5
 8006402:	bfc4      	itt	gt
 8006404:	3b04      	subgt	r3, #4
 8006406:	9307      	strgt	r3, [sp, #28]
 8006408:	9b07      	ldr	r3, [sp, #28]
 800640a:	f1a3 0302 	sub.w	r3, r3, #2
 800640e:	bfcc      	ite	gt
 8006410:	2500      	movgt	r5, #0
 8006412:	2501      	movle	r5, #1
 8006414:	2b03      	cmp	r3, #3
 8006416:	f200 8085 	bhi.w	8006524 <_dtoa_r+0x30c>
 800641a:	e8df f003 	tbb	[pc, r3]
 800641e:	3b2e      	.short	0x3b2e
 8006420:	5839      	.short	0x5839
 8006422:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006426:	441d      	add	r5, r3
 8006428:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800642c:	2b20      	cmp	r3, #32
 800642e:	bfc1      	itttt	gt
 8006430:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006434:	fa08 f803 	lslgt.w	r8, r8, r3
 8006438:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800643c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006440:	bfd6      	itet	le
 8006442:	f1c3 0320 	rsble	r3, r3, #32
 8006446:	ea48 0003 	orrgt.w	r0, r8, r3
 800644a:	fa06 f003 	lslle.w	r0, r6, r3
 800644e:	f7fa f859 	bl	8000504 <__aeabi_ui2d>
 8006452:	2201      	movs	r2, #1
 8006454:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006458:	3d01      	subs	r5, #1
 800645a:	920e      	str	r2, [sp, #56]	; 0x38
 800645c:	e76f      	b.n	800633e <_dtoa_r+0x126>
 800645e:	2301      	movs	r3, #1
 8006460:	e7b3      	b.n	80063ca <_dtoa_r+0x1b2>
 8006462:	900c      	str	r0, [sp, #48]	; 0x30
 8006464:	e7b2      	b.n	80063cc <_dtoa_r+0x1b4>
 8006466:	9b05      	ldr	r3, [sp, #20]
 8006468:	eba3 030b 	sub.w	r3, r3, fp
 800646c:	9305      	str	r3, [sp, #20]
 800646e:	f1cb 0300 	rsb	r3, fp, #0
 8006472:	9308      	str	r3, [sp, #32]
 8006474:	2300      	movs	r3, #0
 8006476:	930b      	str	r3, [sp, #44]	; 0x2c
 8006478:	e7bf      	b.n	80063fa <_dtoa_r+0x1e2>
 800647a:	2300      	movs	r3, #0
 800647c:	9309      	str	r3, [sp, #36]	; 0x24
 800647e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006480:	2b00      	cmp	r3, #0
 8006482:	dc52      	bgt.n	800652a <_dtoa_r+0x312>
 8006484:	2301      	movs	r3, #1
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	9304      	str	r3, [sp, #16]
 800648a:	461a      	mov	r2, r3
 800648c:	920a      	str	r2, [sp, #40]	; 0x28
 800648e:	e00b      	b.n	80064a8 <_dtoa_r+0x290>
 8006490:	2301      	movs	r3, #1
 8006492:	e7f3      	b.n	800647c <_dtoa_r+0x264>
 8006494:	2300      	movs	r3, #0
 8006496:	9309      	str	r3, [sp, #36]	; 0x24
 8006498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800649a:	445b      	add	r3, fp
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	3301      	adds	r3, #1
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	bfb8      	it	lt
 80064a6:	2301      	movlt	r3, #1
 80064a8:	69e0      	ldr	r0, [r4, #28]
 80064aa:	2100      	movs	r1, #0
 80064ac:	2204      	movs	r2, #4
 80064ae:	f102 0614 	add.w	r6, r2, #20
 80064b2:	429e      	cmp	r6, r3
 80064b4:	d93d      	bls.n	8006532 <_dtoa_r+0x31a>
 80064b6:	6041      	str	r1, [r0, #4]
 80064b8:	4620      	mov	r0, r4
 80064ba:	f000 fd9f 	bl	8006ffc <_Balloc>
 80064be:	9000      	str	r0, [sp, #0]
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d139      	bne.n	8006538 <_dtoa_r+0x320>
 80064c4:	4b16      	ldr	r3, [pc, #88]	; (8006520 <_dtoa_r+0x308>)
 80064c6:	4602      	mov	r2, r0
 80064c8:	f240 11af 	movw	r1, #431	; 0x1af
 80064cc:	e6bd      	b.n	800624a <_dtoa_r+0x32>
 80064ce:	2301      	movs	r3, #1
 80064d0:	e7e1      	b.n	8006496 <_dtoa_r+0x27e>
 80064d2:	2501      	movs	r5, #1
 80064d4:	2300      	movs	r3, #0
 80064d6:	9307      	str	r3, [sp, #28]
 80064d8:	9509      	str	r5, [sp, #36]	; 0x24
 80064da:	f04f 33ff 	mov.w	r3, #4294967295
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	2200      	movs	r2, #0
 80064e4:	2312      	movs	r3, #18
 80064e6:	e7d1      	b.n	800648c <_dtoa_r+0x274>
 80064e8:	636f4361 	.word	0x636f4361
 80064ec:	3fd287a7 	.word	0x3fd287a7
 80064f0:	8b60c8b3 	.word	0x8b60c8b3
 80064f4:	3fc68a28 	.word	0x3fc68a28
 80064f8:	509f79fb 	.word	0x509f79fb
 80064fc:	3fd34413 	.word	0x3fd34413
 8006500:	080082a1 	.word	0x080082a1
 8006504:	080082b8 	.word	0x080082b8
 8006508:	7ff00000 	.word	0x7ff00000
 800650c:	0800829d 	.word	0x0800829d
 8006510:	08008294 	.word	0x08008294
 8006514:	08008271 	.word	0x08008271
 8006518:	3ff80000 	.word	0x3ff80000
 800651c:	080083a8 	.word	0x080083a8
 8006520:	08008310 	.word	0x08008310
 8006524:	2301      	movs	r3, #1
 8006526:	9309      	str	r3, [sp, #36]	; 0x24
 8006528:	e7d7      	b.n	80064da <_dtoa_r+0x2c2>
 800652a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	9304      	str	r3, [sp, #16]
 8006530:	e7ba      	b.n	80064a8 <_dtoa_r+0x290>
 8006532:	3101      	adds	r1, #1
 8006534:	0052      	lsls	r2, r2, #1
 8006536:	e7ba      	b.n	80064ae <_dtoa_r+0x296>
 8006538:	69e3      	ldr	r3, [r4, #28]
 800653a:	9a00      	ldr	r2, [sp, #0]
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	2b0e      	cmp	r3, #14
 8006542:	f200 80a8 	bhi.w	8006696 <_dtoa_r+0x47e>
 8006546:	2d00      	cmp	r5, #0
 8006548:	f000 80a5 	beq.w	8006696 <_dtoa_r+0x47e>
 800654c:	f1bb 0f00 	cmp.w	fp, #0
 8006550:	dd38      	ble.n	80065c4 <_dtoa_r+0x3ac>
 8006552:	4bc0      	ldr	r3, [pc, #768]	; (8006854 <_dtoa_r+0x63c>)
 8006554:	f00b 020f 	and.w	r2, fp, #15
 8006558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800655c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006560:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006564:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006568:	d019      	beq.n	800659e <_dtoa_r+0x386>
 800656a:	4bbb      	ldr	r3, [pc, #748]	; (8006858 <_dtoa_r+0x640>)
 800656c:	ec51 0b18 	vmov	r0, r1, d8
 8006570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006574:	f7fa f96a 	bl	800084c <__aeabi_ddiv>
 8006578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800657c:	f008 080f 	and.w	r8, r8, #15
 8006580:	2503      	movs	r5, #3
 8006582:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006858 <_dtoa_r+0x640>
 8006586:	f1b8 0f00 	cmp.w	r8, #0
 800658a:	d10a      	bne.n	80065a2 <_dtoa_r+0x38a>
 800658c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006590:	4632      	mov	r2, r6
 8006592:	463b      	mov	r3, r7
 8006594:	f7fa f95a 	bl	800084c <__aeabi_ddiv>
 8006598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800659c:	e02b      	b.n	80065f6 <_dtoa_r+0x3de>
 800659e:	2502      	movs	r5, #2
 80065a0:	e7ef      	b.n	8006582 <_dtoa_r+0x36a>
 80065a2:	f018 0f01 	tst.w	r8, #1
 80065a6:	d008      	beq.n	80065ba <_dtoa_r+0x3a2>
 80065a8:	4630      	mov	r0, r6
 80065aa:	4639      	mov	r1, r7
 80065ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80065b0:	f7fa f822 	bl	80005f8 <__aeabi_dmul>
 80065b4:	3501      	adds	r5, #1
 80065b6:	4606      	mov	r6, r0
 80065b8:	460f      	mov	r7, r1
 80065ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80065be:	f109 0908 	add.w	r9, r9, #8
 80065c2:	e7e0      	b.n	8006586 <_dtoa_r+0x36e>
 80065c4:	f000 809f 	beq.w	8006706 <_dtoa_r+0x4ee>
 80065c8:	f1cb 0600 	rsb	r6, fp, #0
 80065cc:	4ba1      	ldr	r3, [pc, #644]	; (8006854 <_dtoa_r+0x63c>)
 80065ce:	4fa2      	ldr	r7, [pc, #648]	; (8006858 <_dtoa_r+0x640>)
 80065d0:	f006 020f 	and.w	r2, r6, #15
 80065d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	ec51 0b18 	vmov	r0, r1, d8
 80065e0:	f7fa f80a 	bl	80005f8 <__aeabi_dmul>
 80065e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065e8:	1136      	asrs	r6, r6, #4
 80065ea:	2300      	movs	r3, #0
 80065ec:	2502      	movs	r5, #2
 80065ee:	2e00      	cmp	r6, #0
 80065f0:	d17e      	bne.n	80066f0 <_dtoa_r+0x4d8>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1d0      	bne.n	8006598 <_dtoa_r+0x380>
 80065f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8084 	beq.w	800670a <_dtoa_r+0x4f2>
 8006602:	4b96      	ldr	r3, [pc, #600]	; (800685c <_dtoa_r+0x644>)
 8006604:	2200      	movs	r2, #0
 8006606:	4640      	mov	r0, r8
 8006608:	4649      	mov	r1, r9
 800660a:	f7fa fa67 	bl	8000adc <__aeabi_dcmplt>
 800660e:	2800      	cmp	r0, #0
 8006610:	d07b      	beq.n	800670a <_dtoa_r+0x4f2>
 8006612:	9b04      	ldr	r3, [sp, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d078      	beq.n	800670a <_dtoa_r+0x4f2>
 8006618:	9b01      	ldr	r3, [sp, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	dd39      	ble.n	8006692 <_dtoa_r+0x47a>
 800661e:	4b90      	ldr	r3, [pc, #576]	; (8006860 <_dtoa_r+0x648>)
 8006620:	2200      	movs	r2, #0
 8006622:	4640      	mov	r0, r8
 8006624:	4649      	mov	r1, r9
 8006626:	f7f9 ffe7 	bl	80005f8 <__aeabi_dmul>
 800662a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800662e:	9e01      	ldr	r6, [sp, #4]
 8006630:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006634:	3501      	adds	r5, #1
 8006636:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800663a:	4628      	mov	r0, r5
 800663c:	f7f9 ff72 	bl	8000524 <__aeabi_i2d>
 8006640:	4642      	mov	r2, r8
 8006642:	464b      	mov	r3, r9
 8006644:	f7f9 ffd8 	bl	80005f8 <__aeabi_dmul>
 8006648:	4b86      	ldr	r3, [pc, #536]	; (8006864 <_dtoa_r+0x64c>)
 800664a:	2200      	movs	r2, #0
 800664c:	f7f9 fe1e 	bl	800028c <__adddf3>
 8006650:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006658:	9303      	str	r3, [sp, #12]
 800665a:	2e00      	cmp	r6, #0
 800665c:	d158      	bne.n	8006710 <_dtoa_r+0x4f8>
 800665e:	4b82      	ldr	r3, [pc, #520]	; (8006868 <_dtoa_r+0x650>)
 8006660:	2200      	movs	r2, #0
 8006662:	4640      	mov	r0, r8
 8006664:	4649      	mov	r1, r9
 8006666:	f7f9 fe0f 	bl	8000288 <__aeabi_dsub>
 800666a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800666e:	4680      	mov	r8, r0
 8006670:	4689      	mov	r9, r1
 8006672:	f7fa fa51 	bl	8000b18 <__aeabi_dcmpgt>
 8006676:	2800      	cmp	r0, #0
 8006678:	f040 8296 	bne.w	8006ba8 <_dtoa_r+0x990>
 800667c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006680:	4640      	mov	r0, r8
 8006682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006686:	4649      	mov	r1, r9
 8006688:	f7fa fa28 	bl	8000adc <__aeabi_dcmplt>
 800668c:	2800      	cmp	r0, #0
 800668e:	f040 8289 	bne.w	8006ba4 <_dtoa_r+0x98c>
 8006692:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006698:	2b00      	cmp	r3, #0
 800669a:	f2c0 814e 	blt.w	800693a <_dtoa_r+0x722>
 800669e:	f1bb 0f0e 	cmp.w	fp, #14
 80066a2:	f300 814a 	bgt.w	800693a <_dtoa_r+0x722>
 80066a6:	4b6b      	ldr	r3, [pc, #428]	; (8006854 <_dtoa_r+0x63c>)
 80066a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80066ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f280 80dc 	bge.w	8006870 <_dtoa_r+0x658>
 80066b8:	9b04      	ldr	r3, [sp, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f300 80d8 	bgt.w	8006870 <_dtoa_r+0x658>
 80066c0:	f040 826f 	bne.w	8006ba2 <_dtoa_r+0x98a>
 80066c4:	4b68      	ldr	r3, [pc, #416]	; (8006868 <_dtoa_r+0x650>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	4640      	mov	r0, r8
 80066ca:	4649      	mov	r1, r9
 80066cc:	f7f9 ff94 	bl	80005f8 <__aeabi_dmul>
 80066d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066d4:	f7fa fa16 	bl	8000b04 <__aeabi_dcmpge>
 80066d8:	9e04      	ldr	r6, [sp, #16]
 80066da:	4637      	mov	r7, r6
 80066dc:	2800      	cmp	r0, #0
 80066de:	f040 8245 	bne.w	8006b6c <_dtoa_r+0x954>
 80066e2:	9d00      	ldr	r5, [sp, #0]
 80066e4:	2331      	movs	r3, #49	; 0x31
 80066e6:	f805 3b01 	strb.w	r3, [r5], #1
 80066ea:	f10b 0b01 	add.w	fp, fp, #1
 80066ee:	e241      	b.n	8006b74 <_dtoa_r+0x95c>
 80066f0:	07f2      	lsls	r2, r6, #31
 80066f2:	d505      	bpl.n	8006700 <_dtoa_r+0x4e8>
 80066f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066f8:	f7f9 ff7e 	bl	80005f8 <__aeabi_dmul>
 80066fc:	3501      	adds	r5, #1
 80066fe:	2301      	movs	r3, #1
 8006700:	1076      	asrs	r6, r6, #1
 8006702:	3708      	adds	r7, #8
 8006704:	e773      	b.n	80065ee <_dtoa_r+0x3d6>
 8006706:	2502      	movs	r5, #2
 8006708:	e775      	b.n	80065f6 <_dtoa_r+0x3de>
 800670a:	9e04      	ldr	r6, [sp, #16]
 800670c:	465f      	mov	r7, fp
 800670e:	e792      	b.n	8006636 <_dtoa_r+0x41e>
 8006710:	9900      	ldr	r1, [sp, #0]
 8006712:	4b50      	ldr	r3, [pc, #320]	; (8006854 <_dtoa_r+0x63c>)
 8006714:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006718:	4431      	add	r1, r6
 800671a:	9102      	str	r1, [sp, #8]
 800671c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800671e:	eeb0 9a47 	vmov.f32	s18, s14
 8006722:	eef0 9a67 	vmov.f32	s19, s15
 8006726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800672a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800672e:	2900      	cmp	r1, #0
 8006730:	d044      	beq.n	80067bc <_dtoa_r+0x5a4>
 8006732:	494e      	ldr	r1, [pc, #312]	; (800686c <_dtoa_r+0x654>)
 8006734:	2000      	movs	r0, #0
 8006736:	f7fa f889 	bl	800084c <__aeabi_ddiv>
 800673a:	ec53 2b19 	vmov	r2, r3, d9
 800673e:	f7f9 fda3 	bl	8000288 <__aeabi_dsub>
 8006742:	9d00      	ldr	r5, [sp, #0]
 8006744:	ec41 0b19 	vmov	d9, r0, r1
 8006748:	4649      	mov	r1, r9
 800674a:	4640      	mov	r0, r8
 800674c:	f7fa fa04 	bl	8000b58 <__aeabi_d2iz>
 8006750:	4606      	mov	r6, r0
 8006752:	f7f9 fee7 	bl	8000524 <__aeabi_i2d>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4640      	mov	r0, r8
 800675c:	4649      	mov	r1, r9
 800675e:	f7f9 fd93 	bl	8000288 <__aeabi_dsub>
 8006762:	3630      	adds	r6, #48	; 0x30
 8006764:	f805 6b01 	strb.w	r6, [r5], #1
 8006768:	ec53 2b19 	vmov	r2, r3, d9
 800676c:	4680      	mov	r8, r0
 800676e:	4689      	mov	r9, r1
 8006770:	f7fa f9b4 	bl	8000adc <__aeabi_dcmplt>
 8006774:	2800      	cmp	r0, #0
 8006776:	d164      	bne.n	8006842 <_dtoa_r+0x62a>
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	4937      	ldr	r1, [pc, #220]	; (800685c <_dtoa_r+0x644>)
 800677e:	2000      	movs	r0, #0
 8006780:	f7f9 fd82 	bl	8000288 <__aeabi_dsub>
 8006784:	ec53 2b19 	vmov	r2, r3, d9
 8006788:	f7fa f9a8 	bl	8000adc <__aeabi_dcmplt>
 800678c:	2800      	cmp	r0, #0
 800678e:	f040 80b6 	bne.w	80068fe <_dtoa_r+0x6e6>
 8006792:	9b02      	ldr	r3, [sp, #8]
 8006794:	429d      	cmp	r5, r3
 8006796:	f43f af7c 	beq.w	8006692 <_dtoa_r+0x47a>
 800679a:	4b31      	ldr	r3, [pc, #196]	; (8006860 <_dtoa_r+0x648>)
 800679c:	ec51 0b19 	vmov	r0, r1, d9
 80067a0:	2200      	movs	r2, #0
 80067a2:	f7f9 ff29 	bl	80005f8 <__aeabi_dmul>
 80067a6:	4b2e      	ldr	r3, [pc, #184]	; (8006860 <_dtoa_r+0x648>)
 80067a8:	ec41 0b19 	vmov	d9, r0, r1
 80067ac:	2200      	movs	r2, #0
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	f7f9 ff21 	bl	80005f8 <__aeabi_dmul>
 80067b6:	4680      	mov	r8, r0
 80067b8:	4689      	mov	r9, r1
 80067ba:	e7c5      	b.n	8006748 <_dtoa_r+0x530>
 80067bc:	ec51 0b17 	vmov	r0, r1, d7
 80067c0:	f7f9 ff1a 	bl	80005f8 <__aeabi_dmul>
 80067c4:	9b02      	ldr	r3, [sp, #8]
 80067c6:	9d00      	ldr	r5, [sp, #0]
 80067c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80067ca:	ec41 0b19 	vmov	d9, r0, r1
 80067ce:	4649      	mov	r1, r9
 80067d0:	4640      	mov	r0, r8
 80067d2:	f7fa f9c1 	bl	8000b58 <__aeabi_d2iz>
 80067d6:	4606      	mov	r6, r0
 80067d8:	f7f9 fea4 	bl	8000524 <__aeabi_i2d>
 80067dc:	3630      	adds	r6, #48	; 0x30
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4640      	mov	r0, r8
 80067e4:	4649      	mov	r1, r9
 80067e6:	f7f9 fd4f 	bl	8000288 <__aeabi_dsub>
 80067ea:	f805 6b01 	strb.w	r6, [r5], #1
 80067ee:	9b02      	ldr	r3, [sp, #8]
 80067f0:	429d      	cmp	r5, r3
 80067f2:	4680      	mov	r8, r0
 80067f4:	4689      	mov	r9, r1
 80067f6:	f04f 0200 	mov.w	r2, #0
 80067fa:	d124      	bne.n	8006846 <_dtoa_r+0x62e>
 80067fc:	4b1b      	ldr	r3, [pc, #108]	; (800686c <_dtoa_r+0x654>)
 80067fe:	ec51 0b19 	vmov	r0, r1, d9
 8006802:	f7f9 fd43 	bl	800028c <__adddf3>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4640      	mov	r0, r8
 800680c:	4649      	mov	r1, r9
 800680e:	f7fa f983 	bl	8000b18 <__aeabi_dcmpgt>
 8006812:	2800      	cmp	r0, #0
 8006814:	d173      	bne.n	80068fe <_dtoa_r+0x6e6>
 8006816:	ec53 2b19 	vmov	r2, r3, d9
 800681a:	4914      	ldr	r1, [pc, #80]	; (800686c <_dtoa_r+0x654>)
 800681c:	2000      	movs	r0, #0
 800681e:	f7f9 fd33 	bl	8000288 <__aeabi_dsub>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4640      	mov	r0, r8
 8006828:	4649      	mov	r1, r9
 800682a:	f7fa f957 	bl	8000adc <__aeabi_dcmplt>
 800682e:	2800      	cmp	r0, #0
 8006830:	f43f af2f 	beq.w	8006692 <_dtoa_r+0x47a>
 8006834:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006836:	1e6b      	subs	r3, r5, #1
 8006838:	930f      	str	r3, [sp, #60]	; 0x3c
 800683a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800683e:	2b30      	cmp	r3, #48	; 0x30
 8006840:	d0f8      	beq.n	8006834 <_dtoa_r+0x61c>
 8006842:	46bb      	mov	fp, r7
 8006844:	e04a      	b.n	80068dc <_dtoa_r+0x6c4>
 8006846:	4b06      	ldr	r3, [pc, #24]	; (8006860 <_dtoa_r+0x648>)
 8006848:	f7f9 fed6 	bl	80005f8 <__aeabi_dmul>
 800684c:	4680      	mov	r8, r0
 800684e:	4689      	mov	r9, r1
 8006850:	e7bd      	b.n	80067ce <_dtoa_r+0x5b6>
 8006852:	bf00      	nop
 8006854:	080083a8 	.word	0x080083a8
 8006858:	08008380 	.word	0x08008380
 800685c:	3ff00000 	.word	0x3ff00000
 8006860:	40240000 	.word	0x40240000
 8006864:	401c0000 	.word	0x401c0000
 8006868:	40140000 	.word	0x40140000
 800686c:	3fe00000 	.word	0x3fe00000
 8006870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006874:	9d00      	ldr	r5, [sp, #0]
 8006876:	4642      	mov	r2, r8
 8006878:	464b      	mov	r3, r9
 800687a:	4630      	mov	r0, r6
 800687c:	4639      	mov	r1, r7
 800687e:	f7f9 ffe5 	bl	800084c <__aeabi_ddiv>
 8006882:	f7fa f969 	bl	8000b58 <__aeabi_d2iz>
 8006886:	9001      	str	r0, [sp, #4]
 8006888:	f7f9 fe4c 	bl	8000524 <__aeabi_i2d>
 800688c:	4642      	mov	r2, r8
 800688e:	464b      	mov	r3, r9
 8006890:	f7f9 feb2 	bl	80005f8 <__aeabi_dmul>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	f7f9 fcf4 	bl	8000288 <__aeabi_dsub>
 80068a0:	9e01      	ldr	r6, [sp, #4]
 80068a2:	9f04      	ldr	r7, [sp, #16]
 80068a4:	3630      	adds	r6, #48	; 0x30
 80068a6:	f805 6b01 	strb.w	r6, [r5], #1
 80068aa:	9e00      	ldr	r6, [sp, #0]
 80068ac:	1bae      	subs	r6, r5, r6
 80068ae:	42b7      	cmp	r7, r6
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	d134      	bne.n	8006920 <_dtoa_r+0x708>
 80068b6:	f7f9 fce9 	bl	800028c <__adddf3>
 80068ba:	4642      	mov	r2, r8
 80068bc:	464b      	mov	r3, r9
 80068be:	4606      	mov	r6, r0
 80068c0:	460f      	mov	r7, r1
 80068c2:	f7fa f929 	bl	8000b18 <__aeabi_dcmpgt>
 80068c6:	b9c8      	cbnz	r0, 80068fc <_dtoa_r+0x6e4>
 80068c8:	4642      	mov	r2, r8
 80068ca:	464b      	mov	r3, r9
 80068cc:	4630      	mov	r0, r6
 80068ce:	4639      	mov	r1, r7
 80068d0:	f7fa f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80068d4:	b110      	cbz	r0, 80068dc <_dtoa_r+0x6c4>
 80068d6:	9b01      	ldr	r3, [sp, #4]
 80068d8:	07db      	lsls	r3, r3, #31
 80068da:	d40f      	bmi.n	80068fc <_dtoa_r+0x6e4>
 80068dc:	4651      	mov	r1, sl
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fbcc 	bl	800707c <_Bfree>
 80068e4:	2300      	movs	r3, #0
 80068e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068e8:	702b      	strb	r3, [r5, #0]
 80068ea:	f10b 0301 	add.w	r3, fp, #1
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f43f ace2 	beq.w	80062bc <_dtoa_r+0xa4>
 80068f8:	601d      	str	r5, [r3, #0]
 80068fa:	e4df      	b.n	80062bc <_dtoa_r+0xa4>
 80068fc:	465f      	mov	r7, fp
 80068fe:	462b      	mov	r3, r5
 8006900:	461d      	mov	r5, r3
 8006902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006906:	2a39      	cmp	r2, #57	; 0x39
 8006908:	d106      	bne.n	8006918 <_dtoa_r+0x700>
 800690a:	9a00      	ldr	r2, [sp, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d1f7      	bne.n	8006900 <_dtoa_r+0x6e8>
 8006910:	9900      	ldr	r1, [sp, #0]
 8006912:	2230      	movs	r2, #48	; 0x30
 8006914:	3701      	adds	r7, #1
 8006916:	700a      	strb	r2, [r1, #0]
 8006918:	781a      	ldrb	r2, [r3, #0]
 800691a:	3201      	adds	r2, #1
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	e790      	b.n	8006842 <_dtoa_r+0x62a>
 8006920:	4ba3      	ldr	r3, [pc, #652]	; (8006bb0 <_dtoa_r+0x998>)
 8006922:	2200      	movs	r2, #0
 8006924:	f7f9 fe68 	bl	80005f8 <__aeabi_dmul>
 8006928:	2200      	movs	r2, #0
 800692a:	2300      	movs	r3, #0
 800692c:	4606      	mov	r6, r0
 800692e:	460f      	mov	r7, r1
 8006930:	f7fa f8ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006934:	2800      	cmp	r0, #0
 8006936:	d09e      	beq.n	8006876 <_dtoa_r+0x65e>
 8006938:	e7d0      	b.n	80068dc <_dtoa_r+0x6c4>
 800693a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800693c:	2a00      	cmp	r2, #0
 800693e:	f000 80ca 	beq.w	8006ad6 <_dtoa_r+0x8be>
 8006942:	9a07      	ldr	r2, [sp, #28]
 8006944:	2a01      	cmp	r2, #1
 8006946:	f300 80ad 	bgt.w	8006aa4 <_dtoa_r+0x88c>
 800694a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800694c:	2a00      	cmp	r2, #0
 800694e:	f000 80a5 	beq.w	8006a9c <_dtoa_r+0x884>
 8006952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006956:	9e08      	ldr	r6, [sp, #32]
 8006958:	9d05      	ldr	r5, [sp, #20]
 800695a:	9a05      	ldr	r2, [sp, #20]
 800695c:	441a      	add	r2, r3
 800695e:	9205      	str	r2, [sp, #20]
 8006960:	9a06      	ldr	r2, [sp, #24]
 8006962:	2101      	movs	r1, #1
 8006964:	441a      	add	r2, r3
 8006966:	4620      	mov	r0, r4
 8006968:	9206      	str	r2, [sp, #24]
 800696a:	f000 fc3d 	bl	80071e8 <__i2b>
 800696e:	4607      	mov	r7, r0
 8006970:	b165      	cbz	r5, 800698c <_dtoa_r+0x774>
 8006972:	9b06      	ldr	r3, [sp, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	dd09      	ble.n	800698c <_dtoa_r+0x774>
 8006978:	42ab      	cmp	r3, r5
 800697a:	9a05      	ldr	r2, [sp, #20]
 800697c:	bfa8      	it	ge
 800697e:	462b      	movge	r3, r5
 8006980:	1ad2      	subs	r2, r2, r3
 8006982:	9205      	str	r2, [sp, #20]
 8006984:	9a06      	ldr	r2, [sp, #24]
 8006986:	1aed      	subs	r5, r5, r3
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	9306      	str	r3, [sp, #24]
 800698c:	9b08      	ldr	r3, [sp, #32]
 800698e:	b1f3      	cbz	r3, 80069ce <_dtoa_r+0x7b6>
 8006990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 80a3 	beq.w	8006ade <_dtoa_r+0x8c6>
 8006998:	2e00      	cmp	r6, #0
 800699a:	dd10      	ble.n	80069be <_dtoa_r+0x7a6>
 800699c:	4639      	mov	r1, r7
 800699e:	4632      	mov	r2, r6
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 fce1 	bl	8007368 <__pow5mult>
 80069a6:	4652      	mov	r2, sl
 80069a8:	4601      	mov	r1, r0
 80069aa:	4607      	mov	r7, r0
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 fc31 	bl	8007214 <__multiply>
 80069b2:	4651      	mov	r1, sl
 80069b4:	4680      	mov	r8, r0
 80069b6:	4620      	mov	r0, r4
 80069b8:	f000 fb60 	bl	800707c <_Bfree>
 80069bc:	46c2      	mov	sl, r8
 80069be:	9b08      	ldr	r3, [sp, #32]
 80069c0:	1b9a      	subs	r2, r3, r6
 80069c2:	d004      	beq.n	80069ce <_dtoa_r+0x7b6>
 80069c4:	4651      	mov	r1, sl
 80069c6:	4620      	mov	r0, r4
 80069c8:	f000 fcce 	bl	8007368 <__pow5mult>
 80069cc:	4682      	mov	sl, r0
 80069ce:	2101      	movs	r1, #1
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 fc09 	bl	80071e8 <__i2b>
 80069d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	4606      	mov	r6, r0
 80069dc:	f340 8081 	ble.w	8006ae2 <_dtoa_r+0x8ca>
 80069e0:	461a      	mov	r2, r3
 80069e2:	4601      	mov	r1, r0
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 fcbf 	bl	8007368 <__pow5mult>
 80069ea:	9b07      	ldr	r3, [sp, #28]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	4606      	mov	r6, r0
 80069f0:	dd7a      	ble.n	8006ae8 <_dtoa_r+0x8d0>
 80069f2:	f04f 0800 	mov.w	r8, #0
 80069f6:	6933      	ldr	r3, [r6, #16]
 80069f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80069fc:	6918      	ldr	r0, [r3, #16]
 80069fe:	f000 fba5 	bl	800714c <__hi0bits>
 8006a02:	f1c0 0020 	rsb	r0, r0, #32
 8006a06:	9b06      	ldr	r3, [sp, #24]
 8006a08:	4418      	add	r0, r3
 8006a0a:	f010 001f 	ands.w	r0, r0, #31
 8006a0e:	f000 8094 	beq.w	8006b3a <_dtoa_r+0x922>
 8006a12:	f1c0 0320 	rsb	r3, r0, #32
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	f340 8085 	ble.w	8006b26 <_dtoa_r+0x90e>
 8006a1c:	9b05      	ldr	r3, [sp, #20]
 8006a1e:	f1c0 001c 	rsb	r0, r0, #28
 8006a22:	4403      	add	r3, r0
 8006a24:	9305      	str	r3, [sp, #20]
 8006a26:	9b06      	ldr	r3, [sp, #24]
 8006a28:	4403      	add	r3, r0
 8006a2a:	4405      	add	r5, r0
 8006a2c:	9306      	str	r3, [sp, #24]
 8006a2e:	9b05      	ldr	r3, [sp, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	dd05      	ble.n	8006a40 <_dtoa_r+0x828>
 8006a34:	4651      	mov	r1, sl
 8006a36:	461a      	mov	r2, r3
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fcef 	bl	800741c <__lshift>
 8006a3e:	4682      	mov	sl, r0
 8006a40:	9b06      	ldr	r3, [sp, #24]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	dd05      	ble.n	8006a52 <_dtoa_r+0x83a>
 8006a46:	4631      	mov	r1, r6
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 fce6 	bl	800741c <__lshift>
 8006a50:	4606      	mov	r6, r0
 8006a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d072      	beq.n	8006b3e <_dtoa_r+0x926>
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4650      	mov	r0, sl
 8006a5c:	f000 fd4a 	bl	80074f4 <__mcmp>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	da6c      	bge.n	8006b3e <_dtoa_r+0x926>
 8006a64:	2300      	movs	r3, #0
 8006a66:	4651      	mov	r1, sl
 8006a68:	220a      	movs	r2, #10
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 fb28 	bl	80070c0 <__multadd>
 8006a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a76:	4682      	mov	sl, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 81b0 	beq.w	8006dde <_dtoa_r+0xbc6>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	4639      	mov	r1, r7
 8006a82:	220a      	movs	r2, #10
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 fb1b 	bl	80070c0 <__multadd>
 8006a8a:	9b01      	ldr	r3, [sp, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	4607      	mov	r7, r0
 8006a90:	f300 8096 	bgt.w	8006bc0 <_dtoa_r+0x9a8>
 8006a94:	9b07      	ldr	r3, [sp, #28]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	dc59      	bgt.n	8006b4e <_dtoa_r+0x936>
 8006a9a:	e091      	b.n	8006bc0 <_dtoa_r+0x9a8>
 8006a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006aa2:	e758      	b.n	8006956 <_dtoa_r+0x73e>
 8006aa4:	9b04      	ldr	r3, [sp, #16]
 8006aa6:	1e5e      	subs	r6, r3, #1
 8006aa8:	9b08      	ldr	r3, [sp, #32]
 8006aaa:	42b3      	cmp	r3, r6
 8006aac:	bfbf      	itttt	lt
 8006aae:	9b08      	ldrlt	r3, [sp, #32]
 8006ab0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006ab2:	9608      	strlt	r6, [sp, #32]
 8006ab4:	1af3      	sublt	r3, r6, r3
 8006ab6:	bfb4      	ite	lt
 8006ab8:	18d2      	addlt	r2, r2, r3
 8006aba:	1b9e      	subge	r6, r3, r6
 8006abc:	9b04      	ldr	r3, [sp, #16]
 8006abe:	bfbc      	itt	lt
 8006ac0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006ac2:	2600      	movlt	r6, #0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bfb7      	itett	lt
 8006ac8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006acc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ad0:	1a9d      	sublt	r5, r3, r2
 8006ad2:	2300      	movlt	r3, #0
 8006ad4:	e741      	b.n	800695a <_dtoa_r+0x742>
 8006ad6:	9e08      	ldr	r6, [sp, #32]
 8006ad8:	9d05      	ldr	r5, [sp, #20]
 8006ada:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006adc:	e748      	b.n	8006970 <_dtoa_r+0x758>
 8006ade:	9a08      	ldr	r2, [sp, #32]
 8006ae0:	e770      	b.n	80069c4 <_dtoa_r+0x7ac>
 8006ae2:	9b07      	ldr	r3, [sp, #28]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	dc19      	bgt.n	8006b1c <_dtoa_r+0x904>
 8006ae8:	9b02      	ldr	r3, [sp, #8]
 8006aea:	b9bb      	cbnz	r3, 8006b1c <_dtoa_r+0x904>
 8006aec:	9b03      	ldr	r3, [sp, #12]
 8006aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af2:	b99b      	cbnz	r3, 8006b1c <_dtoa_r+0x904>
 8006af4:	9b03      	ldr	r3, [sp, #12]
 8006af6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006afa:	0d1b      	lsrs	r3, r3, #20
 8006afc:	051b      	lsls	r3, r3, #20
 8006afe:	b183      	cbz	r3, 8006b22 <_dtoa_r+0x90a>
 8006b00:	9b05      	ldr	r3, [sp, #20]
 8006b02:	3301      	adds	r3, #1
 8006b04:	9305      	str	r3, [sp, #20]
 8006b06:	9b06      	ldr	r3, [sp, #24]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	9306      	str	r3, [sp, #24]
 8006b0c:	f04f 0801 	mov.w	r8, #1
 8006b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f47f af6f 	bne.w	80069f6 <_dtoa_r+0x7de>
 8006b18:	2001      	movs	r0, #1
 8006b1a:	e774      	b.n	8006a06 <_dtoa_r+0x7ee>
 8006b1c:	f04f 0800 	mov.w	r8, #0
 8006b20:	e7f6      	b.n	8006b10 <_dtoa_r+0x8f8>
 8006b22:	4698      	mov	r8, r3
 8006b24:	e7f4      	b.n	8006b10 <_dtoa_r+0x8f8>
 8006b26:	d082      	beq.n	8006a2e <_dtoa_r+0x816>
 8006b28:	9a05      	ldr	r2, [sp, #20]
 8006b2a:	331c      	adds	r3, #28
 8006b2c:	441a      	add	r2, r3
 8006b2e:	9205      	str	r2, [sp, #20]
 8006b30:	9a06      	ldr	r2, [sp, #24]
 8006b32:	441a      	add	r2, r3
 8006b34:	441d      	add	r5, r3
 8006b36:	9206      	str	r2, [sp, #24]
 8006b38:	e779      	b.n	8006a2e <_dtoa_r+0x816>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	e7f4      	b.n	8006b28 <_dtoa_r+0x910>
 8006b3e:	9b04      	ldr	r3, [sp, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dc37      	bgt.n	8006bb4 <_dtoa_r+0x99c>
 8006b44:	9b07      	ldr	r3, [sp, #28]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	dd34      	ble.n	8006bb4 <_dtoa_r+0x99c>
 8006b4a:	9b04      	ldr	r3, [sp, #16]
 8006b4c:	9301      	str	r3, [sp, #4]
 8006b4e:	9b01      	ldr	r3, [sp, #4]
 8006b50:	b963      	cbnz	r3, 8006b6c <_dtoa_r+0x954>
 8006b52:	4631      	mov	r1, r6
 8006b54:	2205      	movs	r2, #5
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 fab2 	bl	80070c0 <__multadd>
 8006b5c:	4601      	mov	r1, r0
 8006b5e:	4606      	mov	r6, r0
 8006b60:	4650      	mov	r0, sl
 8006b62:	f000 fcc7 	bl	80074f4 <__mcmp>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	f73f adbb 	bgt.w	80066e2 <_dtoa_r+0x4ca>
 8006b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6e:	9d00      	ldr	r5, [sp, #0]
 8006b70:	ea6f 0b03 	mvn.w	fp, r3
 8006b74:	f04f 0800 	mov.w	r8, #0
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 fa7e 	bl	800707c <_Bfree>
 8006b80:	2f00      	cmp	r7, #0
 8006b82:	f43f aeab 	beq.w	80068dc <_dtoa_r+0x6c4>
 8006b86:	f1b8 0f00 	cmp.w	r8, #0
 8006b8a:	d005      	beq.n	8006b98 <_dtoa_r+0x980>
 8006b8c:	45b8      	cmp	r8, r7
 8006b8e:	d003      	beq.n	8006b98 <_dtoa_r+0x980>
 8006b90:	4641      	mov	r1, r8
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 fa72 	bl	800707c <_Bfree>
 8006b98:	4639      	mov	r1, r7
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 fa6e 	bl	800707c <_Bfree>
 8006ba0:	e69c      	b.n	80068dc <_dtoa_r+0x6c4>
 8006ba2:	2600      	movs	r6, #0
 8006ba4:	4637      	mov	r7, r6
 8006ba6:	e7e1      	b.n	8006b6c <_dtoa_r+0x954>
 8006ba8:	46bb      	mov	fp, r7
 8006baa:	4637      	mov	r7, r6
 8006bac:	e599      	b.n	80066e2 <_dtoa_r+0x4ca>
 8006bae:	bf00      	nop
 8006bb0:	40240000 	.word	0x40240000
 8006bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 80c8 	beq.w	8006d4c <_dtoa_r+0xb34>
 8006bbc:	9b04      	ldr	r3, [sp, #16]
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	2d00      	cmp	r5, #0
 8006bc2:	dd05      	ble.n	8006bd0 <_dtoa_r+0x9b8>
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	462a      	mov	r2, r5
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fc27 	bl	800741c <__lshift>
 8006bce:	4607      	mov	r7, r0
 8006bd0:	f1b8 0f00 	cmp.w	r8, #0
 8006bd4:	d05b      	beq.n	8006c8e <_dtoa_r+0xa76>
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 fa0f 	bl	8006ffc <_Balloc>
 8006bde:	4605      	mov	r5, r0
 8006be0:	b928      	cbnz	r0, 8006bee <_dtoa_r+0x9d6>
 8006be2:	4b83      	ldr	r3, [pc, #524]	; (8006df0 <_dtoa_r+0xbd8>)
 8006be4:	4602      	mov	r2, r0
 8006be6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006bea:	f7ff bb2e 	b.w	800624a <_dtoa_r+0x32>
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	3202      	adds	r2, #2
 8006bf2:	0092      	lsls	r2, r2, #2
 8006bf4:	f107 010c 	add.w	r1, r7, #12
 8006bf8:	300c      	adds	r0, #12
 8006bfa:	f000 ffab 	bl	8007b54 <memcpy>
 8006bfe:	2201      	movs	r2, #1
 8006c00:	4629      	mov	r1, r5
 8006c02:	4620      	mov	r0, r4
 8006c04:	f000 fc0a 	bl	800741c <__lshift>
 8006c08:	9b00      	ldr	r3, [sp, #0]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	9304      	str	r3, [sp, #16]
 8006c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c12:	4413      	add	r3, r2
 8006c14:	9308      	str	r3, [sp, #32]
 8006c16:	9b02      	ldr	r3, [sp, #8]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	46b8      	mov	r8, r7
 8006c1e:	9306      	str	r3, [sp, #24]
 8006c20:	4607      	mov	r7, r0
 8006c22:	9b04      	ldr	r3, [sp, #16]
 8006c24:	4631      	mov	r1, r6
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4650      	mov	r0, sl
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	f7ff fa6b 	bl	8006106 <quorem>
 8006c30:	4641      	mov	r1, r8
 8006c32:	9002      	str	r0, [sp, #8]
 8006c34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c38:	4650      	mov	r0, sl
 8006c3a:	f000 fc5b 	bl	80074f4 <__mcmp>
 8006c3e:	463a      	mov	r2, r7
 8006c40:	9005      	str	r0, [sp, #20]
 8006c42:	4631      	mov	r1, r6
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fc71 	bl	800752c <__mdiff>
 8006c4a:	68c2      	ldr	r2, [r0, #12]
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	bb02      	cbnz	r2, 8006c92 <_dtoa_r+0xa7a>
 8006c50:	4601      	mov	r1, r0
 8006c52:	4650      	mov	r0, sl
 8006c54:	f000 fc4e 	bl	80074f4 <__mcmp>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006c60:	f000 fa0c 	bl	800707c <_Bfree>
 8006c64:	9b07      	ldr	r3, [sp, #28]
 8006c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c68:	9d04      	ldr	r5, [sp, #16]
 8006c6a:	ea43 0102 	orr.w	r1, r3, r2
 8006c6e:	9b06      	ldr	r3, [sp, #24]
 8006c70:	4319      	orrs	r1, r3
 8006c72:	d110      	bne.n	8006c96 <_dtoa_r+0xa7e>
 8006c74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c78:	d029      	beq.n	8006cce <_dtoa_r+0xab6>
 8006c7a:	9b05      	ldr	r3, [sp, #20]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dd02      	ble.n	8006c86 <_dtoa_r+0xa6e>
 8006c80:	9b02      	ldr	r3, [sp, #8]
 8006c82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	f883 9000 	strb.w	r9, [r3]
 8006c8c:	e774      	b.n	8006b78 <_dtoa_r+0x960>
 8006c8e:	4638      	mov	r0, r7
 8006c90:	e7ba      	b.n	8006c08 <_dtoa_r+0x9f0>
 8006c92:	2201      	movs	r2, #1
 8006c94:	e7e1      	b.n	8006c5a <_dtoa_r+0xa42>
 8006c96:	9b05      	ldr	r3, [sp, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	db04      	blt.n	8006ca6 <_dtoa_r+0xa8e>
 8006c9c:	9907      	ldr	r1, [sp, #28]
 8006c9e:	430b      	orrs	r3, r1
 8006ca0:	9906      	ldr	r1, [sp, #24]
 8006ca2:	430b      	orrs	r3, r1
 8006ca4:	d120      	bne.n	8006ce8 <_dtoa_r+0xad0>
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	dded      	ble.n	8006c86 <_dtoa_r+0xa6e>
 8006caa:	4651      	mov	r1, sl
 8006cac:	2201      	movs	r2, #1
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 fbb4 	bl	800741c <__lshift>
 8006cb4:	4631      	mov	r1, r6
 8006cb6:	4682      	mov	sl, r0
 8006cb8:	f000 fc1c 	bl	80074f4 <__mcmp>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	dc03      	bgt.n	8006cc8 <_dtoa_r+0xab0>
 8006cc0:	d1e1      	bne.n	8006c86 <_dtoa_r+0xa6e>
 8006cc2:	f019 0f01 	tst.w	r9, #1
 8006cc6:	d0de      	beq.n	8006c86 <_dtoa_r+0xa6e>
 8006cc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ccc:	d1d8      	bne.n	8006c80 <_dtoa_r+0xa68>
 8006cce:	9a01      	ldr	r2, [sp, #4]
 8006cd0:	2339      	movs	r3, #57	; 0x39
 8006cd2:	7013      	strb	r3, [r2, #0]
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006cde:	2a39      	cmp	r2, #57	; 0x39
 8006ce0:	d06c      	beq.n	8006dbc <_dtoa_r+0xba4>
 8006ce2:	3201      	adds	r2, #1
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	e747      	b.n	8006b78 <_dtoa_r+0x960>
 8006ce8:	2a00      	cmp	r2, #0
 8006cea:	dd07      	ble.n	8006cfc <_dtoa_r+0xae4>
 8006cec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006cf0:	d0ed      	beq.n	8006cce <_dtoa_r+0xab6>
 8006cf2:	9a01      	ldr	r2, [sp, #4]
 8006cf4:	f109 0301 	add.w	r3, r9, #1
 8006cf8:	7013      	strb	r3, [r2, #0]
 8006cfa:	e73d      	b.n	8006b78 <_dtoa_r+0x960>
 8006cfc:	9b04      	ldr	r3, [sp, #16]
 8006cfe:	9a08      	ldr	r2, [sp, #32]
 8006d00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d043      	beq.n	8006d90 <_dtoa_r+0xb78>
 8006d08:	4651      	mov	r1, sl
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	220a      	movs	r2, #10
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f000 f9d6 	bl	80070c0 <__multadd>
 8006d14:	45b8      	cmp	r8, r7
 8006d16:	4682      	mov	sl, r0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	f04f 020a 	mov.w	r2, #10
 8006d20:	4641      	mov	r1, r8
 8006d22:	4620      	mov	r0, r4
 8006d24:	d107      	bne.n	8006d36 <_dtoa_r+0xb1e>
 8006d26:	f000 f9cb 	bl	80070c0 <__multadd>
 8006d2a:	4680      	mov	r8, r0
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	3301      	adds	r3, #1
 8006d32:	9304      	str	r3, [sp, #16]
 8006d34:	e775      	b.n	8006c22 <_dtoa_r+0xa0a>
 8006d36:	f000 f9c3 	bl	80070c0 <__multadd>
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	2300      	movs	r3, #0
 8006d40:	220a      	movs	r2, #10
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 f9bc 	bl	80070c0 <__multadd>
 8006d48:	4607      	mov	r7, r0
 8006d4a:	e7f0      	b.n	8006d2e <_dtoa_r+0xb16>
 8006d4c:	9b04      	ldr	r3, [sp, #16]
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	9d00      	ldr	r5, [sp, #0]
 8006d52:	4631      	mov	r1, r6
 8006d54:	4650      	mov	r0, sl
 8006d56:	f7ff f9d6 	bl	8006106 <quorem>
 8006d5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d5e:	9b00      	ldr	r3, [sp, #0]
 8006d60:	f805 9b01 	strb.w	r9, [r5], #1
 8006d64:	1aea      	subs	r2, r5, r3
 8006d66:	9b01      	ldr	r3, [sp, #4]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	dd07      	ble.n	8006d7c <_dtoa_r+0xb64>
 8006d6c:	4651      	mov	r1, sl
 8006d6e:	2300      	movs	r3, #0
 8006d70:	220a      	movs	r2, #10
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 f9a4 	bl	80070c0 <__multadd>
 8006d78:	4682      	mov	sl, r0
 8006d7a:	e7ea      	b.n	8006d52 <_dtoa_r+0xb3a>
 8006d7c:	9b01      	ldr	r3, [sp, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bfc8      	it	gt
 8006d82:	461d      	movgt	r5, r3
 8006d84:	9b00      	ldr	r3, [sp, #0]
 8006d86:	bfd8      	it	le
 8006d88:	2501      	movle	r5, #1
 8006d8a:	441d      	add	r5, r3
 8006d8c:	f04f 0800 	mov.w	r8, #0
 8006d90:	4651      	mov	r1, sl
 8006d92:	2201      	movs	r2, #1
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fb41 	bl	800741c <__lshift>
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	4682      	mov	sl, r0
 8006d9e:	f000 fba9 	bl	80074f4 <__mcmp>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	dc96      	bgt.n	8006cd4 <_dtoa_r+0xabc>
 8006da6:	d102      	bne.n	8006dae <_dtoa_r+0xb96>
 8006da8:	f019 0f01 	tst.w	r9, #1
 8006dac:	d192      	bne.n	8006cd4 <_dtoa_r+0xabc>
 8006dae:	462b      	mov	r3, r5
 8006db0:	461d      	mov	r5, r3
 8006db2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006db6:	2a30      	cmp	r2, #48	; 0x30
 8006db8:	d0fa      	beq.n	8006db0 <_dtoa_r+0xb98>
 8006dba:	e6dd      	b.n	8006b78 <_dtoa_r+0x960>
 8006dbc:	9a00      	ldr	r2, [sp, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d189      	bne.n	8006cd6 <_dtoa_r+0xabe>
 8006dc2:	f10b 0b01 	add.w	fp, fp, #1
 8006dc6:	2331      	movs	r3, #49	; 0x31
 8006dc8:	e796      	b.n	8006cf8 <_dtoa_r+0xae0>
 8006dca:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <_dtoa_r+0xbdc>)
 8006dcc:	f7ff ba99 	b.w	8006302 <_dtoa_r+0xea>
 8006dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f47f aa6d 	bne.w	80062b2 <_dtoa_r+0x9a>
 8006dd8:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <_dtoa_r+0xbe0>)
 8006dda:	f7ff ba92 	b.w	8006302 <_dtoa_r+0xea>
 8006dde:	9b01      	ldr	r3, [sp, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	dcb5      	bgt.n	8006d50 <_dtoa_r+0xb38>
 8006de4:	9b07      	ldr	r3, [sp, #28]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	f73f aeb1 	bgt.w	8006b4e <_dtoa_r+0x936>
 8006dec:	e7b0      	b.n	8006d50 <_dtoa_r+0xb38>
 8006dee:	bf00      	nop
 8006df0:	08008310 	.word	0x08008310
 8006df4:	08008270 	.word	0x08008270
 8006df8:	08008294 	.word	0x08008294

08006dfc <_free_r>:
 8006dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	d044      	beq.n	8006e8c <_free_r+0x90>
 8006e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e06:	9001      	str	r0, [sp, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e0e:	bfb8      	it	lt
 8006e10:	18e4      	addlt	r4, r4, r3
 8006e12:	f000 f8e7 	bl	8006fe4 <__malloc_lock>
 8006e16:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <_free_r+0x94>)
 8006e18:	9801      	ldr	r0, [sp, #4]
 8006e1a:	6813      	ldr	r3, [r2, #0]
 8006e1c:	b933      	cbnz	r3, 8006e2c <_free_r+0x30>
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	6014      	str	r4, [r2, #0]
 8006e22:	b003      	add	sp, #12
 8006e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e28:	f000 b8e2 	b.w	8006ff0 <__malloc_unlock>
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	d908      	bls.n	8006e42 <_free_r+0x46>
 8006e30:	6825      	ldr	r5, [r4, #0]
 8006e32:	1961      	adds	r1, r4, r5
 8006e34:	428b      	cmp	r3, r1
 8006e36:	bf01      	itttt	eq
 8006e38:	6819      	ldreq	r1, [r3, #0]
 8006e3a:	685b      	ldreq	r3, [r3, #4]
 8006e3c:	1949      	addeq	r1, r1, r5
 8006e3e:	6021      	streq	r1, [r4, #0]
 8006e40:	e7ed      	b.n	8006e1e <_free_r+0x22>
 8006e42:	461a      	mov	r2, r3
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b10b      	cbz	r3, 8006e4c <_free_r+0x50>
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d9fa      	bls.n	8006e42 <_free_r+0x46>
 8006e4c:	6811      	ldr	r1, [r2, #0]
 8006e4e:	1855      	adds	r5, r2, r1
 8006e50:	42a5      	cmp	r5, r4
 8006e52:	d10b      	bne.n	8006e6c <_free_r+0x70>
 8006e54:	6824      	ldr	r4, [r4, #0]
 8006e56:	4421      	add	r1, r4
 8006e58:	1854      	adds	r4, r2, r1
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	d1e0      	bne.n	8006e22 <_free_r+0x26>
 8006e60:	681c      	ldr	r4, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	6053      	str	r3, [r2, #4]
 8006e66:	440c      	add	r4, r1
 8006e68:	6014      	str	r4, [r2, #0]
 8006e6a:	e7da      	b.n	8006e22 <_free_r+0x26>
 8006e6c:	d902      	bls.n	8006e74 <_free_r+0x78>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	6003      	str	r3, [r0, #0]
 8006e72:	e7d6      	b.n	8006e22 <_free_r+0x26>
 8006e74:	6825      	ldr	r5, [r4, #0]
 8006e76:	1961      	adds	r1, r4, r5
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	bf04      	itt	eq
 8006e7c:	6819      	ldreq	r1, [r3, #0]
 8006e7e:	685b      	ldreq	r3, [r3, #4]
 8006e80:	6063      	str	r3, [r4, #4]
 8006e82:	bf04      	itt	eq
 8006e84:	1949      	addeq	r1, r1, r5
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	6054      	str	r4, [r2, #4]
 8006e8a:	e7ca      	b.n	8006e22 <_free_r+0x26>
 8006e8c:	b003      	add	sp, #12
 8006e8e:	bd30      	pop	{r4, r5, pc}
 8006e90:	20000488 	.word	0x20000488

08006e94 <malloc>:
 8006e94:	4b02      	ldr	r3, [pc, #8]	; (8006ea0 <malloc+0xc>)
 8006e96:	4601      	mov	r1, r0
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	f000 b823 	b.w	8006ee4 <_malloc_r>
 8006e9e:	bf00      	nop
 8006ea0:	20000064 	.word	0x20000064

08006ea4 <sbrk_aligned>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	4e0e      	ldr	r6, [pc, #56]	; (8006ee0 <sbrk_aligned+0x3c>)
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	6831      	ldr	r1, [r6, #0]
 8006eac:	4605      	mov	r5, r0
 8006eae:	b911      	cbnz	r1, 8006eb6 <sbrk_aligned+0x12>
 8006eb0:	f000 fe40 	bl	8007b34 <_sbrk_r>
 8006eb4:	6030      	str	r0, [r6, #0]
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 fe3b 	bl	8007b34 <_sbrk_r>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	d00a      	beq.n	8006ed8 <sbrk_aligned+0x34>
 8006ec2:	1cc4      	adds	r4, r0, #3
 8006ec4:	f024 0403 	bic.w	r4, r4, #3
 8006ec8:	42a0      	cmp	r0, r4
 8006eca:	d007      	beq.n	8006edc <sbrk_aligned+0x38>
 8006ecc:	1a21      	subs	r1, r4, r0
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f000 fe30 	bl	8007b34 <_sbrk_r>
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d101      	bne.n	8006edc <sbrk_aligned+0x38>
 8006ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8006edc:	4620      	mov	r0, r4
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	2000048c 	.word	0x2000048c

08006ee4 <_malloc_r>:
 8006ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee8:	1ccd      	adds	r5, r1, #3
 8006eea:	f025 0503 	bic.w	r5, r5, #3
 8006eee:	3508      	adds	r5, #8
 8006ef0:	2d0c      	cmp	r5, #12
 8006ef2:	bf38      	it	cc
 8006ef4:	250c      	movcc	r5, #12
 8006ef6:	2d00      	cmp	r5, #0
 8006ef8:	4607      	mov	r7, r0
 8006efa:	db01      	blt.n	8006f00 <_malloc_r+0x1c>
 8006efc:	42a9      	cmp	r1, r5
 8006efe:	d905      	bls.n	8006f0c <_malloc_r+0x28>
 8006f00:	230c      	movs	r3, #12
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	2600      	movs	r6, #0
 8006f06:	4630      	mov	r0, r6
 8006f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fe0 <_malloc_r+0xfc>
 8006f10:	f000 f868 	bl	8006fe4 <__malloc_lock>
 8006f14:	f8d8 3000 	ldr.w	r3, [r8]
 8006f18:	461c      	mov	r4, r3
 8006f1a:	bb5c      	cbnz	r4, 8006f74 <_malloc_r+0x90>
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f7ff ffc0 	bl	8006ea4 <sbrk_aligned>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	4604      	mov	r4, r0
 8006f28:	d155      	bne.n	8006fd6 <_malloc_r+0xf2>
 8006f2a:	f8d8 4000 	ldr.w	r4, [r8]
 8006f2e:	4626      	mov	r6, r4
 8006f30:	2e00      	cmp	r6, #0
 8006f32:	d145      	bne.n	8006fc0 <_malloc_r+0xdc>
 8006f34:	2c00      	cmp	r4, #0
 8006f36:	d048      	beq.n	8006fca <_malloc_r+0xe6>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	eb04 0903 	add.w	r9, r4, r3
 8006f42:	f000 fdf7 	bl	8007b34 <_sbrk_r>
 8006f46:	4581      	cmp	r9, r0
 8006f48:	d13f      	bne.n	8006fca <_malloc_r+0xe6>
 8006f4a:	6821      	ldr	r1, [r4, #0]
 8006f4c:	1a6d      	subs	r5, r5, r1
 8006f4e:	4629      	mov	r1, r5
 8006f50:	4638      	mov	r0, r7
 8006f52:	f7ff ffa7 	bl	8006ea4 <sbrk_aligned>
 8006f56:	3001      	adds	r0, #1
 8006f58:	d037      	beq.n	8006fca <_malloc_r+0xe6>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	442b      	add	r3, r5
 8006f5e:	6023      	str	r3, [r4, #0]
 8006f60:	f8d8 3000 	ldr.w	r3, [r8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d038      	beq.n	8006fda <_malloc_r+0xf6>
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	42a2      	cmp	r2, r4
 8006f6c:	d12b      	bne.n	8006fc6 <_malloc_r+0xe2>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	605a      	str	r2, [r3, #4]
 8006f72:	e00f      	b.n	8006f94 <_malloc_r+0xb0>
 8006f74:	6822      	ldr	r2, [r4, #0]
 8006f76:	1b52      	subs	r2, r2, r5
 8006f78:	d41f      	bmi.n	8006fba <_malloc_r+0xd6>
 8006f7a:	2a0b      	cmp	r2, #11
 8006f7c:	d917      	bls.n	8006fae <_malloc_r+0xca>
 8006f7e:	1961      	adds	r1, r4, r5
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	6025      	str	r5, [r4, #0]
 8006f84:	bf18      	it	ne
 8006f86:	6059      	strne	r1, [r3, #4]
 8006f88:	6863      	ldr	r3, [r4, #4]
 8006f8a:	bf08      	it	eq
 8006f8c:	f8c8 1000 	streq.w	r1, [r8]
 8006f90:	5162      	str	r2, [r4, r5]
 8006f92:	604b      	str	r3, [r1, #4]
 8006f94:	4638      	mov	r0, r7
 8006f96:	f104 060b 	add.w	r6, r4, #11
 8006f9a:	f000 f829 	bl	8006ff0 <__malloc_unlock>
 8006f9e:	f026 0607 	bic.w	r6, r6, #7
 8006fa2:	1d23      	adds	r3, r4, #4
 8006fa4:	1af2      	subs	r2, r6, r3
 8006fa6:	d0ae      	beq.n	8006f06 <_malloc_r+0x22>
 8006fa8:	1b9b      	subs	r3, r3, r6
 8006faa:	50a3      	str	r3, [r4, r2]
 8006fac:	e7ab      	b.n	8006f06 <_malloc_r+0x22>
 8006fae:	42a3      	cmp	r3, r4
 8006fb0:	6862      	ldr	r2, [r4, #4]
 8006fb2:	d1dd      	bne.n	8006f70 <_malloc_r+0x8c>
 8006fb4:	f8c8 2000 	str.w	r2, [r8]
 8006fb8:	e7ec      	b.n	8006f94 <_malloc_r+0xb0>
 8006fba:	4623      	mov	r3, r4
 8006fbc:	6864      	ldr	r4, [r4, #4]
 8006fbe:	e7ac      	b.n	8006f1a <_malloc_r+0x36>
 8006fc0:	4634      	mov	r4, r6
 8006fc2:	6876      	ldr	r6, [r6, #4]
 8006fc4:	e7b4      	b.n	8006f30 <_malloc_r+0x4c>
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	e7cc      	b.n	8006f64 <_malloc_r+0x80>
 8006fca:	230c      	movs	r3, #12
 8006fcc:	603b      	str	r3, [r7, #0]
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f000 f80e 	bl	8006ff0 <__malloc_unlock>
 8006fd4:	e797      	b.n	8006f06 <_malloc_r+0x22>
 8006fd6:	6025      	str	r5, [r4, #0]
 8006fd8:	e7dc      	b.n	8006f94 <_malloc_r+0xb0>
 8006fda:	605b      	str	r3, [r3, #4]
 8006fdc:	deff      	udf	#255	; 0xff
 8006fde:	bf00      	nop
 8006fe0:	20000488 	.word	0x20000488

08006fe4 <__malloc_lock>:
 8006fe4:	4801      	ldr	r0, [pc, #4]	; (8006fec <__malloc_lock+0x8>)
 8006fe6:	f7ff b88c 	b.w	8006102 <__retarget_lock_acquire_recursive>
 8006fea:	bf00      	nop
 8006fec:	20000484 	.word	0x20000484

08006ff0 <__malloc_unlock>:
 8006ff0:	4801      	ldr	r0, [pc, #4]	; (8006ff8 <__malloc_unlock+0x8>)
 8006ff2:	f7ff b887 	b.w	8006104 <__retarget_lock_release_recursive>
 8006ff6:	bf00      	nop
 8006ff8:	20000484 	.word	0x20000484

08006ffc <_Balloc>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	69c6      	ldr	r6, [r0, #28]
 8007000:	4604      	mov	r4, r0
 8007002:	460d      	mov	r5, r1
 8007004:	b976      	cbnz	r6, 8007024 <_Balloc+0x28>
 8007006:	2010      	movs	r0, #16
 8007008:	f7ff ff44 	bl	8006e94 <malloc>
 800700c:	4602      	mov	r2, r0
 800700e:	61e0      	str	r0, [r4, #28]
 8007010:	b920      	cbnz	r0, 800701c <_Balloc+0x20>
 8007012:	4b18      	ldr	r3, [pc, #96]	; (8007074 <_Balloc+0x78>)
 8007014:	4818      	ldr	r0, [pc, #96]	; (8007078 <_Balloc+0x7c>)
 8007016:	216b      	movs	r1, #107	; 0x6b
 8007018:	f000 fdaa 	bl	8007b70 <__assert_func>
 800701c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007020:	6006      	str	r6, [r0, #0]
 8007022:	60c6      	str	r6, [r0, #12]
 8007024:	69e6      	ldr	r6, [r4, #28]
 8007026:	68f3      	ldr	r3, [r6, #12]
 8007028:	b183      	cbz	r3, 800704c <_Balloc+0x50>
 800702a:	69e3      	ldr	r3, [r4, #28]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007032:	b9b8      	cbnz	r0, 8007064 <_Balloc+0x68>
 8007034:	2101      	movs	r1, #1
 8007036:	fa01 f605 	lsl.w	r6, r1, r5
 800703a:	1d72      	adds	r2, r6, #5
 800703c:	0092      	lsls	r2, r2, #2
 800703e:	4620      	mov	r0, r4
 8007040:	f000 fdb4 	bl	8007bac <_calloc_r>
 8007044:	b160      	cbz	r0, 8007060 <_Balloc+0x64>
 8007046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800704a:	e00e      	b.n	800706a <_Balloc+0x6e>
 800704c:	2221      	movs	r2, #33	; 0x21
 800704e:	2104      	movs	r1, #4
 8007050:	4620      	mov	r0, r4
 8007052:	f000 fdab 	bl	8007bac <_calloc_r>
 8007056:	69e3      	ldr	r3, [r4, #28]
 8007058:	60f0      	str	r0, [r6, #12]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e4      	bne.n	800702a <_Balloc+0x2e>
 8007060:	2000      	movs	r0, #0
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	6802      	ldr	r2, [r0, #0]
 8007066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800706a:	2300      	movs	r3, #0
 800706c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007070:	e7f7      	b.n	8007062 <_Balloc+0x66>
 8007072:	bf00      	nop
 8007074:	080082a1 	.word	0x080082a1
 8007078:	08008321 	.word	0x08008321

0800707c <_Bfree>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	69c6      	ldr	r6, [r0, #28]
 8007080:	4605      	mov	r5, r0
 8007082:	460c      	mov	r4, r1
 8007084:	b976      	cbnz	r6, 80070a4 <_Bfree+0x28>
 8007086:	2010      	movs	r0, #16
 8007088:	f7ff ff04 	bl	8006e94 <malloc>
 800708c:	4602      	mov	r2, r0
 800708e:	61e8      	str	r0, [r5, #28]
 8007090:	b920      	cbnz	r0, 800709c <_Bfree+0x20>
 8007092:	4b09      	ldr	r3, [pc, #36]	; (80070b8 <_Bfree+0x3c>)
 8007094:	4809      	ldr	r0, [pc, #36]	; (80070bc <_Bfree+0x40>)
 8007096:	218f      	movs	r1, #143	; 0x8f
 8007098:	f000 fd6a 	bl	8007b70 <__assert_func>
 800709c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070a0:	6006      	str	r6, [r0, #0]
 80070a2:	60c6      	str	r6, [r0, #12]
 80070a4:	b13c      	cbz	r4, 80070b6 <_Bfree+0x3a>
 80070a6:	69eb      	ldr	r3, [r5, #28]
 80070a8:	6862      	ldr	r2, [r4, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070b0:	6021      	str	r1, [r4, #0]
 80070b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	080082a1 	.word	0x080082a1
 80070bc:	08008321 	.word	0x08008321

080070c0 <__multadd>:
 80070c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c4:	690d      	ldr	r5, [r1, #16]
 80070c6:	4607      	mov	r7, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	461e      	mov	r6, r3
 80070cc:	f101 0c14 	add.w	ip, r1, #20
 80070d0:	2000      	movs	r0, #0
 80070d2:	f8dc 3000 	ldr.w	r3, [ip]
 80070d6:	b299      	uxth	r1, r3
 80070d8:	fb02 6101 	mla	r1, r2, r1, r6
 80070dc:	0c1e      	lsrs	r6, r3, #16
 80070de:	0c0b      	lsrs	r3, r1, #16
 80070e0:	fb02 3306 	mla	r3, r2, r6, r3
 80070e4:	b289      	uxth	r1, r1
 80070e6:	3001      	adds	r0, #1
 80070e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070ec:	4285      	cmp	r5, r0
 80070ee:	f84c 1b04 	str.w	r1, [ip], #4
 80070f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070f6:	dcec      	bgt.n	80070d2 <__multadd+0x12>
 80070f8:	b30e      	cbz	r6, 800713e <__multadd+0x7e>
 80070fa:	68a3      	ldr	r3, [r4, #8]
 80070fc:	42ab      	cmp	r3, r5
 80070fe:	dc19      	bgt.n	8007134 <__multadd+0x74>
 8007100:	6861      	ldr	r1, [r4, #4]
 8007102:	4638      	mov	r0, r7
 8007104:	3101      	adds	r1, #1
 8007106:	f7ff ff79 	bl	8006ffc <_Balloc>
 800710a:	4680      	mov	r8, r0
 800710c:	b928      	cbnz	r0, 800711a <__multadd+0x5a>
 800710e:	4602      	mov	r2, r0
 8007110:	4b0c      	ldr	r3, [pc, #48]	; (8007144 <__multadd+0x84>)
 8007112:	480d      	ldr	r0, [pc, #52]	; (8007148 <__multadd+0x88>)
 8007114:	21ba      	movs	r1, #186	; 0xba
 8007116:	f000 fd2b 	bl	8007b70 <__assert_func>
 800711a:	6922      	ldr	r2, [r4, #16]
 800711c:	3202      	adds	r2, #2
 800711e:	f104 010c 	add.w	r1, r4, #12
 8007122:	0092      	lsls	r2, r2, #2
 8007124:	300c      	adds	r0, #12
 8007126:	f000 fd15 	bl	8007b54 <memcpy>
 800712a:	4621      	mov	r1, r4
 800712c:	4638      	mov	r0, r7
 800712e:	f7ff ffa5 	bl	800707c <_Bfree>
 8007132:	4644      	mov	r4, r8
 8007134:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007138:	3501      	adds	r5, #1
 800713a:	615e      	str	r6, [r3, #20]
 800713c:	6125      	str	r5, [r4, #16]
 800713e:	4620      	mov	r0, r4
 8007140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007144:	08008310 	.word	0x08008310
 8007148:	08008321 	.word	0x08008321

0800714c <__hi0bits>:
 800714c:	0c03      	lsrs	r3, r0, #16
 800714e:	041b      	lsls	r3, r3, #16
 8007150:	b9d3      	cbnz	r3, 8007188 <__hi0bits+0x3c>
 8007152:	0400      	lsls	r0, r0, #16
 8007154:	2310      	movs	r3, #16
 8007156:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800715a:	bf04      	itt	eq
 800715c:	0200      	lsleq	r0, r0, #8
 800715e:	3308      	addeq	r3, #8
 8007160:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007164:	bf04      	itt	eq
 8007166:	0100      	lsleq	r0, r0, #4
 8007168:	3304      	addeq	r3, #4
 800716a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800716e:	bf04      	itt	eq
 8007170:	0080      	lsleq	r0, r0, #2
 8007172:	3302      	addeq	r3, #2
 8007174:	2800      	cmp	r0, #0
 8007176:	db05      	blt.n	8007184 <__hi0bits+0x38>
 8007178:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800717c:	f103 0301 	add.w	r3, r3, #1
 8007180:	bf08      	it	eq
 8007182:	2320      	moveq	r3, #32
 8007184:	4618      	mov	r0, r3
 8007186:	4770      	bx	lr
 8007188:	2300      	movs	r3, #0
 800718a:	e7e4      	b.n	8007156 <__hi0bits+0xa>

0800718c <__lo0bits>:
 800718c:	6803      	ldr	r3, [r0, #0]
 800718e:	f013 0207 	ands.w	r2, r3, #7
 8007192:	d00c      	beq.n	80071ae <__lo0bits+0x22>
 8007194:	07d9      	lsls	r1, r3, #31
 8007196:	d422      	bmi.n	80071de <__lo0bits+0x52>
 8007198:	079a      	lsls	r2, r3, #30
 800719a:	bf49      	itett	mi
 800719c:	085b      	lsrmi	r3, r3, #1
 800719e:	089b      	lsrpl	r3, r3, #2
 80071a0:	6003      	strmi	r3, [r0, #0]
 80071a2:	2201      	movmi	r2, #1
 80071a4:	bf5c      	itt	pl
 80071a6:	6003      	strpl	r3, [r0, #0]
 80071a8:	2202      	movpl	r2, #2
 80071aa:	4610      	mov	r0, r2
 80071ac:	4770      	bx	lr
 80071ae:	b299      	uxth	r1, r3
 80071b0:	b909      	cbnz	r1, 80071b6 <__lo0bits+0x2a>
 80071b2:	0c1b      	lsrs	r3, r3, #16
 80071b4:	2210      	movs	r2, #16
 80071b6:	b2d9      	uxtb	r1, r3
 80071b8:	b909      	cbnz	r1, 80071be <__lo0bits+0x32>
 80071ba:	3208      	adds	r2, #8
 80071bc:	0a1b      	lsrs	r3, r3, #8
 80071be:	0719      	lsls	r1, r3, #28
 80071c0:	bf04      	itt	eq
 80071c2:	091b      	lsreq	r3, r3, #4
 80071c4:	3204      	addeq	r2, #4
 80071c6:	0799      	lsls	r1, r3, #30
 80071c8:	bf04      	itt	eq
 80071ca:	089b      	lsreq	r3, r3, #2
 80071cc:	3202      	addeq	r2, #2
 80071ce:	07d9      	lsls	r1, r3, #31
 80071d0:	d403      	bmi.n	80071da <__lo0bits+0x4e>
 80071d2:	085b      	lsrs	r3, r3, #1
 80071d4:	f102 0201 	add.w	r2, r2, #1
 80071d8:	d003      	beq.n	80071e2 <__lo0bits+0x56>
 80071da:	6003      	str	r3, [r0, #0]
 80071dc:	e7e5      	b.n	80071aa <__lo0bits+0x1e>
 80071de:	2200      	movs	r2, #0
 80071e0:	e7e3      	b.n	80071aa <__lo0bits+0x1e>
 80071e2:	2220      	movs	r2, #32
 80071e4:	e7e1      	b.n	80071aa <__lo0bits+0x1e>
	...

080071e8 <__i2b>:
 80071e8:	b510      	push	{r4, lr}
 80071ea:	460c      	mov	r4, r1
 80071ec:	2101      	movs	r1, #1
 80071ee:	f7ff ff05 	bl	8006ffc <_Balloc>
 80071f2:	4602      	mov	r2, r0
 80071f4:	b928      	cbnz	r0, 8007202 <__i2b+0x1a>
 80071f6:	4b05      	ldr	r3, [pc, #20]	; (800720c <__i2b+0x24>)
 80071f8:	4805      	ldr	r0, [pc, #20]	; (8007210 <__i2b+0x28>)
 80071fa:	f240 1145 	movw	r1, #325	; 0x145
 80071fe:	f000 fcb7 	bl	8007b70 <__assert_func>
 8007202:	2301      	movs	r3, #1
 8007204:	6144      	str	r4, [r0, #20]
 8007206:	6103      	str	r3, [r0, #16]
 8007208:	bd10      	pop	{r4, pc}
 800720a:	bf00      	nop
 800720c:	08008310 	.word	0x08008310
 8007210:	08008321 	.word	0x08008321

08007214 <__multiply>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	4691      	mov	r9, r2
 800721a:	690a      	ldr	r2, [r1, #16]
 800721c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007220:	429a      	cmp	r2, r3
 8007222:	bfb8      	it	lt
 8007224:	460b      	movlt	r3, r1
 8007226:	460c      	mov	r4, r1
 8007228:	bfbc      	itt	lt
 800722a:	464c      	movlt	r4, r9
 800722c:	4699      	movlt	r9, r3
 800722e:	6927      	ldr	r7, [r4, #16]
 8007230:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007234:	68a3      	ldr	r3, [r4, #8]
 8007236:	6861      	ldr	r1, [r4, #4]
 8007238:	eb07 060a 	add.w	r6, r7, sl
 800723c:	42b3      	cmp	r3, r6
 800723e:	b085      	sub	sp, #20
 8007240:	bfb8      	it	lt
 8007242:	3101      	addlt	r1, #1
 8007244:	f7ff feda 	bl	8006ffc <_Balloc>
 8007248:	b930      	cbnz	r0, 8007258 <__multiply+0x44>
 800724a:	4602      	mov	r2, r0
 800724c:	4b44      	ldr	r3, [pc, #272]	; (8007360 <__multiply+0x14c>)
 800724e:	4845      	ldr	r0, [pc, #276]	; (8007364 <__multiply+0x150>)
 8007250:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007254:	f000 fc8c 	bl	8007b70 <__assert_func>
 8007258:	f100 0514 	add.w	r5, r0, #20
 800725c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007260:	462b      	mov	r3, r5
 8007262:	2200      	movs	r2, #0
 8007264:	4543      	cmp	r3, r8
 8007266:	d321      	bcc.n	80072ac <__multiply+0x98>
 8007268:	f104 0314 	add.w	r3, r4, #20
 800726c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007270:	f109 0314 	add.w	r3, r9, #20
 8007274:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007278:	9202      	str	r2, [sp, #8]
 800727a:	1b3a      	subs	r2, r7, r4
 800727c:	3a15      	subs	r2, #21
 800727e:	f022 0203 	bic.w	r2, r2, #3
 8007282:	3204      	adds	r2, #4
 8007284:	f104 0115 	add.w	r1, r4, #21
 8007288:	428f      	cmp	r7, r1
 800728a:	bf38      	it	cc
 800728c:	2204      	movcc	r2, #4
 800728e:	9201      	str	r2, [sp, #4]
 8007290:	9a02      	ldr	r2, [sp, #8]
 8007292:	9303      	str	r3, [sp, #12]
 8007294:	429a      	cmp	r2, r3
 8007296:	d80c      	bhi.n	80072b2 <__multiply+0x9e>
 8007298:	2e00      	cmp	r6, #0
 800729a:	dd03      	ble.n	80072a4 <__multiply+0x90>
 800729c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d05b      	beq.n	800735c <__multiply+0x148>
 80072a4:	6106      	str	r6, [r0, #16]
 80072a6:	b005      	add	sp, #20
 80072a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ac:	f843 2b04 	str.w	r2, [r3], #4
 80072b0:	e7d8      	b.n	8007264 <__multiply+0x50>
 80072b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80072b6:	f1ba 0f00 	cmp.w	sl, #0
 80072ba:	d024      	beq.n	8007306 <__multiply+0xf2>
 80072bc:	f104 0e14 	add.w	lr, r4, #20
 80072c0:	46a9      	mov	r9, r5
 80072c2:	f04f 0c00 	mov.w	ip, #0
 80072c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072ca:	f8d9 1000 	ldr.w	r1, [r9]
 80072ce:	fa1f fb82 	uxth.w	fp, r2
 80072d2:	b289      	uxth	r1, r1
 80072d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80072d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80072dc:	f8d9 2000 	ldr.w	r2, [r9]
 80072e0:	4461      	add	r1, ip
 80072e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80072ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072ee:	b289      	uxth	r1, r1
 80072f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072f4:	4577      	cmp	r7, lr
 80072f6:	f849 1b04 	str.w	r1, [r9], #4
 80072fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072fe:	d8e2      	bhi.n	80072c6 <__multiply+0xb2>
 8007300:	9a01      	ldr	r2, [sp, #4]
 8007302:	f845 c002 	str.w	ip, [r5, r2]
 8007306:	9a03      	ldr	r2, [sp, #12]
 8007308:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800730c:	3304      	adds	r3, #4
 800730e:	f1b9 0f00 	cmp.w	r9, #0
 8007312:	d021      	beq.n	8007358 <__multiply+0x144>
 8007314:	6829      	ldr	r1, [r5, #0]
 8007316:	f104 0c14 	add.w	ip, r4, #20
 800731a:	46ae      	mov	lr, r5
 800731c:	f04f 0a00 	mov.w	sl, #0
 8007320:	f8bc b000 	ldrh.w	fp, [ip]
 8007324:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007328:	fb09 220b 	mla	r2, r9, fp, r2
 800732c:	4452      	add	r2, sl
 800732e:	b289      	uxth	r1, r1
 8007330:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007334:	f84e 1b04 	str.w	r1, [lr], #4
 8007338:	f85c 1b04 	ldr.w	r1, [ip], #4
 800733c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007340:	f8be 1000 	ldrh.w	r1, [lr]
 8007344:	fb09 110a 	mla	r1, r9, sl, r1
 8007348:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800734c:	4567      	cmp	r7, ip
 800734e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007352:	d8e5      	bhi.n	8007320 <__multiply+0x10c>
 8007354:	9a01      	ldr	r2, [sp, #4]
 8007356:	50a9      	str	r1, [r5, r2]
 8007358:	3504      	adds	r5, #4
 800735a:	e799      	b.n	8007290 <__multiply+0x7c>
 800735c:	3e01      	subs	r6, #1
 800735e:	e79b      	b.n	8007298 <__multiply+0x84>
 8007360:	08008310 	.word	0x08008310
 8007364:	08008321 	.word	0x08008321

08007368 <__pow5mult>:
 8007368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800736c:	4615      	mov	r5, r2
 800736e:	f012 0203 	ands.w	r2, r2, #3
 8007372:	4606      	mov	r6, r0
 8007374:	460f      	mov	r7, r1
 8007376:	d007      	beq.n	8007388 <__pow5mult+0x20>
 8007378:	4c25      	ldr	r4, [pc, #148]	; (8007410 <__pow5mult+0xa8>)
 800737a:	3a01      	subs	r2, #1
 800737c:	2300      	movs	r3, #0
 800737e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007382:	f7ff fe9d 	bl	80070c0 <__multadd>
 8007386:	4607      	mov	r7, r0
 8007388:	10ad      	asrs	r5, r5, #2
 800738a:	d03d      	beq.n	8007408 <__pow5mult+0xa0>
 800738c:	69f4      	ldr	r4, [r6, #28]
 800738e:	b97c      	cbnz	r4, 80073b0 <__pow5mult+0x48>
 8007390:	2010      	movs	r0, #16
 8007392:	f7ff fd7f 	bl	8006e94 <malloc>
 8007396:	4602      	mov	r2, r0
 8007398:	61f0      	str	r0, [r6, #28]
 800739a:	b928      	cbnz	r0, 80073a8 <__pow5mult+0x40>
 800739c:	4b1d      	ldr	r3, [pc, #116]	; (8007414 <__pow5mult+0xac>)
 800739e:	481e      	ldr	r0, [pc, #120]	; (8007418 <__pow5mult+0xb0>)
 80073a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80073a4:	f000 fbe4 	bl	8007b70 <__assert_func>
 80073a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073ac:	6004      	str	r4, [r0, #0]
 80073ae:	60c4      	str	r4, [r0, #12]
 80073b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80073b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073b8:	b94c      	cbnz	r4, 80073ce <__pow5mult+0x66>
 80073ba:	f240 2171 	movw	r1, #625	; 0x271
 80073be:	4630      	mov	r0, r6
 80073c0:	f7ff ff12 	bl	80071e8 <__i2b>
 80073c4:	2300      	movs	r3, #0
 80073c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80073ca:	4604      	mov	r4, r0
 80073cc:	6003      	str	r3, [r0, #0]
 80073ce:	f04f 0900 	mov.w	r9, #0
 80073d2:	07eb      	lsls	r3, r5, #31
 80073d4:	d50a      	bpl.n	80073ec <__pow5mult+0x84>
 80073d6:	4639      	mov	r1, r7
 80073d8:	4622      	mov	r2, r4
 80073da:	4630      	mov	r0, r6
 80073dc:	f7ff ff1a 	bl	8007214 <__multiply>
 80073e0:	4639      	mov	r1, r7
 80073e2:	4680      	mov	r8, r0
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7ff fe49 	bl	800707c <_Bfree>
 80073ea:	4647      	mov	r7, r8
 80073ec:	106d      	asrs	r5, r5, #1
 80073ee:	d00b      	beq.n	8007408 <__pow5mult+0xa0>
 80073f0:	6820      	ldr	r0, [r4, #0]
 80073f2:	b938      	cbnz	r0, 8007404 <__pow5mult+0x9c>
 80073f4:	4622      	mov	r2, r4
 80073f6:	4621      	mov	r1, r4
 80073f8:	4630      	mov	r0, r6
 80073fa:	f7ff ff0b 	bl	8007214 <__multiply>
 80073fe:	6020      	str	r0, [r4, #0]
 8007400:	f8c0 9000 	str.w	r9, [r0]
 8007404:	4604      	mov	r4, r0
 8007406:	e7e4      	b.n	80073d2 <__pow5mult+0x6a>
 8007408:	4638      	mov	r0, r7
 800740a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740e:	bf00      	nop
 8007410:	08008470 	.word	0x08008470
 8007414:	080082a1 	.word	0x080082a1
 8007418:	08008321 	.word	0x08008321

0800741c <__lshift>:
 800741c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007420:	460c      	mov	r4, r1
 8007422:	6849      	ldr	r1, [r1, #4]
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800742a:	68a3      	ldr	r3, [r4, #8]
 800742c:	4607      	mov	r7, r0
 800742e:	4691      	mov	r9, r2
 8007430:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007434:	f108 0601 	add.w	r6, r8, #1
 8007438:	42b3      	cmp	r3, r6
 800743a:	db0b      	blt.n	8007454 <__lshift+0x38>
 800743c:	4638      	mov	r0, r7
 800743e:	f7ff fddd 	bl	8006ffc <_Balloc>
 8007442:	4605      	mov	r5, r0
 8007444:	b948      	cbnz	r0, 800745a <__lshift+0x3e>
 8007446:	4602      	mov	r2, r0
 8007448:	4b28      	ldr	r3, [pc, #160]	; (80074ec <__lshift+0xd0>)
 800744a:	4829      	ldr	r0, [pc, #164]	; (80074f0 <__lshift+0xd4>)
 800744c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007450:	f000 fb8e 	bl	8007b70 <__assert_func>
 8007454:	3101      	adds	r1, #1
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	e7ee      	b.n	8007438 <__lshift+0x1c>
 800745a:	2300      	movs	r3, #0
 800745c:	f100 0114 	add.w	r1, r0, #20
 8007460:	f100 0210 	add.w	r2, r0, #16
 8007464:	4618      	mov	r0, r3
 8007466:	4553      	cmp	r3, sl
 8007468:	db33      	blt.n	80074d2 <__lshift+0xb6>
 800746a:	6920      	ldr	r0, [r4, #16]
 800746c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007470:	f104 0314 	add.w	r3, r4, #20
 8007474:	f019 091f 	ands.w	r9, r9, #31
 8007478:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800747c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007480:	d02b      	beq.n	80074da <__lshift+0xbe>
 8007482:	f1c9 0e20 	rsb	lr, r9, #32
 8007486:	468a      	mov	sl, r1
 8007488:	2200      	movs	r2, #0
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	fa00 f009 	lsl.w	r0, r0, r9
 8007490:	4310      	orrs	r0, r2
 8007492:	f84a 0b04 	str.w	r0, [sl], #4
 8007496:	f853 2b04 	ldr.w	r2, [r3], #4
 800749a:	459c      	cmp	ip, r3
 800749c:	fa22 f20e 	lsr.w	r2, r2, lr
 80074a0:	d8f3      	bhi.n	800748a <__lshift+0x6e>
 80074a2:	ebac 0304 	sub.w	r3, ip, r4
 80074a6:	3b15      	subs	r3, #21
 80074a8:	f023 0303 	bic.w	r3, r3, #3
 80074ac:	3304      	adds	r3, #4
 80074ae:	f104 0015 	add.w	r0, r4, #21
 80074b2:	4584      	cmp	ip, r0
 80074b4:	bf38      	it	cc
 80074b6:	2304      	movcc	r3, #4
 80074b8:	50ca      	str	r2, [r1, r3]
 80074ba:	b10a      	cbz	r2, 80074c0 <__lshift+0xa4>
 80074bc:	f108 0602 	add.w	r6, r8, #2
 80074c0:	3e01      	subs	r6, #1
 80074c2:	4638      	mov	r0, r7
 80074c4:	612e      	str	r6, [r5, #16]
 80074c6:	4621      	mov	r1, r4
 80074c8:	f7ff fdd8 	bl	800707c <_Bfree>
 80074cc:	4628      	mov	r0, r5
 80074ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80074d6:	3301      	adds	r3, #1
 80074d8:	e7c5      	b.n	8007466 <__lshift+0x4a>
 80074da:	3904      	subs	r1, #4
 80074dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80074e4:	459c      	cmp	ip, r3
 80074e6:	d8f9      	bhi.n	80074dc <__lshift+0xc0>
 80074e8:	e7ea      	b.n	80074c0 <__lshift+0xa4>
 80074ea:	bf00      	nop
 80074ec:	08008310 	.word	0x08008310
 80074f0:	08008321 	.word	0x08008321

080074f4 <__mcmp>:
 80074f4:	b530      	push	{r4, r5, lr}
 80074f6:	6902      	ldr	r2, [r0, #16]
 80074f8:	690c      	ldr	r4, [r1, #16]
 80074fa:	1b12      	subs	r2, r2, r4
 80074fc:	d10e      	bne.n	800751c <__mcmp+0x28>
 80074fe:	f100 0314 	add.w	r3, r0, #20
 8007502:	3114      	adds	r1, #20
 8007504:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007508:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800750c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007510:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007514:	42a5      	cmp	r5, r4
 8007516:	d003      	beq.n	8007520 <__mcmp+0x2c>
 8007518:	d305      	bcc.n	8007526 <__mcmp+0x32>
 800751a:	2201      	movs	r2, #1
 800751c:	4610      	mov	r0, r2
 800751e:	bd30      	pop	{r4, r5, pc}
 8007520:	4283      	cmp	r3, r0
 8007522:	d3f3      	bcc.n	800750c <__mcmp+0x18>
 8007524:	e7fa      	b.n	800751c <__mcmp+0x28>
 8007526:	f04f 32ff 	mov.w	r2, #4294967295
 800752a:	e7f7      	b.n	800751c <__mcmp+0x28>

0800752c <__mdiff>:
 800752c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	460c      	mov	r4, r1
 8007532:	4606      	mov	r6, r0
 8007534:	4611      	mov	r1, r2
 8007536:	4620      	mov	r0, r4
 8007538:	4690      	mov	r8, r2
 800753a:	f7ff ffdb 	bl	80074f4 <__mcmp>
 800753e:	1e05      	subs	r5, r0, #0
 8007540:	d110      	bne.n	8007564 <__mdiff+0x38>
 8007542:	4629      	mov	r1, r5
 8007544:	4630      	mov	r0, r6
 8007546:	f7ff fd59 	bl	8006ffc <_Balloc>
 800754a:	b930      	cbnz	r0, 800755a <__mdiff+0x2e>
 800754c:	4b3a      	ldr	r3, [pc, #232]	; (8007638 <__mdiff+0x10c>)
 800754e:	4602      	mov	r2, r0
 8007550:	f240 2137 	movw	r1, #567	; 0x237
 8007554:	4839      	ldr	r0, [pc, #228]	; (800763c <__mdiff+0x110>)
 8007556:	f000 fb0b 	bl	8007b70 <__assert_func>
 800755a:	2301      	movs	r3, #1
 800755c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007564:	bfa4      	itt	ge
 8007566:	4643      	movge	r3, r8
 8007568:	46a0      	movge	r8, r4
 800756a:	4630      	mov	r0, r6
 800756c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007570:	bfa6      	itte	ge
 8007572:	461c      	movge	r4, r3
 8007574:	2500      	movge	r5, #0
 8007576:	2501      	movlt	r5, #1
 8007578:	f7ff fd40 	bl	8006ffc <_Balloc>
 800757c:	b920      	cbnz	r0, 8007588 <__mdiff+0x5c>
 800757e:	4b2e      	ldr	r3, [pc, #184]	; (8007638 <__mdiff+0x10c>)
 8007580:	4602      	mov	r2, r0
 8007582:	f240 2145 	movw	r1, #581	; 0x245
 8007586:	e7e5      	b.n	8007554 <__mdiff+0x28>
 8007588:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800758c:	6926      	ldr	r6, [r4, #16]
 800758e:	60c5      	str	r5, [r0, #12]
 8007590:	f104 0914 	add.w	r9, r4, #20
 8007594:	f108 0514 	add.w	r5, r8, #20
 8007598:	f100 0e14 	add.w	lr, r0, #20
 800759c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80075a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075a4:	f108 0210 	add.w	r2, r8, #16
 80075a8:	46f2      	mov	sl, lr
 80075aa:	2100      	movs	r1, #0
 80075ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80075b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075b4:	fa11 f88b 	uxtah	r8, r1, fp
 80075b8:	b299      	uxth	r1, r3
 80075ba:	0c1b      	lsrs	r3, r3, #16
 80075bc:	eba8 0801 	sub.w	r8, r8, r1
 80075c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075c8:	fa1f f888 	uxth.w	r8, r8
 80075cc:	1419      	asrs	r1, r3, #16
 80075ce:	454e      	cmp	r6, r9
 80075d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075d4:	f84a 3b04 	str.w	r3, [sl], #4
 80075d8:	d8e8      	bhi.n	80075ac <__mdiff+0x80>
 80075da:	1b33      	subs	r3, r6, r4
 80075dc:	3b15      	subs	r3, #21
 80075de:	f023 0303 	bic.w	r3, r3, #3
 80075e2:	3304      	adds	r3, #4
 80075e4:	3415      	adds	r4, #21
 80075e6:	42a6      	cmp	r6, r4
 80075e8:	bf38      	it	cc
 80075ea:	2304      	movcc	r3, #4
 80075ec:	441d      	add	r5, r3
 80075ee:	4473      	add	r3, lr
 80075f0:	469e      	mov	lr, r3
 80075f2:	462e      	mov	r6, r5
 80075f4:	4566      	cmp	r6, ip
 80075f6:	d30e      	bcc.n	8007616 <__mdiff+0xea>
 80075f8:	f10c 0203 	add.w	r2, ip, #3
 80075fc:	1b52      	subs	r2, r2, r5
 80075fe:	f022 0203 	bic.w	r2, r2, #3
 8007602:	3d03      	subs	r5, #3
 8007604:	45ac      	cmp	ip, r5
 8007606:	bf38      	it	cc
 8007608:	2200      	movcc	r2, #0
 800760a:	4413      	add	r3, r2
 800760c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007610:	b17a      	cbz	r2, 8007632 <__mdiff+0x106>
 8007612:	6107      	str	r7, [r0, #16]
 8007614:	e7a4      	b.n	8007560 <__mdiff+0x34>
 8007616:	f856 8b04 	ldr.w	r8, [r6], #4
 800761a:	fa11 f288 	uxtah	r2, r1, r8
 800761e:	1414      	asrs	r4, r2, #16
 8007620:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007624:	b292      	uxth	r2, r2
 8007626:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800762a:	f84e 2b04 	str.w	r2, [lr], #4
 800762e:	1421      	asrs	r1, r4, #16
 8007630:	e7e0      	b.n	80075f4 <__mdiff+0xc8>
 8007632:	3f01      	subs	r7, #1
 8007634:	e7ea      	b.n	800760c <__mdiff+0xe0>
 8007636:	bf00      	nop
 8007638:	08008310 	.word	0x08008310
 800763c:	08008321 	.word	0x08008321

08007640 <__d2b>:
 8007640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007644:	460f      	mov	r7, r1
 8007646:	2101      	movs	r1, #1
 8007648:	ec59 8b10 	vmov	r8, r9, d0
 800764c:	4616      	mov	r6, r2
 800764e:	f7ff fcd5 	bl	8006ffc <_Balloc>
 8007652:	4604      	mov	r4, r0
 8007654:	b930      	cbnz	r0, 8007664 <__d2b+0x24>
 8007656:	4602      	mov	r2, r0
 8007658:	4b24      	ldr	r3, [pc, #144]	; (80076ec <__d2b+0xac>)
 800765a:	4825      	ldr	r0, [pc, #148]	; (80076f0 <__d2b+0xb0>)
 800765c:	f240 310f 	movw	r1, #783	; 0x30f
 8007660:	f000 fa86 	bl	8007b70 <__assert_func>
 8007664:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800766c:	bb2d      	cbnz	r5, 80076ba <__d2b+0x7a>
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	f1b8 0300 	subs.w	r3, r8, #0
 8007674:	d026      	beq.n	80076c4 <__d2b+0x84>
 8007676:	4668      	mov	r0, sp
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	f7ff fd87 	bl	800718c <__lo0bits>
 800767e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007682:	b1e8      	cbz	r0, 80076c0 <__d2b+0x80>
 8007684:	f1c0 0320 	rsb	r3, r0, #32
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	430b      	orrs	r3, r1
 800768e:	40c2      	lsrs	r2, r0
 8007690:	6163      	str	r3, [r4, #20]
 8007692:	9201      	str	r2, [sp, #4]
 8007694:	9b01      	ldr	r3, [sp, #4]
 8007696:	61a3      	str	r3, [r4, #24]
 8007698:	2b00      	cmp	r3, #0
 800769a:	bf14      	ite	ne
 800769c:	2202      	movne	r2, #2
 800769e:	2201      	moveq	r2, #1
 80076a0:	6122      	str	r2, [r4, #16]
 80076a2:	b1bd      	cbz	r5, 80076d4 <__d2b+0x94>
 80076a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076a8:	4405      	add	r5, r0
 80076aa:	603d      	str	r5, [r7, #0]
 80076ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076b0:	6030      	str	r0, [r6, #0]
 80076b2:	4620      	mov	r0, r4
 80076b4:	b003      	add	sp, #12
 80076b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076be:	e7d6      	b.n	800766e <__d2b+0x2e>
 80076c0:	6161      	str	r1, [r4, #20]
 80076c2:	e7e7      	b.n	8007694 <__d2b+0x54>
 80076c4:	a801      	add	r0, sp, #4
 80076c6:	f7ff fd61 	bl	800718c <__lo0bits>
 80076ca:	9b01      	ldr	r3, [sp, #4]
 80076cc:	6163      	str	r3, [r4, #20]
 80076ce:	3020      	adds	r0, #32
 80076d0:	2201      	movs	r2, #1
 80076d2:	e7e5      	b.n	80076a0 <__d2b+0x60>
 80076d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076dc:	6038      	str	r0, [r7, #0]
 80076de:	6918      	ldr	r0, [r3, #16]
 80076e0:	f7ff fd34 	bl	800714c <__hi0bits>
 80076e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076e8:	e7e2      	b.n	80076b0 <__d2b+0x70>
 80076ea:	bf00      	nop
 80076ec:	08008310 	.word	0x08008310
 80076f0:	08008321 	.word	0x08008321

080076f4 <__ssputs_r>:
 80076f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	688e      	ldr	r6, [r1, #8]
 80076fa:	461f      	mov	r7, r3
 80076fc:	42be      	cmp	r6, r7
 80076fe:	680b      	ldr	r3, [r1, #0]
 8007700:	4682      	mov	sl, r0
 8007702:	460c      	mov	r4, r1
 8007704:	4690      	mov	r8, r2
 8007706:	d82c      	bhi.n	8007762 <__ssputs_r+0x6e>
 8007708:	898a      	ldrh	r2, [r1, #12]
 800770a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800770e:	d026      	beq.n	800775e <__ssputs_r+0x6a>
 8007710:	6965      	ldr	r5, [r4, #20]
 8007712:	6909      	ldr	r1, [r1, #16]
 8007714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007718:	eba3 0901 	sub.w	r9, r3, r1
 800771c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007720:	1c7b      	adds	r3, r7, #1
 8007722:	444b      	add	r3, r9
 8007724:	106d      	asrs	r5, r5, #1
 8007726:	429d      	cmp	r5, r3
 8007728:	bf38      	it	cc
 800772a:	461d      	movcc	r5, r3
 800772c:	0553      	lsls	r3, r2, #21
 800772e:	d527      	bpl.n	8007780 <__ssputs_r+0x8c>
 8007730:	4629      	mov	r1, r5
 8007732:	f7ff fbd7 	bl	8006ee4 <_malloc_r>
 8007736:	4606      	mov	r6, r0
 8007738:	b360      	cbz	r0, 8007794 <__ssputs_r+0xa0>
 800773a:	6921      	ldr	r1, [r4, #16]
 800773c:	464a      	mov	r2, r9
 800773e:	f000 fa09 	bl	8007b54 <memcpy>
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774c:	81a3      	strh	r3, [r4, #12]
 800774e:	6126      	str	r6, [r4, #16]
 8007750:	6165      	str	r5, [r4, #20]
 8007752:	444e      	add	r6, r9
 8007754:	eba5 0509 	sub.w	r5, r5, r9
 8007758:	6026      	str	r6, [r4, #0]
 800775a:	60a5      	str	r5, [r4, #8]
 800775c:	463e      	mov	r6, r7
 800775e:	42be      	cmp	r6, r7
 8007760:	d900      	bls.n	8007764 <__ssputs_r+0x70>
 8007762:	463e      	mov	r6, r7
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	4632      	mov	r2, r6
 8007768:	4641      	mov	r1, r8
 800776a:	f000 f9c9 	bl	8007b00 <memmove>
 800776e:	68a3      	ldr	r3, [r4, #8]
 8007770:	1b9b      	subs	r3, r3, r6
 8007772:	60a3      	str	r3, [r4, #8]
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	4433      	add	r3, r6
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	2000      	movs	r0, #0
 800777c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007780:	462a      	mov	r2, r5
 8007782:	f000 fa3b 	bl	8007bfc <_realloc_r>
 8007786:	4606      	mov	r6, r0
 8007788:	2800      	cmp	r0, #0
 800778a:	d1e0      	bne.n	800774e <__ssputs_r+0x5a>
 800778c:	6921      	ldr	r1, [r4, #16]
 800778e:	4650      	mov	r0, sl
 8007790:	f7ff fb34 	bl	8006dfc <_free_r>
 8007794:	230c      	movs	r3, #12
 8007796:	f8ca 3000 	str.w	r3, [sl]
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077a0:	81a3      	strh	r3, [r4, #12]
 80077a2:	f04f 30ff 	mov.w	r0, #4294967295
 80077a6:	e7e9      	b.n	800777c <__ssputs_r+0x88>

080077a8 <_svfiprintf_r>:
 80077a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	4698      	mov	r8, r3
 80077ae:	898b      	ldrh	r3, [r1, #12]
 80077b0:	061b      	lsls	r3, r3, #24
 80077b2:	b09d      	sub	sp, #116	; 0x74
 80077b4:	4607      	mov	r7, r0
 80077b6:	460d      	mov	r5, r1
 80077b8:	4614      	mov	r4, r2
 80077ba:	d50e      	bpl.n	80077da <_svfiprintf_r+0x32>
 80077bc:	690b      	ldr	r3, [r1, #16]
 80077be:	b963      	cbnz	r3, 80077da <_svfiprintf_r+0x32>
 80077c0:	2140      	movs	r1, #64	; 0x40
 80077c2:	f7ff fb8f 	bl	8006ee4 <_malloc_r>
 80077c6:	6028      	str	r0, [r5, #0]
 80077c8:	6128      	str	r0, [r5, #16]
 80077ca:	b920      	cbnz	r0, 80077d6 <_svfiprintf_r+0x2e>
 80077cc:	230c      	movs	r3, #12
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
 80077d4:	e0d0      	b.n	8007978 <_svfiprintf_r+0x1d0>
 80077d6:	2340      	movs	r3, #64	; 0x40
 80077d8:	616b      	str	r3, [r5, #20]
 80077da:	2300      	movs	r3, #0
 80077dc:	9309      	str	r3, [sp, #36]	; 0x24
 80077de:	2320      	movs	r3, #32
 80077e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80077e8:	2330      	movs	r3, #48	; 0x30
 80077ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007990 <_svfiprintf_r+0x1e8>
 80077ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077f2:	f04f 0901 	mov.w	r9, #1
 80077f6:	4623      	mov	r3, r4
 80077f8:	469a      	mov	sl, r3
 80077fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077fe:	b10a      	cbz	r2, 8007804 <_svfiprintf_r+0x5c>
 8007800:	2a25      	cmp	r2, #37	; 0x25
 8007802:	d1f9      	bne.n	80077f8 <_svfiprintf_r+0x50>
 8007804:	ebba 0b04 	subs.w	fp, sl, r4
 8007808:	d00b      	beq.n	8007822 <_svfiprintf_r+0x7a>
 800780a:	465b      	mov	r3, fp
 800780c:	4622      	mov	r2, r4
 800780e:	4629      	mov	r1, r5
 8007810:	4638      	mov	r0, r7
 8007812:	f7ff ff6f 	bl	80076f4 <__ssputs_r>
 8007816:	3001      	adds	r0, #1
 8007818:	f000 80a9 	beq.w	800796e <_svfiprintf_r+0x1c6>
 800781c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800781e:	445a      	add	r2, fp
 8007820:	9209      	str	r2, [sp, #36]	; 0x24
 8007822:	f89a 3000 	ldrb.w	r3, [sl]
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 80a1 	beq.w	800796e <_svfiprintf_r+0x1c6>
 800782c:	2300      	movs	r3, #0
 800782e:	f04f 32ff 	mov.w	r2, #4294967295
 8007832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007836:	f10a 0a01 	add.w	sl, sl, #1
 800783a:	9304      	str	r3, [sp, #16]
 800783c:	9307      	str	r3, [sp, #28]
 800783e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007842:	931a      	str	r3, [sp, #104]	; 0x68
 8007844:	4654      	mov	r4, sl
 8007846:	2205      	movs	r2, #5
 8007848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800784c:	4850      	ldr	r0, [pc, #320]	; (8007990 <_svfiprintf_r+0x1e8>)
 800784e:	f7f8 fcbf 	bl	80001d0 <memchr>
 8007852:	9a04      	ldr	r2, [sp, #16]
 8007854:	b9d8      	cbnz	r0, 800788e <_svfiprintf_r+0xe6>
 8007856:	06d0      	lsls	r0, r2, #27
 8007858:	bf44      	itt	mi
 800785a:	2320      	movmi	r3, #32
 800785c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007860:	0711      	lsls	r1, r2, #28
 8007862:	bf44      	itt	mi
 8007864:	232b      	movmi	r3, #43	; 0x2b
 8007866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800786a:	f89a 3000 	ldrb.w	r3, [sl]
 800786e:	2b2a      	cmp	r3, #42	; 0x2a
 8007870:	d015      	beq.n	800789e <_svfiprintf_r+0xf6>
 8007872:	9a07      	ldr	r2, [sp, #28]
 8007874:	4654      	mov	r4, sl
 8007876:	2000      	movs	r0, #0
 8007878:	f04f 0c0a 	mov.w	ip, #10
 800787c:	4621      	mov	r1, r4
 800787e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007882:	3b30      	subs	r3, #48	; 0x30
 8007884:	2b09      	cmp	r3, #9
 8007886:	d94d      	bls.n	8007924 <_svfiprintf_r+0x17c>
 8007888:	b1b0      	cbz	r0, 80078b8 <_svfiprintf_r+0x110>
 800788a:	9207      	str	r2, [sp, #28]
 800788c:	e014      	b.n	80078b8 <_svfiprintf_r+0x110>
 800788e:	eba0 0308 	sub.w	r3, r0, r8
 8007892:	fa09 f303 	lsl.w	r3, r9, r3
 8007896:	4313      	orrs	r3, r2
 8007898:	9304      	str	r3, [sp, #16]
 800789a:	46a2      	mov	sl, r4
 800789c:	e7d2      	b.n	8007844 <_svfiprintf_r+0x9c>
 800789e:	9b03      	ldr	r3, [sp, #12]
 80078a0:	1d19      	adds	r1, r3, #4
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	9103      	str	r1, [sp, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	bfbb      	ittet	lt
 80078aa:	425b      	neglt	r3, r3
 80078ac:	f042 0202 	orrlt.w	r2, r2, #2
 80078b0:	9307      	strge	r3, [sp, #28]
 80078b2:	9307      	strlt	r3, [sp, #28]
 80078b4:	bfb8      	it	lt
 80078b6:	9204      	strlt	r2, [sp, #16]
 80078b8:	7823      	ldrb	r3, [r4, #0]
 80078ba:	2b2e      	cmp	r3, #46	; 0x2e
 80078bc:	d10c      	bne.n	80078d8 <_svfiprintf_r+0x130>
 80078be:	7863      	ldrb	r3, [r4, #1]
 80078c0:	2b2a      	cmp	r3, #42	; 0x2a
 80078c2:	d134      	bne.n	800792e <_svfiprintf_r+0x186>
 80078c4:	9b03      	ldr	r3, [sp, #12]
 80078c6:	1d1a      	adds	r2, r3, #4
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	9203      	str	r2, [sp, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bfb8      	it	lt
 80078d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80078d4:	3402      	adds	r4, #2
 80078d6:	9305      	str	r3, [sp, #20]
 80078d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80079a0 <_svfiprintf_r+0x1f8>
 80078dc:	7821      	ldrb	r1, [r4, #0]
 80078de:	2203      	movs	r2, #3
 80078e0:	4650      	mov	r0, sl
 80078e2:	f7f8 fc75 	bl	80001d0 <memchr>
 80078e6:	b138      	cbz	r0, 80078f8 <_svfiprintf_r+0x150>
 80078e8:	9b04      	ldr	r3, [sp, #16]
 80078ea:	eba0 000a 	sub.w	r0, r0, sl
 80078ee:	2240      	movs	r2, #64	; 0x40
 80078f0:	4082      	lsls	r2, r0
 80078f2:	4313      	orrs	r3, r2
 80078f4:	3401      	adds	r4, #1
 80078f6:	9304      	str	r3, [sp, #16]
 80078f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078fc:	4825      	ldr	r0, [pc, #148]	; (8007994 <_svfiprintf_r+0x1ec>)
 80078fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007902:	2206      	movs	r2, #6
 8007904:	f7f8 fc64 	bl	80001d0 <memchr>
 8007908:	2800      	cmp	r0, #0
 800790a:	d038      	beq.n	800797e <_svfiprintf_r+0x1d6>
 800790c:	4b22      	ldr	r3, [pc, #136]	; (8007998 <_svfiprintf_r+0x1f0>)
 800790e:	bb1b      	cbnz	r3, 8007958 <_svfiprintf_r+0x1b0>
 8007910:	9b03      	ldr	r3, [sp, #12]
 8007912:	3307      	adds	r3, #7
 8007914:	f023 0307 	bic.w	r3, r3, #7
 8007918:	3308      	adds	r3, #8
 800791a:	9303      	str	r3, [sp, #12]
 800791c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800791e:	4433      	add	r3, r6
 8007920:	9309      	str	r3, [sp, #36]	; 0x24
 8007922:	e768      	b.n	80077f6 <_svfiprintf_r+0x4e>
 8007924:	fb0c 3202 	mla	r2, ip, r2, r3
 8007928:	460c      	mov	r4, r1
 800792a:	2001      	movs	r0, #1
 800792c:	e7a6      	b.n	800787c <_svfiprintf_r+0xd4>
 800792e:	2300      	movs	r3, #0
 8007930:	3401      	adds	r4, #1
 8007932:	9305      	str	r3, [sp, #20]
 8007934:	4619      	mov	r1, r3
 8007936:	f04f 0c0a 	mov.w	ip, #10
 800793a:	4620      	mov	r0, r4
 800793c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007940:	3a30      	subs	r2, #48	; 0x30
 8007942:	2a09      	cmp	r2, #9
 8007944:	d903      	bls.n	800794e <_svfiprintf_r+0x1a6>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0c6      	beq.n	80078d8 <_svfiprintf_r+0x130>
 800794a:	9105      	str	r1, [sp, #20]
 800794c:	e7c4      	b.n	80078d8 <_svfiprintf_r+0x130>
 800794e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007952:	4604      	mov	r4, r0
 8007954:	2301      	movs	r3, #1
 8007956:	e7f0      	b.n	800793a <_svfiprintf_r+0x192>
 8007958:	ab03      	add	r3, sp, #12
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	462a      	mov	r2, r5
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <_svfiprintf_r+0x1f4>)
 8007960:	a904      	add	r1, sp, #16
 8007962:	4638      	mov	r0, r7
 8007964:	f7fd fe64 	bl	8005630 <_printf_float>
 8007968:	1c42      	adds	r2, r0, #1
 800796a:	4606      	mov	r6, r0
 800796c:	d1d6      	bne.n	800791c <_svfiprintf_r+0x174>
 800796e:	89ab      	ldrh	r3, [r5, #12]
 8007970:	065b      	lsls	r3, r3, #25
 8007972:	f53f af2d 	bmi.w	80077d0 <_svfiprintf_r+0x28>
 8007976:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007978:	b01d      	add	sp, #116	; 0x74
 800797a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797e:	ab03      	add	r3, sp, #12
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	462a      	mov	r2, r5
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <_svfiprintf_r+0x1f4>)
 8007986:	a904      	add	r1, sp, #16
 8007988:	4638      	mov	r0, r7
 800798a:	f7fe f8f5 	bl	8005b78 <_printf_i>
 800798e:	e7eb      	b.n	8007968 <_svfiprintf_r+0x1c0>
 8007990:	0800847c 	.word	0x0800847c
 8007994:	08008486 	.word	0x08008486
 8007998:	08005631 	.word	0x08005631
 800799c:	080076f5 	.word	0x080076f5
 80079a0:	08008482 	.word	0x08008482

080079a4 <__sflush_r>:
 80079a4:	898a      	ldrh	r2, [r1, #12]
 80079a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079aa:	4605      	mov	r5, r0
 80079ac:	0710      	lsls	r0, r2, #28
 80079ae:	460c      	mov	r4, r1
 80079b0:	d458      	bmi.n	8007a64 <__sflush_r+0xc0>
 80079b2:	684b      	ldr	r3, [r1, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	dc05      	bgt.n	80079c4 <__sflush_r+0x20>
 80079b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	dc02      	bgt.n	80079c4 <__sflush_r+0x20>
 80079be:	2000      	movs	r0, #0
 80079c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079c6:	2e00      	cmp	r6, #0
 80079c8:	d0f9      	beq.n	80079be <__sflush_r+0x1a>
 80079ca:	2300      	movs	r3, #0
 80079cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079d0:	682f      	ldr	r7, [r5, #0]
 80079d2:	6a21      	ldr	r1, [r4, #32]
 80079d4:	602b      	str	r3, [r5, #0]
 80079d6:	d032      	beq.n	8007a3e <__sflush_r+0x9a>
 80079d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	075a      	lsls	r2, r3, #29
 80079de:	d505      	bpl.n	80079ec <__sflush_r+0x48>
 80079e0:	6863      	ldr	r3, [r4, #4]
 80079e2:	1ac0      	subs	r0, r0, r3
 80079e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079e6:	b10b      	cbz	r3, 80079ec <__sflush_r+0x48>
 80079e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079ea:	1ac0      	subs	r0, r0, r3
 80079ec:	2300      	movs	r3, #0
 80079ee:	4602      	mov	r2, r0
 80079f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079f2:	6a21      	ldr	r1, [r4, #32]
 80079f4:	4628      	mov	r0, r5
 80079f6:	47b0      	blx	r6
 80079f8:	1c43      	adds	r3, r0, #1
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	d106      	bne.n	8007a0c <__sflush_r+0x68>
 80079fe:	6829      	ldr	r1, [r5, #0]
 8007a00:	291d      	cmp	r1, #29
 8007a02:	d82b      	bhi.n	8007a5c <__sflush_r+0xb8>
 8007a04:	4a29      	ldr	r2, [pc, #164]	; (8007aac <__sflush_r+0x108>)
 8007a06:	410a      	asrs	r2, r1
 8007a08:	07d6      	lsls	r6, r2, #31
 8007a0a:	d427      	bmi.n	8007a5c <__sflush_r+0xb8>
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	6062      	str	r2, [r4, #4]
 8007a10:	04d9      	lsls	r1, r3, #19
 8007a12:	6922      	ldr	r2, [r4, #16]
 8007a14:	6022      	str	r2, [r4, #0]
 8007a16:	d504      	bpl.n	8007a22 <__sflush_r+0x7e>
 8007a18:	1c42      	adds	r2, r0, #1
 8007a1a:	d101      	bne.n	8007a20 <__sflush_r+0x7c>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b903      	cbnz	r3, 8007a22 <__sflush_r+0x7e>
 8007a20:	6560      	str	r0, [r4, #84]	; 0x54
 8007a22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a24:	602f      	str	r7, [r5, #0]
 8007a26:	2900      	cmp	r1, #0
 8007a28:	d0c9      	beq.n	80079be <__sflush_r+0x1a>
 8007a2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a2e:	4299      	cmp	r1, r3
 8007a30:	d002      	beq.n	8007a38 <__sflush_r+0x94>
 8007a32:	4628      	mov	r0, r5
 8007a34:	f7ff f9e2 	bl	8006dfc <_free_r>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	6360      	str	r0, [r4, #52]	; 0x34
 8007a3c:	e7c0      	b.n	80079c0 <__sflush_r+0x1c>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4628      	mov	r0, r5
 8007a42:	47b0      	blx	r6
 8007a44:	1c41      	adds	r1, r0, #1
 8007a46:	d1c8      	bne.n	80079da <__sflush_r+0x36>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d0c5      	beq.n	80079da <__sflush_r+0x36>
 8007a4e:	2b1d      	cmp	r3, #29
 8007a50:	d001      	beq.n	8007a56 <__sflush_r+0xb2>
 8007a52:	2b16      	cmp	r3, #22
 8007a54:	d101      	bne.n	8007a5a <__sflush_r+0xb6>
 8007a56:	602f      	str	r7, [r5, #0]
 8007a58:	e7b1      	b.n	80079be <__sflush_r+0x1a>
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a60:	81a3      	strh	r3, [r4, #12]
 8007a62:	e7ad      	b.n	80079c0 <__sflush_r+0x1c>
 8007a64:	690f      	ldr	r7, [r1, #16]
 8007a66:	2f00      	cmp	r7, #0
 8007a68:	d0a9      	beq.n	80079be <__sflush_r+0x1a>
 8007a6a:	0793      	lsls	r3, r2, #30
 8007a6c:	680e      	ldr	r6, [r1, #0]
 8007a6e:	bf08      	it	eq
 8007a70:	694b      	ldreq	r3, [r1, #20]
 8007a72:	600f      	str	r7, [r1, #0]
 8007a74:	bf18      	it	ne
 8007a76:	2300      	movne	r3, #0
 8007a78:	eba6 0807 	sub.w	r8, r6, r7
 8007a7c:	608b      	str	r3, [r1, #8]
 8007a7e:	f1b8 0f00 	cmp.w	r8, #0
 8007a82:	dd9c      	ble.n	80079be <__sflush_r+0x1a>
 8007a84:	6a21      	ldr	r1, [r4, #32]
 8007a86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a88:	4643      	mov	r3, r8
 8007a8a:	463a      	mov	r2, r7
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	47b0      	blx	r6
 8007a90:	2800      	cmp	r0, #0
 8007a92:	dc06      	bgt.n	8007aa2 <__sflush_r+0xfe>
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a9a:	81a3      	strh	r3, [r4, #12]
 8007a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa0:	e78e      	b.n	80079c0 <__sflush_r+0x1c>
 8007aa2:	4407      	add	r7, r0
 8007aa4:	eba8 0800 	sub.w	r8, r8, r0
 8007aa8:	e7e9      	b.n	8007a7e <__sflush_r+0xda>
 8007aaa:	bf00      	nop
 8007aac:	dfbffffe 	.word	0xdfbffffe

08007ab0 <_fflush_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	690b      	ldr	r3, [r1, #16]
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	b913      	cbnz	r3, 8007ac0 <_fflush_r+0x10>
 8007aba:	2500      	movs	r5, #0
 8007abc:	4628      	mov	r0, r5
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	b118      	cbz	r0, 8007aca <_fflush_r+0x1a>
 8007ac2:	6a03      	ldr	r3, [r0, #32]
 8007ac4:	b90b      	cbnz	r3, 8007aca <_fflush_r+0x1a>
 8007ac6:	f7fe fa05 	bl	8005ed4 <__sinit>
 8007aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0f3      	beq.n	8007aba <_fflush_r+0xa>
 8007ad2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ad4:	07d0      	lsls	r0, r2, #31
 8007ad6:	d404      	bmi.n	8007ae2 <_fflush_r+0x32>
 8007ad8:	0599      	lsls	r1, r3, #22
 8007ada:	d402      	bmi.n	8007ae2 <_fflush_r+0x32>
 8007adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ade:	f7fe fb10 	bl	8006102 <__retarget_lock_acquire_recursive>
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	f7ff ff5d 	bl	80079a4 <__sflush_r>
 8007aea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aec:	07da      	lsls	r2, r3, #31
 8007aee:	4605      	mov	r5, r0
 8007af0:	d4e4      	bmi.n	8007abc <_fflush_r+0xc>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	059b      	lsls	r3, r3, #22
 8007af6:	d4e1      	bmi.n	8007abc <_fflush_r+0xc>
 8007af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007afa:	f7fe fb03 	bl	8006104 <__retarget_lock_release_recursive>
 8007afe:	e7dd      	b.n	8007abc <_fflush_r+0xc>

08007b00 <memmove>:
 8007b00:	4288      	cmp	r0, r1
 8007b02:	b510      	push	{r4, lr}
 8007b04:	eb01 0402 	add.w	r4, r1, r2
 8007b08:	d902      	bls.n	8007b10 <memmove+0x10>
 8007b0a:	4284      	cmp	r4, r0
 8007b0c:	4623      	mov	r3, r4
 8007b0e:	d807      	bhi.n	8007b20 <memmove+0x20>
 8007b10:	1e43      	subs	r3, r0, #1
 8007b12:	42a1      	cmp	r1, r4
 8007b14:	d008      	beq.n	8007b28 <memmove+0x28>
 8007b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b1e:	e7f8      	b.n	8007b12 <memmove+0x12>
 8007b20:	4402      	add	r2, r0
 8007b22:	4601      	mov	r1, r0
 8007b24:	428a      	cmp	r2, r1
 8007b26:	d100      	bne.n	8007b2a <memmove+0x2a>
 8007b28:	bd10      	pop	{r4, pc}
 8007b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b32:	e7f7      	b.n	8007b24 <memmove+0x24>

08007b34 <_sbrk_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4d06      	ldr	r5, [pc, #24]	; (8007b50 <_sbrk_r+0x1c>)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	602b      	str	r3, [r5, #0]
 8007b40:	f7f9 ff6c 	bl	8001a1c <_sbrk>
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d102      	bne.n	8007b4e <_sbrk_r+0x1a>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	b103      	cbz	r3, 8007b4e <_sbrk_r+0x1a>
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	20000480 	.word	0x20000480

08007b54 <memcpy>:
 8007b54:	440a      	add	r2, r1
 8007b56:	4291      	cmp	r1, r2
 8007b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b5c:	d100      	bne.n	8007b60 <memcpy+0xc>
 8007b5e:	4770      	bx	lr
 8007b60:	b510      	push	{r4, lr}
 8007b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b6a:	4291      	cmp	r1, r2
 8007b6c:	d1f9      	bne.n	8007b62 <memcpy+0xe>
 8007b6e:	bd10      	pop	{r4, pc}

08007b70 <__assert_func>:
 8007b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b72:	4614      	mov	r4, r2
 8007b74:	461a      	mov	r2, r3
 8007b76:	4b09      	ldr	r3, [pc, #36]	; (8007b9c <__assert_func+0x2c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	68d8      	ldr	r0, [r3, #12]
 8007b7e:	b14c      	cbz	r4, 8007b94 <__assert_func+0x24>
 8007b80:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <__assert_func+0x30>)
 8007b82:	9100      	str	r1, [sp, #0]
 8007b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b88:	4906      	ldr	r1, [pc, #24]	; (8007ba4 <__assert_func+0x34>)
 8007b8a:	462b      	mov	r3, r5
 8007b8c:	f000 f872 	bl	8007c74 <fiprintf>
 8007b90:	f000 f882 	bl	8007c98 <abort>
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <__assert_func+0x38>)
 8007b96:	461c      	mov	r4, r3
 8007b98:	e7f3      	b.n	8007b82 <__assert_func+0x12>
 8007b9a:	bf00      	nop
 8007b9c:	20000064 	.word	0x20000064
 8007ba0:	08008497 	.word	0x08008497
 8007ba4:	080084a4 	.word	0x080084a4
 8007ba8:	080084d2 	.word	0x080084d2

08007bac <_calloc_r>:
 8007bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bae:	fba1 2402 	umull	r2, r4, r1, r2
 8007bb2:	b94c      	cbnz	r4, 8007bc8 <_calloc_r+0x1c>
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	9201      	str	r2, [sp, #4]
 8007bb8:	f7ff f994 	bl	8006ee4 <_malloc_r>
 8007bbc:	9a01      	ldr	r2, [sp, #4]
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	b930      	cbnz	r0, 8007bd0 <_calloc_r+0x24>
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	b003      	add	sp, #12
 8007bc6:	bd30      	pop	{r4, r5, pc}
 8007bc8:	220c      	movs	r2, #12
 8007bca:	6002      	str	r2, [r0, #0]
 8007bcc:	2500      	movs	r5, #0
 8007bce:	e7f8      	b.n	8007bc2 <_calloc_r+0x16>
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	f7fe fa18 	bl	8006006 <memset>
 8007bd6:	e7f4      	b.n	8007bc2 <_calloc_r+0x16>

08007bd8 <__ascii_mbtowc>:
 8007bd8:	b082      	sub	sp, #8
 8007bda:	b901      	cbnz	r1, 8007bde <__ascii_mbtowc+0x6>
 8007bdc:	a901      	add	r1, sp, #4
 8007bde:	b142      	cbz	r2, 8007bf2 <__ascii_mbtowc+0x1a>
 8007be0:	b14b      	cbz	r3, 8007bf6 <__ascii_mbtowc+0x1e>
 8007be2:	7813      	ldrb	r3, [r2, #0]
 8007be4:	600b      	str	r3, [r1, #0]
 8007be6:	7812      	ldrb	r2, [r2, #0]
 8007be8:	1e10      	subs	r0, r2, #0
 8007bea:	bf18      	it	ne
 8007bec:	2001      	movne	r0, #1
 8007bee:	b002      	add	sp, #8
 8007bf0:	4770      	bx	lr
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	e7fb      	b.n	8007bee <__ascii_mbtowc+0x16>
 8007bf6:	f06f 0001 	mvn.w	r0, #1
 8007bfa:	e7f8      	b.n	8007bee <__ascii_mbtowc+0x16>

08007bfc <_realloc_r>:
 8007bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c00:	4680      	mov	r8, r0
 8007c02:	4614      	mov	r4, r2
 8007c04:	460e      	mov	r6, r1
 8007c06:	b921      	cbnz	r1, 8007c12 <_realloc_r+0x16>
 8007c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	f7ff b969 	b.w	8006ee4 <_malloc_r>
 8007c12:	b92a      	cbnz	r2, 8007c20 <_realloc_r+0x24>
 8007c14:	f7ff f8f2 	bl	8006dfc <_free_r>
 8007c18:	4625      	mov	r5, r4
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c20:	f000 f841 	bl	8007ca6 <_malloc_usable_size_r>
 8007c24:	4284      	cmp	r4, r0
 8007c26:	4607      	mov	r7, r0
 8007c28:	d802      	bhi.n	8007c30 <_realloc_r+0x34>
 8007c2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c2e:	d812      	bhi.n	8007c56 <_realloc_r+0x5a>
 8007c30:	4621      	mov	r1, r4
 8007c32:	4640      	mov	r0, r8
 8007c34:	f7ff f956 	bl	8006ee4 <_malloc_r>
 8007c38:	4605      	mov	r5, r0
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d0ed      	beq.n	8007c1a <_realloc_r+0x1e>
 8007c3e:	42bc      	cmp	r4, r7
 8007c40:	4622      	mov	r2, r4
 8007c42:	4631      	mov	r1, r6
 8007c44:	bf28      	it	cs
 8007c46:	463a      	movcs	r2, r7
 8007c48:	f7ff ff84 	bl	8007b54 <memcpy>
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4640      	mov	r0, r8
 8007c50:	f7ff f8d4 	bl	8006dfc <_free_r>
 8007c54:	e7e1      	b.n	8007c1a <_realloc_r+0x1e>
 8007c56:	4635      	mov	r5, r6
 8007c58:	e7df      	b.n	8007c1a <_realloc_r+0x1e>

08007c5a <__ascii_wctomb>:
 8007c5a:	b149      	cbz	r1, 8007c70 <__ascii_wctomb+0x16>
 8007c5c:	2aff      	cmp	r2, #255	; 0xff
 8007c5e:	bf85      	ittet	hi
 8007c60:	238a      	movhi	r3, #138	; 0x8a
 8007c62:	6003      	strhi	r3, [r0, #0]
 8007c64:	700a      	strbls	r2, [r1, #0]
 8007c66:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c6a:	bf98      	it	ls
 8007c6c:	2001      	movls	r0, #1
 8007c6e:	4770      	bx	lr
 8007c70:	4608      	mov	r0, r1
 8007c72:	4770      	bx	lr

08007c74 <fiprintf>:
 8007c74:	b40e      	push	{r1, r2, r3}
 8007c76:	b503      	push	{r0, r1, lr}
 8007c78:	4601      	mov	r1, r0
 8007c7a:	ab03      	add	r3, sp, #12
 8007c7c:	4805      	ldr	r0, [pc, #20]	; (8007c94 <fiprintf+0x20>)
 8007c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c82:	6800      	ldr	r0, [r0, #0]
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	f000 f83f 	bl	8007d08 <_vfiprintf_r>
 8007c8a:	b002      	add	sp, #8
 8007c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c90:	b003      	add	sp, #12
 8007c92:	4770      	bx	lr
 8007c94:	20000064 	.word	0x20000064

08007c98 <abort>:
 8007c98:	b508      	push	{r3, lr}
 8007c9a:	2006      	movs	r0, #6
 8007c9c:	f000 fa0c 	bl	80080b8 <raise>
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	f7f9 fe43 	bl	800192c <_exit>

08007ca6 <_malloc_usable_size_r>:
 8007ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007caa:	1f18      	subs	r0, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bfbc      	itt	lt
 8007cb0:	580b      	ldrlt	r3, [r1, r0]
 8007cb2:	18c0      	addlt	r0, r0, r3
 8007cb4:	4770      	bx	lr

08007cb6 <__sfputc_r>:
 8007cb6:	6893      	ldr	r3, [r2, #8]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	b410      	push	{r4}
 8007cbe:	6093      	str	r3, [r2, #8]
 8007cc0:	da08      	bge.n	8007cd4 <__sfputc_r+0x1e>
 8007cc2:	6994      	ldr	r4, [r2, #24]
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	db01      	blt.n	8007ccc <__sfputc_r+0x16>
 8007cc8:	290a      	cmp	r1, #10
 8007cca:	d103      	bne.n	8007cd4 <__sfputc_r+0x1e>
 8007ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cd0:	f000 b934 	b.w	8007f3c <__swbuf_r>
 8007cd4:	6813      	ldr	r3, [r2, #0]
 8007cd6:	1c58      	adds	r0, r3, #1
 8007cd8:	6010      	str	r0, [r2, #0]
 8007cda:	7019      	strb	r1, [r3, #0]
 8007cdc:	4608      	mov	r0, r1
 8007cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <__sfputs_r>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	460f      	mov	r7, r1
 8007cea:	4614      	mov	r4, r2
 8007cec:	18d5      	adds	r5, r2, r3
 8007cee:	42ac      	cmp	r4, r5
 8007cf0:	d101      	bne.n	8007cf6 <__sfputs_r+0x12>
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	e007      	b.n	8007d06 <__sfputs_r+0x22>
 8007cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cfa:	463a      	mov	r2, r7
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f7ff ffda 	bl	8007cb6 <__sfputc_r>
 8007d02:	1c43      	adds	r3, r0, #1
 8007d04:	d1f3      	bne.n	8007cee <__sfputs_r+0xa>
 8007d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d08 <_vfiprintf_r>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	460d      	mov	r5, r1
 8007d0e:	b09d      	sub	sp, #116	; 0x74
 8007d10:	4614      	mov	r4, r2
 8007d12:	4698      	mov	r8, r3
 8007d14:	4606      	mov	r6, r0
 8007d16:	b118      	cbz	r0, 8007d20 <_vfiprintf_r+0x18>
 8007d18:	6a03      	ldr	r3, [r0, #32]
 8007d1a:	b90b      	cbnz	r3, 8007d20 <_vfiprintf_r+0x18>
 8007d1c:	f7fe f8da 	bl	8005ed4 <__sinit>
 8007d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d22:	07d9      	lsls	r1, r3, #31
 8007d24:	d405      	bmi.n	8007d32 <_vfiprintf_r+0x2a>
 8007d26:	89ab      	ldrh	r3, [r5, #12]
 8007d28:	059a      	lsls	r2, r3, #22
 8007d2a:	d402      	bmi.n	8007d32 <_vfiprintf_r+0x2a>
 8007d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d2e:	f7fe f9e8 	bl	8006102 <__retarget_lock_acquire_recursive>
 8007d32:	89ab      	ldrh	r3, [r5, #12]
 8007d34:	071b      	lsls	r3, r3, #28
 8007d36:	d501      	bpl.n	8007d3c <_vfiprintf_r+0x34>
 8007d38:	692b      	ldr	r3, [r5, #16]
 8007d3a:	b99b      	cbnz	r3, 8007d64 <_vfiprintf_r+0x5c>
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f000 f93a 	bl	8007fb8 <__swsetup_r>
 8007d44:	b170      	cbz	r0, 8007d64 <_vfiprintf_r+0x5c>
 8007d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d48:	07dc      	lsls	r4, r3, #31
 8007d4a:	d504      	bpl.n	8007d56 <_vfiprintf_r+0x4e>
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	b01d      	add	sp, #116	; 0x74
 8007d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d56:	89ab      	ldrh	r3, [r5, #12]
 8007d58:	0598      	lsls	r0, r3, #22
 8007d5a:	d4f7      	bmi.n	8007d4c <_vfiprintf_r+0x44>
 8007d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d5e:	f7fe f9d1 	bl	8006104 <__retarget_lock_release_recursive>
 8007d62:	e7f3      	b.n	8007d4c <_vfiprintf_r+0x44>
 8007d64:	2300      	movs	r3, #0
 8007d66:	9309      	str	r3, [sp, #36]	; 0x24
 8007d68:	2320      	movs	r3, #32
 8007d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d72:	2330      	movs	r3, #48	; 0x30
 8007d74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007f28 <_vfiprintf_r+0x220>
 8007d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d7c:	f04f 0901 	mov.w	r9, #1
 8007d80:	4623      	mov	r3, r4
 8007d82:	469a      	mov	sl, r3
 8007d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d88:	b10a      	cbz	r2, 8007d8e <_vfiprintf_r+0x86>
 8007d8a:	2a25      	cmp	r2, #37	; 0x25
 8007d8c:	d1f9      	bne.n	8007d82 <_vfiprintf_r+0x7a>
 8007d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d92:	d00b      	beq.n	8007dac <_vfiprintf_r+0xa4>
 8007d94:	465b      	mov	r3, fp
 8007d96:	4622      	mov	r2, r4
 8007d98:	4629      	mov	r1, r5
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f7ff ffa2 	bl	8007ce4 <__sfputs_r>
 8007da0:	3001      	adds	r0, #1
 8007da2:	f000 80a9 	beq.w	8007ef8 <_vfiprintf_r+0x1f0>
 8007da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da8:	445a      	add	r2, fp
 8007daa:	9209      	str	r2, [sp, #36]	; 0x24
 8007dac:	f89a 3000 	ldrb.w	r3, [sl]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 80a1 	beq.w	8007ef8 <_vfiprintf_r+0x1f0>
 8007db6:	2300      	movs	r3, #0
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dc0:	f10a 0a01 	add.w	sl, sl, #1
 8007dc4:	9304      	str	r3, [sp, #16]
 8007dc6:	9307      	str	r3, [sp, #28]
 8007dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8007dce:	4654      	mov	r4, sl
 8007dd0:	2205      	movs	r2, #5
 8007dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd6:	4854      	ldr	r0, [pc, #336]	; (8007f28 <_vfiprintf_r+0x220>)
 8007dd8:	f7f8 f9fa 	bl	80001d0 <memchr>
 8007ddc:	9a04      	ldr	r2, [sp, #16]
 8007dde:	b9d8      	cbnz	r0, 8007e18 <_vfiprintf_r+0x110>
 8007de0:	06d1      	lsls	r1, r2, #27
 8007de2:	bf44      	itt	mi
 8007de4:	2320      	movmi	r3, #32
 8007de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dea:	0713      	lsls	r3, r2, #28
 8007dec:	bf44      	itt	mi
 8007dee:	232b      	movmi	r3, #43	; 0x2b
 8007df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007df4:	f89a 3000 	ldrb.w	r3, [sl]
 8007df8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dfa:	d015      	beq.n	8007e28 <_vfiprintf_r+0x120>
 8007dfc:	9a07      	ldr	r2, [sp, #28]
 8007dfe:	4654      	mov	r4, sl
 8007e00:	2000      	movs	r0, #0
 8007e02:	f04f 0c0a 	mov.w	ip, #10
 8007e06:	4621      	mov	r1, r4
 8007e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e0c:	3b30      	subs	r3, #48	; 0x30
 8007e0e:	2b09      	cmp	r3, #9
 8007e10:	d94d      	bls.n	8007eae <_vfiprintf_r+0x1a6>
 8007e12:	b1b0      	cbz	r0, 8007e42 <_vfiprintf_r+0x13a>
 8007e14:	9207      	str	r2, [sp, #28]
 8007e16:	e014      	b.n	8007e42 <_vfiprintf_r+0x13a>
 8007e18:	eba0 0308 	sub.w	r3, r0, r8
 8007e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e20:	4313      	orrs	r3, r2
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	46a2      	mov	sl, r4
 8007e26:	e7d2      	b.n	8007dce <_vfiprintf_r+0xc6>
 8007e28:	9b03      	ldr	r3, [sp, #12]
 8007e2a:	1d19      	adds	r1, r3, #4
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	9103      	str	r1, [sp, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	bfbb      	ittet	lt
 8007e34:	425b      	neglt	r3, r3
 8007e36:	f042 0202 	orrlt.w	r2, r2, #2
 8007e3a:	9307      	strge	r3, [sp, #28]
 8007e3c:	9307      	strlt	r3, [sp, #28]
 8007e3e:	bfb8      	it	lt
 8007e40:	9204      	strlt	r2, [sp, #16]
 8007e42:	7823      	ldrb	r3, [r4, #0]
 8007e44:	2b2e      	cmp	r3, #46	; 0x2e
 8007e46:	d10c      	bne.n	8007e62 <_vfiprintf_r+0x15a>
 8007e48:	7863      	ldrb	r3, [r4, #1]
 8007e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e4c:	d134      	bne.n	8007eb8 <_vfiprintf_r+0x1b0>
 8007e4e:	9b03      	ldr	r3, [sp, #12]
 8007e50:	1d1a      	adds	r2, r3, #4
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	9203      	str	r2, [sp, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bfb8      	it	lt
 8007e5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e5e:	3402      	adds	r4, #2
 8007e60:	9305      	str	r3, [sp, #20]
 8007e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007f38 <_vfiprintf_r+0x230>
 8007e66:	7821      	ldrb	r1, [r4, #0]
 8007e68:	2203      	movs	r2, #3
 8007e6a:	4650      	mov	r0, sl
 8007e6c:	f7f8 f9b0 	bl	80001d0 <memchr>
 8007e70:	b138      	cbz	r0, 8007e82 <_vfiprintf_r+0x17a>
 8007e72:	9b04      	ldr	r3, [sp, #16]
 8007e74:	eba0 000a 	sub.w	r0, r0, sl
 8007e78:	2240      	movs	r2, #64	; 0x40
 8007e7a:	4082      	lsls	r2, r0
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	3401      	adds	r4, #1
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e86:	4829      	ldr	r0, [pc, #164]	; (8007f2c <_vfiprintf_r+0x224>)
 8007e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e8c:	2206      	movs	r2, #6
 8007e8e:	f7f8 f99f 	bl	80001d0 <memchr>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d03f      	beq.n	8007f16 <_vfiprintf_r+0x20e>
 8007e96:	4b26      	ldr	r3, [pc, #152]	; (8007f30 <_vfiprintf_r+0x228>)
 8007e98:	bb1b      	cbnz	r3, 8007ee2 <_vfiprintf_r+0x1da>
 8007e9a:	9b03      	ldr	r3, [sp, #12]
 8007e9c:	3307      	adds	r3, #7
 8007e9e:	f023 0307 	bic.w	r3, r3, #7
 8007ea2:	3308      	adds	r3, #8
 8007ea4:	9303      	str	r3, [sp, #12]
 8007ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ea8:	443b      	add	r3, r7
 8007eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8007eac:	e768      	b.n	8007d80 <_vfiprintf_r+0x78>
 8007eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	2001      	movs	r0, #1
 8007eb6:	e7a6      	b.n	8007e06 <_vfiprintf_r+0xfe>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	3401      	adds	r4, #1
 8007ebc:	9305      	str	r3, [sp, #20]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	f04f 0c0a 	mov.w	ip, #10
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eca:	3a30      	subs	r2, #48	; 0x30
 8007ecc:	2a09      	cmp	r2, #9
 8007ece:	d903      	bls.n	8007ed8 <_vfiprintf_r+0x1d0>
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d0c6      	beq.n	8007e62 <_vfiprintf_r+0x15a>
 8007ed4:	9105      	str	r1, [sp, #20]
 8007ed6:	e7c4      	b.n	8007e62 <_vfiprintf_r+0x15a>
 8007ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007edc:	4604      	mov	r4, r0
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e7f0      	b.n	8007ec4 <_vfiprintf_r+0x1bc>
 8007ee2:	ab03      	add	r3, sp, #12
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	462a      	mov	r2, r5
 8007ee8:	4b12      	ldr	r3, [pc, #72]	; (8007f34 <_vfiprintf_r+0x22c>)
 8007eea:	a904      	add	r1, sp, #16
 8007eec:	4630      	mov	r0, r6
 8007eee:	f7fd fb9f 	bl	8005630 <_printf_float>
 8007ef2:	4607      	mov	r7, r0
 8007ef4:	1c78      	adds	r0, r7, #1
 8007ef6:	d1d6      	bne.n	8007ea6 <_vfiprintf_r+0x19e>
 8007ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007efa:	07d9      	lsls	r1, r3, #31
 8007efc:	d405      	bmi.n	8007f0a <_vfiprintf_r+0x202>
 8007efe:	89ab      	ldrh	r3, [r5, #12]
 8007f00:	059a      	lsls	r2, r3, #22
 8007f02:	d402      	bmi.n	8007f0a <_vfiprintf_r+0x202>
 8007f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f06:	f7fe f8fd 	bl	8006104 <__retarget_lock_release_recursive>
 8007f0a:	89ab      	ldrh	r3, [r5, #12]
 8007f0c:	065b      	lsls	r3, r3, #25
 8007f0e:	f53f af1d 	bmi.w	8007d4c <_vfiprintf_r+0x44>
 8007f12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f14:	e71c      	b.n	8007d50 <_vfiprintf_r+0x48>
 8007f16:	ab03      	add	r3, sp, #12
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	462a      	mov	r2, r5
 8007f1c:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <_vfiprintf_r+0x22c>)
 8007f1e:	a904      	add	r1, sp, #16
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7fd fe29 	bl	8005b78 <_printf_i>
 8007f26:	e7e4      	b.n	8007ef2 <_vfiprintf_r+0x1ea>
 8007f28:	0800847c 	.word	0x0800847c
 8007f2c:	08008486 	.word	0x08008486
 8007f30:	08005631 	.word	0x08005631
 8007f34:	08007ce5 	.word	0x08007ce5
 8007f38:	08008482 	.word	0x08008482

08007f3c <__swbuf_r>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	460e      	mov	r6, r1
 8007f40:	4614      	mov	r4, r2
 8007f42:	4605      	mov	r5, r0
 8007f44:	b118      	cbz	r0, 8007f4e <__swbuf_r+0x12>
 8007f46:	6a03      	ldr	r3, [r0, #32]
 8007f48:	b90b      	cbnz	r3, 8007f4e <__swbuf_r+0x12>
 8007f4a:	f7fd ffc3 	bl	8005ed4 <__sinit>
 8007f4e:	69a3      	ldr	r3, [r4, #24]
 8007f50:	60a3      	str	r3, [r4, #8]
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	071a      	lsls	r2, r3, #28
 8007f56:	d525      	bpl.n	8007fa4 <__swbuf_r+0x68>
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	b31b      	cbz	r3, 8007fa4 <__swbuf_r+0x68>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	6922      	ldr	r2, [r4, #16]
 8007f60:	1a98      	subs	r0, r3, r2
 8007f62:	6963      	ldr	r3, [r4, #20]
 8007f64:	b2f6      	uxtb	r6, r6
 8007f66:	4283      	cmp	r3, r0
 8007f68:	4637      	mov	r7, r6
 8007f6a:	dc04      	bgt.n	8007f76 <__swbuf_r+0x3a>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f7ff fd9e 	bl	8007ab0 <_fflush_r>
 8007f74:	b9e0      	cbnz	r0, 8007fb0 <__swbuf_r+0x74>
 8007f76:	68a3      	ldr	r3, [r4, #8]
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	60a3      	str	r3, [r4, #8]
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	6022      	str	r2, [r4, #0]
 8007f82:	701e      	strb	r6, [r3, #0]
 8007f84:	6962      	ldr	r2, [r4, #20]
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d004      	beq.n	8007f96 <__swbuf_r+0x5a>
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	07db      	lsls	r3, r3, #31
 8007f90:	d506      	bpl.n	8007fa0 <__swbuf_r+0x64>
 8007f92:	2e0a      	cmp	r6, #10
 8007f94:	d104      	bne.n	8007fa0 <__swbuf_r+0x64>
 8007f96:	4621      	mov	r1, r4
 8007f98:	4628      	mov	r0, r5
 8007f9a:	f7ff fd89 	bl	8007ab0 <_fflush_r>
 8007f9e:	b938      	cbnz	r0, 8007fb0 <__swbuf_r+0x74>
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 f806 	bl	8007fb8 <__swsetup_r>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d0d5      	beq.n	8007f5c <__swbuf_r+0x20>
 8007fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8007fb4:	e7f4      	b.n	8007fa0 <__swbuf_r+0x64>
	...

08007fb8 <__swsetup_r>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4b2a      	ldr	r3, [pc, #168]	; (8008064 <__swsetup_r+0xac>)
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	b118      	cbz	r0, 8007fcc <__swsetup_r+0x14>
 8007fc4:	6a03      	ldr	r3, [r0, #32]
 8007fc6:	b90b      	cbnz	r3, 8007fcc <__swsetup_r+0x14>
 8007fc8:	f7fd ff84 	bl	8005ed4 <__sinit>
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fd2:	0718      	lsls	r0, r3, #28
 8007fd4:	d422      	bmi.n	800801c <__swsetup_r+0x64>
 8007fd6:	06d9      	lsls	r1, r3, #27
 8007fd8:	d407      	bmi.n	8007fea <__swsetup_r+0x32>
 8007fda:	2309      	movs	r3, #9
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe8:	e034      	b.n	8008054 <__swsetup_r+0x9c>
 8007fea:	0758      	lsls	r0, r3, #29
 8007fec:	d512      	bpl.n	8008014 <__swsetup_r+0x5c>
 8007fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ff0:	b141      	cbz	r1, 8008004 <__swsetup_r+0x4c>
 8007ff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ff6:	4299      	cmp	r1, r3
 8007ff8:	d002      	beq.n	8008000 <__swsetup_r+0x48>
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f7fe fefe 	bl	8006dfc <_free_r>
 8008000:	2300      	movs	r3, #0
 8008002:	6363      	str	r3, [r4, #52]	; 0x34
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	2300      	movs	r3, #0
 800800e:	6063      	str	r3, [r4, #4]
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	f043 0308 	orr.w	r3, r3, #8
 800801a:	81a3      	strh	r3, [r4, #12]
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	b94b      	cbnz	r3, 8008034 <__swsetup_r+0x7c>
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800802a:	d003      	beq.n	8008034 <__swsetup_r+0x7c>
 800802c:	4621      	mov	r1, r4
 800802e:	4628      	mov	r0, r5
 8008030:	f000 f884 	bl	800813c <__smakebuf_r>
 8008034:	89a0      	ldrh	r0, [r4, #12]
 8008036:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800803a:	f010 0301 	ands.w	r3, r0, #1
 800803e:	d00a      	beq.n	8008056 <__swsetup_r+0x9e>
 8008040:	2300      	movs	r3, #0
 8008042:	60a3      	str	r3, [r4, #8]
 8008044:	6963      	ldr	r3, [r4, #20]
 8008046:	425b      	negs	r3, r3
 8008048:	61a3      	str	r3, [r4, #24]
 800804a:	6923      	ldr	r3, [r4, #16]
 800804c:	b943      	cbnz	r3, 8008060 <__swsetup_r+0xa8>
 800804e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008052:	d1c4      	bne.n	8007fde <__swsetup_r+0x26>
 8008054:	bd38      	pop	{r3, r4, r5, pc}
 8008056:	0781      	lsls	r1, r0, #30
 8008058:	bf58      	it	pl
 800805a:	6963      	ldrpl	r3, [r4, #20]
 800805c:	60a3      	str	r3, [r4, #8]
 800805e:	e7f4      	b.n	800804a <__swsetup_r+0x92>
 8008060:	2000      	movs	r0, #0
 8008062:	e7f7      	b.n	8008054 <__swsetup_r+0x9c>
 8008064:	20000064 	.word	0x20000064

08008068 <_raise_r>:
 8008068:	291f      	cmp	r1, #31
 800806a:	b538      	push	{r3, r4, r5, lr}
 800806c:	4604      	mov	r4, r0
 800806e:	460d      	mov	r5, r1
 8008070:	d904      	bls.n	800807c <_raise_r+0x14>
 8008072:	2316      	movs	r3, #22
 8008074:	6003      	str	r3, [r0, #0]
 8008076:	f04f 30ff 	mov.w	r0, #4294967295
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800807e:	b112      	cbz	r2, 8008086 <_raise_r+0x1e>
 8008080:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008084:	b94b      	cbnz	r3, 800809a <_raise_r+0x32>
 8008086:	4620      	mov	r0, r4
 8008088:	f000 f830 	bl	80080ec <_getpid_r>
 800808c:	462a      	mov	r2, r5
 800808e:	4601      	mov	r1, r0
 8008090:	4620      	mov	r0, r4
 8008092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008096:	f000 b817 	b.w	80080c8 <_kill_r>
 800809a:	2b01      	cmp	r3, #1
 800809c:	d00a      	beq.n	80080b4 <_raise_r+0x4c>
 800809e:	1c59      	adds	r1, r3, #1
 80080a0:	d103      	bne.n	80080aa <_raise_r+0x42>
 80080a2:	2316      	movs	r3, #22
 80080a4:	6003      	str	r3, [r0, #0]
 80080a6:	2001      	movs	r0, #1
 80080a8:	e7e7      	b.n	800807a <_raise_r+0x12>
 80080aa:	2400      	movs	r4, #0
 80080ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080b0:	4628      	mov	r0, r5
 80080b2:	4798      	blx	r3
 80080b4:	2000      	movs	r0, #0
 80080b6:	e7e0      	b.n	800807a <_raise_r+0x12>

080080b8 <raise>:
 80080b8:	4b02      	ldr	r3, [pc, #8]	; (80080c4 <raise+0xc>)
 80080ba:	4601      	mov	r1, r0
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	f7ff bfd3 	b.w	8008068 <_raise_r>
 80080c2:	bf00      	nop
 80080c4:	20000064 	.word	0x20000064

080080c8 <_kill_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d07      	ldr	r5, [pc, #28]	; (80080e8 <_kill_r+0x20>)
 80080cc:	2300      	movs	r3, #0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	4611      	mov	r1, r2
 80080d4:	602b      	str	r3, [r5, #0]
 80080d6:	f7f9 fc19 	bl	800190c <_kill>
 80080da:	1c43      	adds	r3, r0, #1
 80080dc:	d102      	bne.n	80080e4 <_kill_r+0x1c>
 80080de:	682b      	ldr	r3, [r5, #0]
 80080e0:	b103      	cbz	r3, 80080e4 <_kill_r+0x1c>
 80080e2:	6023      	str	r3, [r4, #0]
 80080e4:	bd38      	pop	{r3, r4, r5, pc}
 80080e6:	bf00      	nop
 80080e8:	20000480 	.word	0x20000480

080080ec <_getpid_r>:
 80080ec:	f7f9 bc06 	b.w	80018fc <_getpid>

080080f0 <__swhatbuf_r>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	460c      	mov	r4, r1
 80080f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f8:	2900      	cmp	r1, #0
 80080fa:	b096      	sub	sp, #88	; 0x58
 80080fc:	4615      	mov	r5, r2
 80080fe:	461e      	mov	r6, r3
 8008100:	da0d      	bge.n	800811e <__swhatbuf_r+0x2e>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008108:	f04f 0100 	mov.w	r1, #0
 800810c:	bf0c      	ite	eq
 800810e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008112:	2340      	movne	r3, #64	; 0x40
 8008114:	2000      	movs	r0, #0
 8008116:	6031      	str	r1, [r6, #0]
 8008118:	602b      	str	r3, [r5, #0]
 800811a:	b016      	add	sp, #88	; 0x58
 800811c:	bd70      	pop	{r4, r5, r6, pc}
 800811e:	466a      	mov	r2, sp
 8008120:	f000 f848 	bl	80081b4 <_fstat_r>
 8008124:	2800      	cmp	r0, #0
 8008126:	dbec      	blt.n	8008102 <__swhatbuf_r+0x12>
 8008128:	9901      	ldr	r1, [sp, #4]
 800812a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800812e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008132:	4259      	negs	r1, r3
 8008134:	4159      	adcs	r1, r3
 8008136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800813a:	e7eb      	b.n	8008114 <__swhatbuf_r+0x24>

0800813c <__smakebuf_r>:
 800813c:	898b      	ldrh	r3, [r1, #12]
 800813e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008140:	079d      	lsls	r5, r3, #30
 8008142:	4606      	mov	r6, r0
 8008144:	460c      	mov	r4, r1
 8008146:	d507      	bpl.n	8008158 <__smakebuf_r+0x1c>
 8008148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	6123      	str	r3, [r4, #16]
 8008150:	2301      	movs	r3, #1
 8008152:	6163      	str	r3, [r4, #20]
 8008154:	b002      	add	sp, #8
 8008156:	bd70      	pop	{r4, r5, r6, pc}
 8008158:	ab01      	add	r3, sp, #4
 800815a:	466a      	mov	r2, sp
 800815c:	f7ff ffc8 	bl	80080f0 <__swhatbuf_r>
 8008160:	9900      	ldr	r1, [sp, #0]
 8008162:	4605      	mov	r5, r0
 8008164:	4630      	mov	r0, r6
 8008166:	f7fe febd 	bl	8006ee4 <_malloc_r>
 800816a:	b948      	cbnz	r0, 8008180 <__smakebuf_r+0x44>
 800816c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008170:	059a      	lsls	r2, r3, #22
 8008172:	d4ef      	bmi.n	8008154 <__smakebuf_r+0x18>
 8008174:	f023 0303 	bic.w	r3, r3, #3
 8008178:	f043 0302 	orr.w	r3, r3, #2
 800817c:	81a3      	strh	r3, [r4, #12]
 800817e:	e7e3      	b.n	8008148 <__smakebuf_r+0xc>
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	6020      	str	r0, [r4, #0]
 8008184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008188:	81a3      	strh	r3, [r4, #12]
 800818a:	9b00      	ldr	r3, [sp, #0]
 800818c:	6163      	str	r3, [r4, #20]
 800818e:	9b01      	ldr	r3, [sp, #4]
 8008190:	6120      	str	r0, [r4, #16]
 8008192:	b15b      	cbz	r3, 80081ac <__smakebuf_r+0x70>
 8008194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008198:	4630      	mov	r0, r6
 800819a:	f000 f81d 	bl	80081d8 <_isatty_r>
 800819e:	b128      	cbz	r0, 80081ac <__smakebuf_r+0x70>
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	81a3      	strh	r3, [r4, #12]
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	431d      	orrs	r5, r3
 80081b0:	81a5      	strh	r5, [r4, #12]
 80081b2:	e7cf      	b.n	8008154 <__smakebuf_r+0x18>

080081b4 <_fstat_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d07      	ldr	r5, [pc, #28]	; (80081d4 <_fstat_r+0x20>)
 80081b8:	2300      	movs	r3, #0
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	4611      	mov	r1, r2
 80081c0:	602b      	str	r3, [r5, #0]
 80081c2:	f7f9 fc02 	bl	80019ca <_fstat>
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	d102      	bne.n	80081d0 <_fstat_r+0x1c>
 80081ca:	682b      	ldr	r3, [r5, #0]
 80081cc:	b103      	cbz	r3, 80081d0 <_fstat_r+0x1c>
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	bd38      	pop	{r3, r4, r5, pc}
 80081d2:	bf00      	nop
 80081d4:	20000480 	.word	0x20000480

080081d8 <_isatty_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d06      	ldr	r5, [pc, #24]	; (80081f4 <_isatty_r+0x1c>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	f7f9 fc01 	bl	80019ea <_isatty>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_isatty_r+0x1a>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_isatty_r+0x1a>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	20000480 	.word	0x20000480

080081f8 <_init>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	bf00      	nop
 80081fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fe:	bc08      	pop	{r3}
 8008200:	469e      	mov	lr, r3
 8008202:	4770      	bx	lr

08008204 <_fini>:
 8008204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008206:	bf00      	nop
 8008208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800820a:	bc08      	pop	{r3}
 800820c:	469e      	mov	lr, r3
 800820e:	4770      	bx	lr
