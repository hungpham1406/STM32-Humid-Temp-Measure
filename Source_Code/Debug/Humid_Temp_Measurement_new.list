
Humid_Temp_Measurement_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008130  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  080082c0  080082c0  000182c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008694  08008694  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008694  08008694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800869c  0800869c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800869c  0800869c  0001869c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080086a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000002d8  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004ac  200004ac  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dc87  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002238  00000000  00000000  0002dece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e30  00000000  00000000  00030108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b0d  00000000  00000000  00030f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000220d2  00000000  00000000  00031a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001119b  00000000  00000000  00053b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd023  00000000  00000000  00064cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d54  00000000  00000000  00131cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00136a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082a8 	.word	0x080082a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080082a8 	.word	0x080082a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <microDelay>:
extern TIM_HandleTypeDef htim3;

uint32_t pMillis, cMillis;

void microDelay (uint16_t delay)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <microDelay+0x30>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim3) < delay);
 8000f56:	bf00      	nop
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <microDelay+0x30>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d3f9      	bcc.n	8000f58 <microDelay+0x14>
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000294 	.word	0x20000294

08000f78 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000f90:	2304      	movs	r3, #4
 8000f92:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	482a      	ldr	r0, [pc, #168]	; (8001050 <DHT11_Start+0xd8>)
 8000fa6:	f001 fbf3 	bl	8002790 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000faa:	2200      	movs	r2, #0
 8000fac:	2104      	movs	r1, #4
 8000fae:	4828      	ldr	r0, [pc, #160]	; (8001050 <DHT11_Start+0xd8>)
 8000fb0:	f001 fda2 	bl	8002af8 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000fb4:	2014      	movs	r0, #20
 8000fb6:	f000 ffcb 	bl	8001f50 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4824      	ldr	r0, [pc, #144]	; (8001050 <DHT11_Start+0xd8>)
 8000fc0:	f001 fd9a 	bl	8002af8 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000fc4:	201e      	movs	r0, #30
 8000fc6:	f7ff ffbd 	bl	8000f44 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481e      	ldr	r0, [pc, #120]	; (8001050 <DHT11_Start+0xd8>)
 8000fd8:	f001 fbda 	bl	8002790 <HAL_GPIO_Init>
  microDelay (40);
 8000fdc:	2028      	movs	r0, #40	; 0x28
 8000fde:	f7ff ffb1 	bl	8000f44 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	481a      	ldr	r0, [pc, #104]	; (8001050 <DHT11_Start+0xd8>)
 8000fe6:	f001 fd6f 	bl	8002ac8 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10b      	bne.n	8001008 <DHT11_Start+0x90>
  {
    microDelay (80);
 8000ff0:	2050      	movs	r0, #80	; 0x50
 8000ff2:	f7ff ffa7 	bl	8000f44 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	4815      	ldr	r0, [pc, #84]	; (8001050 <DHT11_Start+0xd8>)
 8000ffa:	f001 fd65 	bl	8002ac8 <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <DHT11_Start+0x90>
 8001004:	2301      	movs	r3, #1
 8001006:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001008:	f000 ff96 	bl	8001f38 <HAL_GetTick>
 800100c:	4603      	mov	r3, r0
 800100e:	4a11      	ldr	r2, [pc, #68]	; (8001054 <DHT11_Start+0xdc>)
 8001010:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001012:	f000 ff91 	bl	8001f38 <HAL_GetTick>
 8001016:	4603      	mov	r3, r0
 8001018:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <DHT11_Start+0xe0>)
 800101a:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800101c:	e004      	b.n	8001028 <DHT11_Start+0xb0>
  {
    cMillis = HAL_GetTick();
 800101e:	f000 ff8b 	bl	8001f38 <HAL_GetTick>
 8001022:	4603      	mov	r3, r0
 8001024:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <DHT11_Start+0xe0>)
 8001026:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001028:	2104      	movs	r1, #4
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <DHT11_Start+0xd8>)
 800102c:	f001 fd4c 	bl	8002ac8 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <DHT11_Start+0xcc>
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <DHT11_Start+0xdc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	1c9a      	adds	r2, r3, #2
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <DHT11_Start+0xe0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8ec      	bhi.n	800101e <DHT11_Start+0xa6>
  }
  return Response;
 8001044:	7dfb      	ldrb	r3, [r7, #23]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40020000 	.word	0x40020000
 8001054:	200001f0 	.word	0x200001f0
 8001058:	200001f4 	.word	0x200001f4

0800105c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8001062:	2300      	movs	r3, #0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	e063      	b.n	8001130 <DHT11_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 8001068:	f000 ff66 	bl	8001f38 <HAL_GetTick>
 800106c:	4603      	mov	r3, r0
 800106e:	4a34      	ldr	r2, [pc, #208]	; (8001140 <DHT11_Read+0xe4>)
 8001070:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001072:	f000 ff61 	bl	8001f38 <HAL_GetTick>
 8001076:	4603      	mov	r3, r0
 8001078:	4a32      	ldr	r2, [pc, #200]	; (8001144 <DHT11_Read+0xe8>)
 800107a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800107c:	e004      	b.n	8001088 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 800107e:	f000 ff5b 	bl	8001f38 <HAL_GetTick>
 8001082:	4603      	mov	r3, r0
 8001084:	4a2f      	ldr	r2, [pc, #188]	; (8001144 <DHT11_Read+0xe8>)
 8001086:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001088:	2104      	movs	r1, #4
 800108a:	482f      	ldr	r0, [pc, #188]	; (8001148 <DHT11_Read+0xec>)
 800108c:	f001 fd1c 	bl	8002ac8 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <DHT11_Read+0x48>
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <DHT11_Read+0xe4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	1c9a      	adds	r2, r3, #2
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <DHT11_Read+0xe8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8ec      	bhi.n	800107e <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 80010a4:	2028      	movs	r0, #40	; 0x28
 80010a6:	f7ff ff4d 	bl	8000f44 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80010aa:	2104      	movs	r1, #4
 80010ac:	4826      	ldr	r0, [pc, #152]	; (8001148 <DHT11_Read+0xec>)
 80010ae:	f001 fd0b 	bl	8002ac8 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10e      	bne.n	80010d6 <DHT11_Read+0x7a>
      b&= ~(1<<(7-a));
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2201      	movs	r2, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	b25a      	sxtb	r2, r3
 80010ca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010ce:	4013      	ands	r3, r2
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	71bb      	strb	r3, [r7, #6]
 80010d4:	e00b      	b.n	80010ee <DHT11_Read+0x92>
    else
      b|= (1<<(7-a));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f1c3 0307 	rsb	r3, r3, #7
 80010dc:	2201      	movs	r2, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	b25a      	sxtb	r2, r3
 80010e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 80010ee:	f000 ff23 	bl	8001f38 <HAL_GetTick>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <DHT11_Read+0xe4>)
 80010f6:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80010f8:	f000 ff1e 	bl	8001f38 <HAL_GetTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <DHT11_Read+0xe8>)
 8001100:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001102:	e004      	b.n	800110e <DHT11_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001104:	f000 ff18 	bl	8001f38 <HAL_GetTick>
 8001108:	4603      	mov	r3, r0
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <DHT11_Read+0xe8>)
 800110c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800110e:	2104      	movs	r1, #4
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <DHT11_Read+0xec>)
 8001112:	f001 fcd9 	bl	8002ac8 <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <DHT11_Read+0xce>
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <DHT11_Read+0xe4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1c9a      	adds	r2, r3, #2
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <DHT11_Read+0xe8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d8ec      	bhi.n	8001104 <DHT11_Read+0xa8>
  for (a=0;a<8;a++)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	3301      	adds	r3, #1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2b07      	cmp	r3, #7
 8001134:	d998      	bls.n	8001068 <DHT11_Read+0xc>
    }
  }
  return b;
 8001136:	79bb      	ldrb	r3, [r7, #6]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200001f0 	.word	0x200001f0
 8001144:	200001f4 	.word	0x200001f4
 8001148:	40020000 	.word	0x40020000

0800114c <lcd_send_cmd>:

// rs = 0 => write command, rs = 1 => write data
// en transfer from high to low => data/cmd will be transmit

void lcd_send_cmd (char cmd)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f023 030f 	bic.w	r3, r3, #15
 800115c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 (0x0C = 1100 - the second bit is for en pin)
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	f043 030c 	orr.w	r3, r3, #12
 800116a:	b2db      	uxtb	r3, r3
 800116c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 (0x08 = 1000)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	b2db      	uxtb	r3, r3
 8001176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	f043 030c 	orr.w	r3, r3, #12
 800117e:	b2db      	uxtb	r3, r3
 8001180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	b2db      	uxtb	r3, r3
 800118a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800118c:	f107 0208 	add.w	r2, r7, #8
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2304      	movs	r3, #4
 8001196:	214e      	movs	r1, #78	; 0x4e
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <lcd_send_cmd+0x5c>)
 800119a:	f001 fe0b 	bl	8002db4 <HAL_I2C_Master_Transmit>
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200001f8 	.word	0x200001f8

080011ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f023 030f 	bic.w	r3, r3, #15
 80011bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f043 030d 	orr.w	r3, r3, #13
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	f043 0309 	orr.w	r3, r3, #9
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	f043 030d 	orr.w	r3, r3, #13
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	f043 0309 	orr.w	r3, r3, #9
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011ec:	f107 0208 	add.w	r2, r7, #8
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2304      	movs	r3, #4
 80011f6:	214e      	movs	r1, #78	; 0x4e
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <lcd_send_data+0x5c>)
 80011fa:	f001 fddb 	bl	8002db4 <HAL_I2C_Master_Transmit>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001f8 	.word	0x200001f8

0800120c <lcd_clear>:

void lcd_clear (void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
//	lcd_send_cmd (0x80);
//	for (int i=0; i<70; i++)
//	{
//		lcd_send_data (' ');
//	}
	lcd_send_cmd(0x01);
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff ff9b 	bl	800114c <lcd_send_cmd>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}

0800121a <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
    switch (row)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <lcd_put_cur+0x18>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d005      	beq.n	800123c <lcd_put_cur+0x22>
 8001230:	e009      	b.n	8001246 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001238:	603b      	str	r3, [r7, #0]
            break;
 800123a:	e004      	b.n	8001246 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001242:	603b      	str	r3, [r7, #0]
            break;
 8001244:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff7e 	bl	800114c <lcd_send_cmd>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <lcd_init>:


void lcd_init (void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800125c:	2032      	movs	r0, #50	; 0x32
 800125e:	f000 fe77 	bl	8001f50 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001262:	2030      	movs	r0, #48	; 0x30
 8001264:	f7ff ff72 	bl	800114c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001268:	2005      	movs	r0, #5
 800126a:	f000 fe71 	bl	8001f50 <HAL_Delay>
	lcd_send_cmd (0x30);
 800126e:	2030      	movs	r0, #48	; 0x30
 8001270:	f7ff ff6c 	bl	800114c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001274:	2001      	movs	r0, #1
 8001276:	f000 fe6b 	bl	8001f50 <HAL_Delay>
	lcd_send_cmd (0x30);
 800127a:	2030      	movs	r0, #48	; 0x30
 800127c:	f7ff ff66 	bl	800114c <lcd_send_cmd>
	HAL_Delay(10);
 8001280:	200a      	movs	r0, #10
 8001282:	f000 fe65 	bl	8001f50 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001286:	2020      	movs	r0, #32
 8001288:	f7ff ff60 	bl	800114c <lcd_send_cmd>
	HAL_Delay(10);
 800128c:	200a      	movs	r0, #10
 800128e:	f000 fe5f 	bl	8001f50 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001292:	2028      	movs	r0, #40	; 0x28
 8001294:	f7ff ff5a 	bl	800114c <lcd_send_cmd>
	HAL_Delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f000 fe59 	bl	8001f50 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800129e:	2008      	movs	r0, #8
 80012a0:	f7ff ff54 	bl	800114c <lcd_send_cmd>
	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 fe53 	bl	8001f50 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff ff4e 	bl	800114c <lcd_send_cmd>
	HAL_Delay(2);
 80012b0:	2002      	movs	r0, #2
 80012b2:	f000 fe4d 	bl	8001f50 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80012b6:	2006      	movs	r0, #6
 80012b8:	f7ff ff48 	bl	800114c <lcd_send_cmd>
	HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 fe47 	bl	8001f50 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80012c2:	200c      	movs	r0, #12
 80012c4:	f7ff ff42 	bl	800114c <lcd_send_cmd>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012d4:	e006      	b.n	80012e4 <lcd_send_string+0x18>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff64 	bl	80011ac <lcd_send_data>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f4      	bne.n	80012d6 <lcd_send_string+0xa>
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <display_Temp>:
uint8_t RHI, RHD, TCI, TCD, SUM;
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;

void display_Temp(float Temp) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[10];
	lcd_put_cur(0, 0);
 8001302:	2100      	movs	r1, #0
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff ff88 	bl	800121a <lcd_put_cur>
	sprintf(str, "T:%.1f*C", Temp);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff f91c 	bl	8000548 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	f107 000c 	add.w	r0, r7, #12
 8001318:	4905      	ldr	r1, [pc, #20]	; (8001330 <display_Temp+0x38>)
 800131a:	f004 fe69 	bl	8005ff0 <siprintf>
	lcd_send_string(str);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ffd2 	bl	80012cc <lcd_send_string>
}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	080082c0 	.word	0x080082c0

08001334 <display_Humid>:

void display_Humid(float RH) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[10];
	lcd_put_cur(0, 9);
 800133e:	2109      	movs	r1, #9
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff ff6a 	bl	800121a <lcd_put_cur>
	sprintf(str, "H:%.1f", RH);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff f8fe 	bl	8000548 <__aeabi_f2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	f107 000c 	add.w	r0, r7, #12
 8001354:	4905      	ldr	r1, [pc, #20]	; (800136c <display_Humid+0x38>)
 8001356:	f004 fe4b 	bl	8005ff0 <siprintf>
	lcd_send_string(str);
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ffb4 	bl	80012cc <lcd_send_string>
}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	080082cc 	.word	0x080082cc

08001370 <bcd_To_Dec>:

uint8_t dec_To_Bcd(int val) {
	return (uint8_t)((val/10*16) + (val%10));
}

int bcd_To_Dec(uint8_t val) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10) + (val%16));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	461a      	mov	r2, r3
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	4413      	add	r3, r2
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <get_Time>:
	set_time_buffer[6] = dec_To_Bcd(year);

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time_buffer, 7, 1000);
}

void get_Time(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af04      	add	r7, sp, #16
	uint8_t get_time_buffer[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time_buffer, 7, 1000);
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	2307      	movs	r3, #7
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	463b      	mov	r3, r7
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2301      	movs	r3, #1
 80013b6:	2200      	movs	r2, #0
 80013b8:	21d0      	movs	r1, #208	; 0xd0
 80013ba:	481f      	ldr	r0, [pc, #124]	; (8001438 <get_Time+0x98>)
 80013bc:	f001 fdf8 	bl	8002fb0 <HAL_I2C_Mem_Read>

	time.second 	= bcd_To_Dec(get_time_buffer[0]);
 80013c0:	783b      	ldrb	r3, [r7, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ffd4 	bl	8001370 <bcd_To_Dec>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <get_Time+0x9c>)
 80013ce:	701a      	strb	r2, [r3, #0]
	time.minute 	= bcd_To_Dec(get_time_buffer[1]);
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ffcc 	bl	8001370 <bcd_To_Dec>
 80013d8:	4603      	mov	r3, r0
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <get_Time+0x9c>)
 80013de:	705a      	strb	r2, [r3, #1]
	time.hour 		= bcd_To_Dec(get_time_buffer[2]);
 80013e0:	78bb      	ldrb	r3, [r7, #2]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ffc4 	bl	8001370 <bcd_To_Dec>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <get_Time+0x9c>)
 80013ee:	709a      	strb	r2, [r3, #2]
	time.dayOfWeek 	= bcd_To_Dec(get_time_buffer[3]);
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ffbc 	bl	8001370 <bcd_To_Dec>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <get_Time+0x9c>)
 80013fe:	70da      	strb	r2, [r3, #3]
	time.dayOfMonth = bcd_To_Dec(get_time_buffer[4]);
 8001400:	793b      	ldrb	r3, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ffb4 	bl	8001370 <bcd_To_Dec>
 8001408:	4603      	mov	r3, r0
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <get_Time+0x9c>)
 800140e:	711a      	strb	r2, [r3, #4]
	time.month 		= bcd_To_Dec(get_time_buffer[5]);
 8001410:	797b      	ldrb	r3, [r7, #5]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ffac 	bl	8001370 <bcd_To_Dec>
 8001418:	4603      	mov	r3, r0
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <get_Time+0x9c>)
 800141e:	715a      	strb	r2, [r3, #5]
	time.year 		= bcd_To_Dec(get_time_buffer[6]);
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ffa4 	bl	8001370 <bcd_To_Dec>
 8001428:	4603      	mov	r3, r0
 800142a:	b2da      	uxtb	r2, r3
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <get_Time+0x9c>)
 800142e:	719a      	strb	r2, [r3, #6]
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200001f8 	.word	0x200001f8
 800143c:	20000350 	.word	0x20000350

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	ed2d 8b02 	vpush	{d8}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144a:	f000 fd0f 	bl	8001e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144e:	f000 f8ff 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001452:	f000 fa77 	bl	8001944 <MX_GPIO_Init>
  MX_DMA_Init();
 8001456:	f000 fa55 	bl	8001904 <MX_DMA_Init>
  MX_I2C1_Init();
 800145a:	f000 f961 	bl	8001720 <MX_I2C1_Init>
  MX_TIM2_Init();
 800145e:	f000 f98d 	bl	800177c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001462:	f000 fa01 	bl	8001868 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001466:	486a      	ldr	r0, [pc, #424]	; (8001610 <main+0x1d0>)
 8001468:	f003 f848 	bl	80044fc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800146c:	4868      	ldr	r0, [pc, #416]	; (8001610 <main+0x1d0>)
 800146e:	f003 f8ad 	bl	80045cc <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001472:	2100      	movs	r1, #0
 8001474:	4867      	ldr	r0, [pc, #412]	; (8001614 <main+0x1d4>)
 8001476:	f003 f973 	bl	8004760 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_init();
 800147a:	f7ff feed 	bl	8001258 <lcd_init>
  lcd_put_cur(0, 0);
 800147e:	2100      	movs	r1, #0
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff feca 	bl	800121a <lcd_put_cur>

  lcd_send_string("Hello world!");
 8001486:	4864      	ldr	r0, [pc, #400]	; (8001618 <main+0x1d8>)
 8001488:	f7ff ff20 	bl	80012cc <lcd_send_string>

  HAL_Delay(4000);
 800148c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001490:	f000 fd5e 	bl	8001f50 <HAL_Delay>
  lcd_clear();
 8001494:	f7ff feba 	bl	800120c <lcd_clear>
//  set_Time(30, 12, 21, 6, 12, 4, 24);
  char time_buffer[30];

  while (1)
  {
	  display_Temp(tCelsius);
 8001498:	4b60      	ldr	r3, [pc, #384]	; (800161c <main+0x1dc>)
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	eeb0 0a67 	vmov.f32	s0, s15
 80014a2:	f7ff ff29 	bl	80012f8 <display_Temp>
	  display_Humid(RH);
 80014a6:	4b5e      	ldr	r3, [pc, #376]	; (8001620 <main+0x1e0>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	eeb0 0a67 	vmov.f32	s0, s15
 80014b0:	f7ff ff40 	bl	8001334 <display_Humid>

	  if(DHT11_Start()) {
 80014b4:	f7ff fd60 	bl	8000f78 <DHT11_Start>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d07a      	beq.n	80015b4 <main+0x174>
		  RHI = DHT11_Read(); // Relative humidity integral
 80014be:	f7ff fdcd 	bl	800105c <DHT11_Read>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b57      	ldr	r3, [pc, #348]	; (8001624 <main+0x1e4>)
 80014c8:	701a      	strb	r2, [r3, #0]
		  RHD = DHT11_Read(); // Relative humidity decimal
 80014ca:	f7ff fdc7 	bl	800105c <DHT11_Read>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b55      	ldr	r3, [pc, #340]	; (8001628 <main+0x1e8>)
 80014d4:	701a      	strb	r2, [r3, #0]
		  TCI = DHT11_Read(); // Celsius integral
 80014d6:	f7ff fdc1 	bl	800105c <DHT11_Read>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4b53      	ldr	r3, [pc, #332]	; (800162c <main+0x1ec>)
 80014e0:	701a      	strb	r2, [r3, #0]
		  TCD = DHT11_Read(); // Celsius decimal
 80014e2:	f7ff fdbb 	bl	800105c <DHT11_Read>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b51      	ldr	r3, [pc, #324]	; (8001630 <main+0x1f0>)
 80014ec:	701a      	strb	r2, [r3, #0]
		  SUM = DHT11_Read(); // Check sum
 80014ee:	f7ff fdb5 	bl	800105c <DHT11_Read>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b4f      	ldr	r3, [pc, #316]	; (8001634 <main+0x1f4>)
 80014f8:	701a      	strb	r2, [r3, #0]

		  if(SUM == RHI + RHD + TCI + TCD) {
 80014fa:	4b4e      	ldr	r3, [pc, #312]	; (8001634 <main+0x1f4>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4619      	mov	r1, r3
 8001500:	4b48      	ldr	r3, [pc, #288]	; (8001624 <main+0x1e4>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b48      	ldr	r3, [pc, #288]	; (8001628 <main+0x1e8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a47      	ldr	r2, [pc, #284]	; (800162c <main+0x1ec>)
 800150e:	7812      	ldrb	r2, [r2, #0]
 8001510:	4413      	add	r3, r2
 8001512:	4a47      	ldr	r2, [pc, #284]	; (8001630 <main+0x1f0>)
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4299      	cmp	r1, r3
 800151a:	d14b      	bne.n	80015b4 <main+0x174>
			  // Can use RHI and TCI for any purposes if whole number only needed
			  tCelsius = (float)TCI + (float)(TCD/10.0);
 800151c:	4b43      	ldr	r3, [pc, #268]	; (800162c <main+0x1ec>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	ee07 3a90 	vmov	s15, r3
 8001524:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001528:	4b41      	ldr	r3, [pc, #260]	; (8001630 <main+0x1f0>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe fff9 	bl	8000524 <__aeabi_i2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b40      	ldr	r3, [pc, #256]	; (8001638 <main+0x1f8>)
 8001538:	f7ff f988 	bl	800084c <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fb30 	bl	8000ba8 <__aeabi_d2f>
 8001548:	ee07 0a90 	vmov	s15, r0
 800154c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001550:	4b32      	ldr	r3, [pc, #200]	; (800161c <main+0x1dc>)
 8001552:	edc3 7a00 	vstr	s15, [r3]
			  tFahrenheit = tCelsius * 9/5 + 32;
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <main+0x1dc>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001560:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001564:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001568:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800163c <main+0x1fc>
 8001570:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001574:	4b32      	ldr	r3, [pc, #200]	; (8001640 <main+0x200>)
 8001576:	edc3 7a00 	vstr	s15, [r3]
			  RH = (float)RHI + (float)(RHD/10.0);
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <main+0x1e4>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <main+0x1e8>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffca 	bl	8000524 <__aeabi_i2d>
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <main+0x1f8>)
 8001596:	f7ff f959 	bl	800084c <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fb01 	bl	8000ba8 <__aeabi_d2f>
 80015a6:	ee07 0a90 	vmov	s15, r0
 80015aa:	ee78 7a27 	vadd.f32	s15, s16, s15
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <main+0x1e0>)
 80015b0:	edc3 7a00 	vstr	s15, [r3]
			  // Can use tCelsius, tFahrenheit and RH for any purposes
		  }
	  }

	  get_Time();
 80015b4:	f7ff fef4 	bl	80013a0 <get_Time>
	  sprintf(time_buffer, "%02d:%02d", time.hour, time.minute);
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <main+0x204>)
 80015ba:	789b      	ldrb	r3, [r3, #2]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <main+0x204>)
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	4638      	mov	r0, r7
 80015c4:	4920      	ldr	r1, [pc, #128]	; (8001648 <main+0x208>)
 80015c6:	f004 fd13 	bl	8005ff0 <siprintf>
	  lcd_put_cur(1, 0);
 80015ca:	2100      	movs	r1, #0
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff fe24 	bl	800121a <lcd_put_cur>
	  lcd_send_string(time_buffer);
 80015d2:	463b      	mov	r3, r7
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe79 	bl	80012cc <lcd_send_string>

	  sprintf(time_buffer, "%02d-%02d-20%02d", time.dayOfMonth, time.month, time.year);
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <main+0x204>)
 80015dc:	791b      	ldrb	r3, [r3, #4]
 80015de:	461a      	mov	r2, r3
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <main+0x204>)
 80015e2:	795b      	ldrb	r3, [r3, #5]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <main+0x204>)
 80015e8:	799b      	ldrb	r3, [r3, #6]
 80015ea:	4638      	mov	r0, r7
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	460b      	mov	r3, r1
 80015f0:	4916      	ldr	r1, [pc, #88]	; (800164c <main+0x20c>)
 80015f2:	f004 fcfd 	bl	8005ff0 <siprintf>
	  lcd_put_cur(1, 6);
 80015f6:	2106      	movs	r1, #6
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff fe0e 	bl	800121a <lcd_put_cur>
	  lcd_send_string(time_buffer);
 80015fe:	463b      	mov	r3, r7
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fe63 	bl	80012cc <lcd_send_string>

	  HAL_Delay(1000);
 8001606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800160a:	f000 fca1 	bl	8001f50 <HAL_Delay>
	  display_Temp(tCelsius);
 800160e:	e743      	b.n	8001498 <main+0x58>
 8001610:	20000294 	.word	0x20000294
 8001614:	2000024c 	.word	0x2000024c
 8001618:	080082d4 	.word	0x080082d4
 800161c:	20000344 	.word	0x20000344
 8001620:	2000034c 	.word	0x2000034c
 8001624:	2000033c 	.word	0x2000033c
 8001628:	2000033d 	.word	0x2000033d
 800162c:	2000033e 	.word	0x2000033e
 8001630:	2000033f 	.word	0x2000033f
 8001634:	20000340 	.word	0x20000340
 8001638:	40240000 	.word	0x40240000
 800163c:	42000000 	.word	0x42000000
 8001640:	20000348 	.word	0x20000348
 8001644:	20000350 	.word	0x20000350
 8001648:	080082e4 	.word	0x080082e4
 800164c:	080082f0 	.word	0x080082f0

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2230      	movs	r2, #48	; 0x30
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fd29 	bl	80060b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <SystemClock_Config+0xc8>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a26      	ldr	r2, [pc, #152]	; (8001718 <SystemClock_Config+0xc8>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <SystemClock_Config+0xc8>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <SystemClock_Config+0xcc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a20      	ldr	r2, [pc, #128]	; (800171c <SystemClock_Config+0xcc>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <SystemClock_Config+0xcc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b6:	2302      	movs	r3, #2
 80016b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016c0:	2304      	movs	r3, #4
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80016c4:	2350      	movs	r3, #80	; 0x50
 80016c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fa3d 	bl	8003b54 <HAL_RCC_OscConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016e0:	f000 f966 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e4:	230f      	movs	r3, #15
 80016e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e8:	2302      	movs	r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2101      	movs	r1, #1
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 fca0 	bl	8004044 <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800170a:	f000 f951 	bl	80019b0 <Error_Handler>
  }
}
 800170e:	bf00      	nop
 8001710:	3750      	adds	r7, #80	; 0x50
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000

08001720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_I2C1_Init+0x50>)
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <MX_I2C1_Init+0x54>)
 8001728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_I2C1_Init+0x50>)
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <MX_I2C1_Init+0x58>)
 800172e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_I2C1_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_I2C1_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_I2C1_Init+0x50>)
 800173e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <MX_I2C1_Init+0x50>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_I2C1_Init+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_I2C1_Init+0x50>)
 800175e:	f001 f9e5 	bl	8002b2c <HAL_I2C_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001768:	f000 f922 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200001f8 	.word	0x200001f8
 8001774:	40005400 	.word	0x40005400
 8001778:	000186a0 	.word	0x000186a0

0800177c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	f107 0320 	add.w	r3, r7, #32
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <MX_TIM2_Init+0xe8>)
 80017ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 80017b4:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <MX_TIM2_Init+0xe8>)
 80017b6:	2227      	movs	r2, #39	; 0x27
 80017b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <MX_TIM2_Init+0xe8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <MX_TIM2_Init+0xe8>)
 80017c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b26      	ldr	r3, [pc, #152]	; (8001864 <MX_TIM2_Init+0xe8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b25      	ldr	r3, [pc, #148]	; (8001864 <MX_TIM2_Init+0xe8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017d4:	4823      	ldr	r0, [pc, #140]	; (8001864 <MX_TIM2_Init+0xe8>)
 80017d6:	f002 fe41 	bl	800445c <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017e0:	f000 f8e6 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ee:	4619      	mov	r1, r3
 80017f0:	481c      	ldr	r0, [pc, #112]	; (8001864 <MX_TIM2_Init+0xe8>)
 80017f2:	f003 fa2f 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017fc:	f000 f8d8 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001800:	4818      	ldr	r0, [pc, #96]	; (8001864 <MX_TIM2_Init+0xe8>)
 8001802:	f002 ff53 	bl	80046ac <HAL_TIM_PWM_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800180c:	f000 f8d0 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	4619      	mov	r1, r3
 800181e:	4811      	ldr	r0, [pc, #68]	; (8001864 <MX_TIM2_Init+0xe8>)
 8001820:	f003 fe2e 	bl	8005480 <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800182a:	f000 f8c1 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	; 0x60
 8001830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	4619      	mov	r1, r3
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <MX_TIM2_Init+0xe8>)
 8001846:	f003 f943 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001850:	f000 f8ae 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <MX_TIM2_Init+0xe8>)
 8001856:	f000 f991 	bl	8001b7c <HAL_TIM_MspPostInit>

}
 800185a:	bf00      	nop
 800185c:	3738      	adds	r7, #56	; 0x38
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000024c 	.word	0x2000024c

08001868 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	463b      	mov	r3, r7
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <MX_TIM3_Init+0x94>)
 8001886:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <MX_TIM3_Init+0x98>)
 8001888:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40-1;
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <MX_TIM3_Init+0x94>)
 800188c:	2227      	movs	r2, #39	; 0x27
 800188e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <MX_TIM3_Init+0x94>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <MX_TIM3_Init+0x94>)
 8001898:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800189c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <MX_TIM3_Init+0x94>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <MX_TIM3_Init+0x94>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018aa:	4814      	ldr	r0, [pc, #80]	; (80018fc <MX_TIM3_Init+0x94>)
 80018ac:	f002 fdd6 	bl	800445c <HAL_TIM_Base_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80018b6:	f000 f87b 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4619      	mov	r1, r3
 80018c6:	480d      	ldr	r0, [pc, #52]	; (80018fc <MX_TIM3_Init+0x94>)
 80018c8:	f003 f9c4 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018d2:	f000 f86d 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <MX_TIM3_Init+0x94>)
 80018e4:	f003 fdcc 	bl	8005480 <HAL_TIMEx_MasterConfigSynchronization>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018ee:	f000 f85f 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000294 	.word	0x20000294
 8001900:	40000400 	.word	0x40000400

08001904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_DMA_Init+0x3c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <MX_DMA_Init+0x3c>)
 8001914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_DMA_Init+0x3c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2010      	movs	r0, #16
 800192c:	f000 fc0f 	bl	800214e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001930:	2010      	movs	r0, #16
 8001932:	f000 fc28 	bl	8002186 <HAL_NVIC_EnableIRQ>

}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_GPIO_Init+0x68>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a16      	ldr	r2, [pc, #88]	; (80019ac <MX_GPIO_Init+0x68>)
 8001954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <MX_GPIO_Init+0x68>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <MX_GPIO_Init+0x68>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <MX_GPIO_Init+0x68>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <MX_GPIO_Init+0x68>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_GPIO_Init+0x68>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <MX_GPIO_Init+0x68>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_GPIO_Init+0x68>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <Error_Handler+0x8>
	...

080019bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <HAL_MspInit+0x4c>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_I2C_MspInit+0x84>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12b      	bne.n	8001a86 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a4a:	23c0      	movs	r3, #192	; 0xc0
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4e:	2312      	movs	r3, #18
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <HAL_I2C_MspInit+0x8c>)
 8001a66:	f000 fe93 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_I2C_MspInit+0x88>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40005400 	.word	0x40005400
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020400 	.word	0x40020400

08001a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aac:	d13e      	bne.n	8001b2c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_TIM_Base_MspInit+0xd0>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <HAL_TIM_Base_MspInit+0xd0>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_TIM_Base_MspInit+0xd0>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001aca:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001acc:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <HAL_TIM_Base_MspInit+0xd8>)
 8001ace:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001ad2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001ad6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001ada:	2240      	movs	r2, #64	; 0x40
 8001adc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aea:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001aee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afa:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001b0e:	4818      	ldr	r0, [pc, #96]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001b10:	f000 fb54 	bl	80021bc <HAL_DMA_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001b1a:	f7ff ff49 	bl	80019b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_TIM_Base_MspInit+0xd4>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b2a:	e01a      	b.n	8001b62 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <HAL_TIM_Base_MspInit+0xdc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d115      	bne.n	8001b62 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_TIM_Base_MspInit+0xd0>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_TIM_Base_MspInit+0xd0>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_TIM_Base_MspInit+0xd0>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	201d      	movs	r0, #29
 8001b58:	f000 faf9 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b5c:	201d      	movs	r0, #29
 8001b5e:	f000 fb12 	bl	8002186 <HAL_NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	200002dc 	.word	0x200002dc
 8001b74:	40026088 	.word	0x40026088
 8001b78:	40000400 	.word	0x40000400

08001b7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9c:	d11d      	bne.n	8001bda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_TIM_MspPostInit+0x68>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <HAL_TIM_MspPostInit+0x68>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_TIM_MspPostInit+0x68>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <HAL_TIM_MspPostInit+0x6c>)
 8001bd6:	f000 fddb 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <MemManage_Handler+0x4>

08001bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c38:	f000 f96a 	bl	8001f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <DMA1_Stream5_IRQHandler+0x10>)
 8001c46:	f000 fb67 	bl	8002318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200002dc 	.word	0x200002dc

08001c54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <TIM3_IRQHandler+0x10>)
 8001c5a:	f002 fe49 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000294 	.word	0x20000294

08001c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return 1;
 8001c6c:	2301      	movs	r3, #1
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_kill>:

int _kill(int pid, int sig)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c82:	f004 fa6b 	bl	800615c <__errno>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2216      	movs	r2, #22
 8001c8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_exit>:

void _exit (int status)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ffe7 	bl	8001c78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001caa:	e7fe      	b.n	8001caa <_exit+0x12>

08001cac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e00a      	b.n	8001cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cbe:	f3af 8000 	nop.w
 8001cc2:	4601      	mov	r1, r0
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	60ba      	str	r2, [r7, #8]
 8001cca:	b2ca      	uxtb	r2, r1
 8001ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbf0      	blt.n	8001cbe <_read+0x12>
  }

  return len;
 8001cdc:	687b      	ldr	r3, [r7, #4]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e009      	b.n	8001d0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	60ba      	str	r2, [r7, #8]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbf1      	blt.n	8001cf8 <_write+0x12>
  }
  return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_close>:

int _close(int file)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d46:	605a      	str	r2, [r3, #4]
  return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_isatty>:

int _isatty(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f004 f9d0 	bl	800615c <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20020000 	.word	0x20020000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	20000358 	.word	0x20000358
 8001df0:	200004b0 	.word	0x200004b0

08001df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <SystemInit+0x20>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <SystemInit+0x20>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e1c:	f7ff ffea 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e20:	480c      	ldr	r0, [pc, #48]	; (8001e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e22:	490d      	ldr	r1, [pc, #52]	; (8001e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e28:	e002      	b.n	8001e30 <LoopCopyDataInit>

08001e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2e:	3304      	adds	r3, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e34:	d3f9      	bcc.n	8001e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e38:	4c0a      	ldr	r4, [pc, #40]	; (8001e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e3c:	e001      	b.n	8001e42 <LoopFillZerobss>

08001e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e40:	3204      	adds	r2, #4

08001e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e44:	d3fb      	bcc.n	8001e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e46:	f004 f98f 	bl	8006168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4a:	f7ff faf9 	bl	8001440 <main>
  bx  lr    
 8001e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e5c:	080086a4 	.word	0x080086a4
  ldr r2, =_sbss
 8001e60:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e64:	200004ac 	.word	0x200004ac

08001e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC_IRQHandler>
	...

08001e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <HAL_Init+0x40>)
 8001e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <HAL_Init+0x40>)
 8001e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_Init+0x40>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f000 f94f 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9a:	200f      	movs	r0, #15
 8001e9c:	f000 f808 	bl	8001eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea0:	f7ff fd8c 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x54>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x58>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f967 	bl	80021a2 <HAL_SYSTICK_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00e      	b.n	8001efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b0f      	cmp	r3, #15
 8001ee2:	d80a      	bhi.n	8001efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f000 f92f 	bl	800214e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef0:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <HAL_InitTick+0x5c>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000008 	.word	0x20000008
 8001f0c:	20000004 	.word	0x20000004

08001f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x20>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x24>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_IncTick+0x24>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008
 8001f34:	2000035c 	.word	0x2000035c

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_GetTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	2000035c 	.word	0x2000035c

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff ffee 	bl	8001f38 <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffde 	bl	8001f38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000008 	.word	0x20000008

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4907      	ldr	r1, [pc, #28]	; (8002034 <__NVIC_EnableIRQ+0x38>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
         );
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f7ff ff8e 	bl	8002038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff29 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff3e 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff8e 	bl	800208c <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5d 	bl	8002038 <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff31 	bl	8001ffc <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa2 	bl	80020f4 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff feb6 	bl	8001f38 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e099      	b.n	800230c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0201 	bic.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f8:	e00f      	b.n	800221a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fa:	f7ff fe9d 	bl	8001f38 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b05      	cmp	r3, #5
 8002206:	d908      	bls.n	800221a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2203      	movs	r2, #3
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e078      	b.n	800230c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1e8      	bne.n	80021fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4b38      	ldr	r3, [pc, #224]	; (8002314 <HAL_DMA_Init+0x158>)
 8002234:	4013      	ands	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002246:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4313      	orrs	r3, r2
 800226a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	2b04      	cmp	r3, #4
 8002272:	d107      	bne.n	8002284 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	4313      	orrs	r3, r2
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f023 0307 	bic.w	r3, r3, #7
 800229a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d117      	bne.n	80022de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f9e9 	bl	8002698 <DMA_CheckFifoParam>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2240      	movs	r2, #64	; 0x40
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022da:	2301      	movs	r3, #1
 80022dc:	e016      	b.n	800230c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f9a0 	bl	800262c <DMA_CalcBaseAndBitshift>
 80022ec:	4603      	mov	r3, r0
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	223f      	movs	r2, #63	; 0x3f
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	f010803f 	.word	0xf010803f

08002318 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002324:	4b8e      	ldr	r3, [pc, #568]	; (8002560 <HAL_DMA_IRQHandler+0x248>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a8e      	ldr	r2, [pc, #568]	; (8002564 <HAL_DMA_IRQHandler+0x24c>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0a9b      	lsrs	r3, r3, #10
 8002330:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	2208      	movs	r2, #8
 8002344:	409a      	lsls	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d01a      	beq.n	8002384 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0204 	bic.w	r2, r2, #4
 800236a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002370:	2208      	movs	r2, #8
 8002372:	409a      	lsls	r2, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	f043 0201 	orr.w	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	2201      	movs	r2, #1
 800238a:	409a      	lsls	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4013      	ands	r3, r2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d012      	beq.n	80023ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00b      	beq.n	80023ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	2201      	movs	r2, #1
 80023a8:	409a      	lsls	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	f043 0202 	orr.w	r2, r3, #2
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	2204      	movs	r2, #4
 80023c0:	409a      	lsls	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d012      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00b      	beq.n	80023f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	2204      	movs	r2, #4
 80023de:	409a      	lsls	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	f043 0204 	orr.w	r2, r3, #4
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	2210      	movs	r2, #16
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d043      	beq.n	8002488 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d03c      	beq.n	8002488 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	2210      	movs	r2, #16
 8002414:	409a      	lsls	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d018      	beq.n	800245a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d108      	bne.n	8002448 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d024      	beq.n	8002488 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	4798      	blx	r3
 8002446:	e01f      	b.n	8002488 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4798      	blx	r3
 8002458:	e016      	b.n	8002488 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0208 	bic.w	r2, r2, #8
 8002476:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	2220      	movs	r2, #32
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 808f 	beq.w	80025b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8087 	beq.w	80025b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2220      	movs	r2, #32
 80024b0:	409a      	lsls	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d136      	bne.n	8002530 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0216 	bic.w	r2, r2, #22
 80024d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <HAL_DMA_IRQHandler+0x1da>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0208 	bic.w	r2, r2, #8
 8002500:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	223f      	movs	r2, #63	; 0x3f
 8002508:	409a      	lsls	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002522:	2b00      	cmp	r3, #0
 8002524:	d07e      	beq.n	8002624 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
        }
        return;
 800252e:	e079      	b.n	8002624 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d01d      	beq.n	800257a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10d      	bne.n	8002568 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	2b00      	cmp	r3, #0
 8002552:	d031      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
 800255c:	e02c      	b.n	80025b8 <HAL_DMA_IRQHandler+0x2a0>
 800255e:	bf00      	nop
 8002560:	20000000 	.word	0x20000000
 8002564:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d023      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
 8002578:	e01e      	b.n	80025b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10f      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0210 	bic.w	r2, r2, #16
 8002596:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d032      	beq.n	8002626 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d022      	beq.n	8002612 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2205      	movs	r2, #5
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	3301      	adds	r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d307      	bcc.n	8002600 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f2      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x2cc>
 80025fe:	e000      	b.n	8002602 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002600:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
 8002622:	e000      	b.n	8002626 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002624:	bf00      	nop
    }
  }
}
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	3b10      	subs	r3, #16
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <DMA_CalcBaseAndBitshift+0x64>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <DMA_CalcBaseAndBitshift+0x68>)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b03      	cmp	r3, #3
 8002658:	d909      	bls.n	800266e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	1d1a      	adds	r2, r3, #4
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	; 0x58
 800266c:	e007      	b.n	800267e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	aaaaaaab 	.word	0xaaaaaaab
 8002694:	0800831c 	.word	0x0800831c

08002698 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11f      	bne.n	80026f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d856      	bhi.n	8002766 <DMA_CheckFifoParam+0xce>
 80026b8:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <DMA_CheckFifoParam+0x28>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026e3 	.word	0x080026e3
 80026c8:	080026d1 	.word	0x080026d1
 80026cc:	08002767 	.word	0x08002767
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d046      	beq.n	800276a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e0:	e043      	b.n	800276a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026ea:	d140      	bne.n	800276e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f0:	e03d      	b.n	800276e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fa:	d121      	bne.n	8002740 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d837      	bhi.n	8002772 <DMA_CheckFifoParam+0xda>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <DMA_CheckFifoParam+0x70>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002719 	.word	0x08002719
 800270c:	0800271f 	.word	0x0800271f
 8002710:	08002719 	.word	0x08002719
 8002714:	08002731 	.word	0x08002731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e030      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d025      	beq.n	8002776 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272e:	e022      	b.n	8002776 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002738:	d11f      	bne.n	800277a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800273e:	e01c      	b.n	800277a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d903      	bls.n	800274e <DMA_CheckFifoParam+0xb6>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d003      	beq.n	8002754 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800274c:	e018      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
      break;
 8002752:	e015      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00e      	beq.n	800277e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      break;
 8002764:	e00b      	b.n	800277e <DMA_CheckFifoParam+0xe6>
      break;
 8002766:	bf00      	nop
 8002768:	e00a      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
 800276c:	e008      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800276e:	bf00      	nop
 8002770:	e006      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 8002772:	bf00      	nop
 8002774:	e004      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;   
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800277e:	bf00      	nop
    }
  } 
  
  return status; 
 8002780:	7bfb      	ldrb	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e16b      	b.n	8002a84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 815a 	bne.w	8002a7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80b4 	beq.w	8002a7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b60      	ldr	r3, [pc, #384]	; (8002a9c <HAL_GPIO_Init+0x30c>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a5f      	ldr	r2, [pc, #380]	; (8002a9c <HAL_GPIO_Init+0x30c>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <HAL_GPIO_Init+0x30c>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002932:	4a5b      	ldr	r2, [pc, #364]	; (8002aa0 <HAL_GPIO_Init+0x310>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_GPIO_Init+0x314>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d02b      	beq.n	80029b6 <HAL_GPIO_Init+0x226>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a51      	ldr	r2, [pc, #324]	; (8002aa8 <HAL_GPIO_Init+0x318>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d025      	beq.n	80029b2 <HAL_GPIO_Init+0x222>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a50      	ldr	r2, [pc, #320]	; (8002aac <HAL_GPIO_Init+0x31c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01f      	beq.n	80029ae <HAL_GPIO_Init+0x21e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4f      	ldr	r2, [pc, #316]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d019      	beq.n	80029aa <HAL_GPIO_Init+0x21a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0x216>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4d      	ldr	r2, [pc, #308]	; (8002ab8 <HAL_GPIO_Init+0x328>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00d      	beq.n	80029a2 <HAL_GPIO_Init+0x212>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_GPIO_Init+0x32c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <HAL_GPIO_Init+0x20e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4b      	ldr	r2, [pc, #300]	; (8002ac0 <HAL_GPIO_Init+0x330>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_GPIO_Init+0x20a>
 8002996:	2307      	movs	r3, #7
 8002998:	e00e      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 800299a:	2308      	movs	r3, #8
 800299c:	e00c      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 800299e:	2306      	movs	r3, #6
 80029a0:	e00a      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029a2:	2305      	movs	r3, #5
 80029a4:	e008      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029a6:	2304      	movs	r3, #4
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029aa:	2303      	movs	r3, #3
 80029ac:	e004      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029b6:	2300      	movs	r3, #0
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f002 0203 	and.w	r2, r2, #3
 80029be:	0092      	lsls	r2, r2, #2
 80029c0:	4093      	lsls	r3, r2
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c8:	4935      	ldr	r1, [pc, #212]	; (8002aa0 <HAL_GPIO_Init+0x310>)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fa:	4a32      	ldr	r2, [pc, #200]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a00:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a24:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a78:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3301      	adds	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	f67f ae90 	bls.w	80027ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40021400 	.word	0x40021400
 8002abc:	40021800 	.word	0x40021800
 8002ac0:	40021c00 	.word	0x40021c00
 8002ac4:	40013c00 	.word	0x40013c00

08002ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	887b      	ldrh	r3, [r7, #2]
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	e001      	b.n	8002aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
 8002b04:	4613      	mov	r3, r2
 8002b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b08:	787b      	ldrb	r3, [r7, #1]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b14:	e003      	b.n	8002b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b16:	887b      	ldrh	r3, [r7, #2]
 8002b18:	041a      	lsls	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	619a      	str	r2, [r3, #24]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e12b      	b.n	8002d96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe ff5a 	bl	8001a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2224      	movs	r2, #36	; 0x24
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b90:	f001 fc50 	bl	8004434 <HAL_RCC_GetPCLK1Freq>
 8002b94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4a81      	ldr	r2, [pc, #516]	; (8002da0 <HAL_I2C_Init+0x274>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d807      	bhi.n	8002bb0 <HAL_I2C_Init+0x84>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a80      	ldr	r2, [pc, #512]	; (8002da4 <HAL_I2C_Init+0x278>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	bf94      	ite	ls
 8002ba8:	2301      	movls	r3, #1
 8002baa:	2300      	movhi	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e006      	b.n	8002bbe <HAL_I2C_Init+0x92>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a7d      	ldr	r2, [pc, #500]	; (8002da8 <HAL_I2C_Init+0x27c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	bf94      	ite	ls
 8002bb8:	2301      	movls	r3, #1
 8002bba:	2300      	movhi	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0e7      	b.n	8002d96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a78      	ldr	r2, [pc, #480]	; (8002dac <HAL_I2C_Init+0x280>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0c9b      	lsrs	r3, r3, #18
 8002bd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a6a      	ldr	r2, [pc, #424]	; (8002da0 <HAL_I2C_Init+0x274>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d802      	bhi.n	8002c00 <HAL_I2C_Init+0xd4>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	e009      	b.n	8002c14 <HAL_I2C_Init+0xe8>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	4a69      	ldr	r2, [pc, #420]	; (8002db0 <HAL_I2C_Init+0x284>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	3301      	adds	r3, #1
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	495c      	ldr	r1, [pc, #368]	; (8002da0 <HAL_I2C_Init+0x274>)
 8002c30:	428b      	cmp	r3, r1
 8002c32:	d819      	bhi.n	8002c68 <HAL_I2C_Init+0x13c>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e59      	subs	r1, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c42:	1c59      	adds	r1, r3, #1
 8002c44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c48:	400b      	ands	r3, r1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_I2C_Init+0x138>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1e59      	subs	r1, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c62:	e051      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002c64:	2304      	movs	r3, #4
 8002c66:	e04f      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d111      	bne.n	8002c94 <HAL_I2C_Init+0x168>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e58      	subs	r0, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	440b      	add	r3, r1
 8002c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e012      	b.n	8002cba <HAL_I2C_Init+0x18e>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1e58      	subs	r0, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	0099      	lsls	r1, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Init+0x196>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e022      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_I2C_Init+0x1bc>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1e58      	subs	r0, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	440b      	add	r3, r1
 8002cd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce6:	e00f      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1e58      	subs	r0, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	0099      	lsls	r1, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	6809      	ldr	r1, [r1, #0]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6911      	ldr	r1, [r2, #16]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68d2      	ldr	r2, [r2, #12]
 8002d42:	4311      	orrs	r1, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	000186a0 	.word	0x000186a0
 8002da4:	001e847f 	.word	0x001e847f
 8002da8:	003d08ff 	.word	0x003d08ff
 8002dac:	431bde83 	.word	0x431bde83
 8002db0:	10624dd3 	.word	0x10624dd3

08002db4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	817b      	strh	r3, [r7, #10]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff f8b6 	bl	8001f38 <HAL_GetTick>
 8002dcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	f040 80e0 	bne.w	8002f9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2319      	movs	r3, #25
 8002de2:	2201      	movs	r2, #1
 8002de4:	4970      	ldr	r1, [pc, #448]	; (8002fa8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fc7e 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
 8002df4:	e0d3      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_I2C_Master_Transmit+0x50>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e0cc      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d007      	beq.n	8002e2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2221      	movs	r2, #33	; 0x21
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2210      	movs	r2, #16
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	893a      	ldrh	r2, [r7, #8]
 8002e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a50      	ldr	r2, [pc, #320]	; (8002fac <HAL_I2C_Master_Transmit+0x1f8>)
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	6a3a      	ldr	r2, [r7, #32]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 face 	bl	8003414 <I2C_MasterRequestWrite>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e08d      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e98:	e066      	b.n	8002f68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	6a39      	ldr	r1, [r7, #32]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fd3c 	bl	800391c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d107      	bne.n	8002ec2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06b      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	781a      	ldrb	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d11b      	bne.n	8002f3c <HAL_I2C_Master_Transmit+0x188>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d017      	beq.n	8002f3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	6a39      	ldr	r1, [r7, #32]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fd33 	bl	80039ac <I2C_WaitOnBTFFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00d      	beq.n	8002f68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d107      	bne.n	8002f64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e01a      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d194      	bne.n	8002e9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	00100002 	.word	0x00100002
 8002fac:	ffff0000 	.word	0xffff0000

08002fb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	; 0x30
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	813b      	strh	r3, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fca:	f7fe ffb5 	bl	8001f38 <HAL_GetTick>
 8002fce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	f040 8214 	bne.w	8003406 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2319      	movs	r3, #25
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	497b      	ldr	r1, [pc, #492]	; (80031d4 <HAL_I2C_Mem_Read+0x224>)
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fb7d 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e207      	b.n	8003408 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_I2C_Mem_Read+0x56>
 8003002:	2302      	movs	r3, #2
 8003004:	e200      	b.n	8003408 <HAL_I2C_Mem_Read+0x458>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d007      	beq.n	800302c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2222      	movs	r2, #34	; 0x22
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2240      	movs	r2, #64	; 0x40
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003056:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800305c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a5b      	ldr	r2, [pc, #364]	; (80031d8 <HAL_I2C_Mem_Read+0x228>)
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800306e:	88f8      	ldrh	r0, [r7, #6]
 8003070:	893a      	ldrh	r2, [r7, #8]
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	4603      	mov	r3, r0
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa4a 	bl	8003518 <I2C_RequestMemoryRead>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e1bc      	b.n	8003408 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	2b00      	cmp	r3, #0
 8003094:	d113      	bne.n	80030be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	623b      	str	r3, [r7, #32]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	623b      	str	r3, [r7, #32]
 80030aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e190      	b.n	80033e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d11b      	bne.n	80030fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e170      	b.n	80033e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	2b02      	cmp	r3, #2
 8003104:	d11b      	bne.n	800313e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003114:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003124:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	e150      	b.n	80033e0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003154:	e144      	b.n	80033e0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315a:	2b03      	cmp	r3, #3
 800315c:	f200 80f1 	bhi.w	8003342 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	2b01      	cmp	r3, #1
 8003166:	d123      	bne.n	80031b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fc65 	bl	8003a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e145      	b.n	8003408 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ae:	e117      	b.n	80033e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d14e      	bne.n	8003256 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	2200      	movs	r2, #0
 80031c0:	4906      	ldr	r1, [pc, #24]	; (80031dc <HAL_I2C_Mem_Read+0x22c>)
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fa90 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e11a      	b.n	8003408 <HAL_I2C_Mem_Read+0x458>
 80031d2:	bf00      	nop
 80031d4:	00100002 	.word	0x00100002
 80031d8:	ffff0000 	.word	0xffff0000
 80031dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003254:	e0c4      	b.n	80033e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	2200      	movs	r2, #0
 800325e:	496c      	ldr	r1, [pc, #432]	; (8003410 <HAL_I2C_Mem_Read+0x460>)
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fa41 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0cb      	b.n	8003408 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b8:	2200      	movs	r2, #0
 80032ba:	4955      	ldr	r1, [pc, #340]	; (8003410 <HAL_I2C_Mem_Read+0x460>)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fa13 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e09d      	b.n	8003408 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003340:	e04e      	b.n	80033e0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fb78 	bl	8003a3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e058      	b.n	8003408 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d124      	bne.n	80033e0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	2b03      	cmp	r3, #3
 800339c:	d107      	bne.n	80033ae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f47f aeb6 	bne.w	8003156 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	e000      	b.n	8003408 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
  }
}
 8003408:	4618      	mov	r0, r3
 800340a:	3728      	adds	r7, #40	; 0x28
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	00010004 	.word	0x00010004

08003414 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	460b      	mov	r3, r1
 8003422:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d006      	beq.n	800343e <I2C_MasterRequestWrite+0x2a>
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d003      	beq.n	800343e <I2C_MasterRequestWrite+0x2a>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800343c:	d108      	bne.n	8003450 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e00b      	b.n	8003468 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	2b12      	cmp	r3, #18
 8003456:	d107      	bne.n	8003468 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003466:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f937 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348e:	d103      	bne.n	8003498 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003496:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e035      	b.n	8003508 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a4:	d108      	bne.n	80034b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034a6:	897b      	ldrh	r3, [r7, #10]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034b4:	611a      	str	r2, [r3, #16]
 80034b6:	e01b      	b.n	80034f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034b8:	897b      	ldrh	r3, [r7, #10]
 80034ba:	11db      	asrs	r3, r3, #7
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f003 0306 	and.w	r3, r3, #6
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f063 030f 	orn	r3, r3, #15
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	490e      	ldr	r1, [pc, #56]	; (8003510 <I2C_MasterRequestWrite+0xfc>)
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f980 	bl	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e010      	b.n	8003508 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4907      	ldr	r1, [pc, #28]	; (8003514 <I2C_MasterRequestWrite+0x100>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f970 	bl	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	00010008 	.word	0x00010008
 8003514:	00010002 	.word	0x00010002

08003518 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4603      	mov	r3, r0
 8003528:	817b      	strh	r3, [r7, #10]
 800352a:	460b      	mov	r3, r1
 800352c:	813b      	strh	r3, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003540:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	2200      	movs	r2, #0
 800355a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f8c2 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00d      	beq.n	8003586 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003578:	d103      	bne.n	8003582 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0aa      	b.n	80036dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003586:	897b      	ldrh	r3, [r7, #10]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003594:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	6a3a      	ldr	r2, [r7, #32]
 800359a:	4952      	ldr	r1, [pc, #328]	; (80036e4 <I2C_RequestMemoryRead+0x1cc>)
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f91d 	bl	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e097      	b.n	80036dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c4:	6a39      	ldr	r1, [r7, #32]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f9a8 	bl	800391c <I2C_WaitOnTXEFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d107      	bne.n	80035ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e076      	b.n	80036dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d105      	bne.n	8003600 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035f4:	893b      	ldrh	r3, [r7, #8]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	e021      	b.n	8003644 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003600:	893b      	ldrh	r3, [r7, #8]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	b29b      	uxth	r3, r3
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003610:	6a39      	ldr	r1, [r7, #32]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f982 	bl	800391c <I2C_WaitOnTXEFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b04      	cmp	r3, #4
 8003624:	d107      	bne.n	8003636 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003634:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e050      	b.n	80036dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800363a:	893b      	ldrh	r3, [r7, #8]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003646:	6a39      	ldr	r1, [r7, #32]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f967 	bl	800391c <I2C_WaitOnTXEFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00d      	beq.n	8003670 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	2b04      	cmp	r3, #4
 800365a:	d107      	bne.n	800366c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e035      	b.n	80036dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	2200      	movs	r2, #0
 8003688:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f82b 	bl	80036e8 <I2C_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a6:	d103      	bne.n	80036b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e013      	b.n	80036dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036b4:	897b      	ldrh	r3, [r7, #10]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	6a3a      	ldr	r2, [r7, #32]
 80036c8:	4906      	ldr	r1, [pc, #24]	; (80036e4 <I2C_RequestMemoryRead+0x1cc>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f886 	bl	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	00010002 	.word	0x00010002

080036e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f8:	e048      	b.n	800378c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d044      	beq.n	800378c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe fc19 	bl	8001f38 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d139      	bne.n	800378c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	0c1b      	lsrs	r3, r3, #16
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d10d      	bne.n	800373e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	43da      	mvns	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4013      	ands	r3, r2
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	e00c      	b.n	8003758 <I2C_WaitOnFlagUntilTimeout+0x70>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	43da      	mvns	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	429a      	cmp	r2, r3
 800375c:	d116      	bne.n	800378c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f043 0220 	orr.w	r2, r3, #32
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e023      	b.n	80037d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	0c1b      	lsrs	r3, r3, #16
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d10d      	bne.n	80037b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	43da      	mvns	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4013      	ands	r3, r2
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	e00c      	b.n	80037cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	43da      	mvns	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4013      	ands	r3, r2
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d093      	beq.n	80036fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ea:	e071      	b.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fa:	d123      	bne.n	8003844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003814:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f043 0204 	orr.w	r2, r3, #4
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e067      	b.n	8003914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d041      	beq.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384c:	f7fe fb74 	bl	8001f38 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	429a      	cmp	r2, r3
 800385a:	d302      	bcc.n	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d136      	bne.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d10c      	bne.n	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	43da      	mvns	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4013      	ands	r3, r2
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	bf14      	ite	ne
 800387e:	2301      	movne	r3, #1
 8003880:	2300      	moveq	r3, #0
 8003882:	b2db      	uxtb	r3, r3
 8003884:	e00b      	b.n	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	43da      	mvns	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4013      	ands	r3, r2
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f043 0220 	orr.w	r2, r3, #32
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e021      	b.n	8003914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	0c1b      	lsrs	r3, r3, #16
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d10c      	bne.n	80038f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	43da      	mvns	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4013      	ands	r3, r2
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf14      	ite	ne
 80038ec:	2301      	movne	r3, #1
 80038ee:	2300      	moveq	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e00b      	b.n	800390c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	43da      	mvns	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4013      	ands	r3, r2
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf14      	ite	ne
 8003906:	2301      	movne	r3, #1
 8003908:	2300      	moveq	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	f47f af6d 	bne.w	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003928:	e034      	b.n	8003994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f8e3 	bl	8003af6 <I2C_IsAcknowledgeFailed>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e034      	b.n	80039a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d028      	beq.n	8003994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7fe faf9 	bl	8001f38 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11d      	bne.n	8003994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d016      	beq.n	8003994 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e007      	b.n	80039a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	d1c3      	bne.n	800392a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039b8:	e034      	b.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f89b 	bl	8003af6 <I2C_IsAcknowledgeFailed>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e034      	b.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d028      	beq.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d2:	f7fe fab1 	bl	8001f38 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d11d      	bne.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d016      	beq.n	8003a24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e007      	b.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d1c3      	bne.n	80039ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a48:	e049      	b.n	8003ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d119      	bne.n	8003a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0210 	mvn.w	r2, #16
 8003a60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e030      	b.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8c:	f7fe fa54 	bl	8001f38 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d11d      	bne.n	8003ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d016      	beq.n	8003ade <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f043 0220 	orr.w	r2, r3, #32
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e007      	b.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d1ae      	bne.n	8003a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0c:	d11b      	bne.n	8003b46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0204 	orr.w	r2, r3, #4
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e267      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d075      	beq.n	8003c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b72:	4b88      	ldr	r3, [pc, #544]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d00c      	beq.n	8003b98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b7e:	4b85      	ldr	r3, [pc, #532]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d112      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8a:	4b82      	ldr	r3, [pc, #520]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b96:	d10b      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b98:	4b7e      	ldr	r3, [pc, #504]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d05b      	beq.n	8003c5c <HAL_RCC_OscConfig+0x108>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d157      	bne.n	8003c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e242      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x74>
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a75      	ldr	r2, [pc, #468]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e01d      	b.n	8003c04 <HAL_RCC_OscConfig+0xb0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x98>
 8003bd2:	4b70      	ldr	r3, [pc, #448]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a6f      	ldr	r2, [pc, #444]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b6d      	ldr	r3, [pc, #436]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a6c      	ldr	r2, [pc, #432]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e00b      	b.n	8003c04 <HAL_RCC_OscConfig+0xb0>
 8003bec:	4b69      	ldr	r3, [pc, #420]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a68      	ldr	r2, [pc, #416]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b66      	ldr	r3, [pc, #408]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a65      	ldr	r2, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d013      	beq.n	8003c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fe f994 	bl	8001f38 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c14:	f7fe f990 	bl	8001f38 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	; 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e207      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0xc0>
 8003c32:	e014      	b.n	8003c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fe f980 	bl	8001f38 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fe f97c 	bl	8001f38 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e1f3      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c4e:	4b51      	ldr	r3, [pc, #324]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0xe8>
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d063      	beq.n	8003d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c6a:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c76:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d11c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c82:	4b44      	ldr	r3, [pc, #272]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d116      	bne.n	8003cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d005      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x152>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e1c7      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4937      	ldr	r1, [pc, #220]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cba:	e03a      	b.n	8003d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc4:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <HAL_RCC_OscConfig+0x244>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe f935 	bl	8001f38 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe f931 	bl	8001f38 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e1a8      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce4:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4925      	ldr	r1, [pc, #148]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	600b      	str	r3, [r1, #0]
 8003d04:	e015      	b.n	8003d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d06:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <HAL_RCC_OscConfig+0x244>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fe f914 	bl	8001f38 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d14:	f7fe f910 	bl	8001f38 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e187      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d26:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d036      	beq.n	8003dac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d46:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <HAL_RCC_OscConfig+0x248>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fe f8f4 	bl	8001f38 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d54:	f7fe f8f0 	bl	8001f38 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e167      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCC_OscConfig+0x240>)
 8003d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x200>
 8003d72:	e01b      	b.n	8003dac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_OscConfig+0x248>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe f8dd 	bl	8001f38 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	e00e      	b.n	8003da0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fe f8d9 	bl	8001f38 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d907      	bls.n	8003da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e150      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
 8003d94:	40023800 	.word	0x40023800
 8003d98:	42470000 	.word	0x42470000
 8003d9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	4b88      	ldr	r3, [pc, #544]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ea      	bne.n	8003d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8097 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dbe:	4b81      	ldr	r3, [pc, #516]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	4b7d      	ldr	r3, [pc, #500]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a7c      	ldr	r2, [pc, #496]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b7a      	ldr	r3, [pc, #488]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	4b77      	ldr	r3, [pc, #476]	; (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d118      	bne.n	8003e28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df6:	4b74      	ldr	r3, [pc, #464]	; (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a73      	ldr	r2, [pc, #460]	; (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e02:	f7fe f899 	bl	8001f38 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0a:	f7fe f895 	bl	8001f38 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e10c      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1c:	4b6a      	ldr	r3, [pc, #424]	; (8003fc8 <HAL_RCC_OscConfig+0x474>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_OscConfig+0x2ea>
 8003e30:	4b64      	ldr	r3, [pc, #400]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a63      	ldr	r2, [pc, #396]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3c:	e01c      	b.n	8003e78 <HAL_RCC_OscConfig+0x324>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x30c>
 8003e46:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a5e      	ldr	r2, [pc, #376]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	f043 0304 	orr.w	r3, r3, #4
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70
 8003e52:	4b5c      	ldr	r3, [pc, #368]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a5b      	ldr	r2, [pc, #364]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCC_OscConfig+0x324>
 8003e60:	4b58      	ldr	r3, [pc, #352]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4a57      	ldr	r2, [pc, #348]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6c:	4b55      	ldr	r3, [pc, #340]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a54      	ldr	r2, [pc, #336]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f023 0304 	bic.w	r3, r3, #4
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d015      	beq.n	8003eac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e80:	f7fe f85a 	bl	8001f38 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e86:	e00a      	b.n	8003e9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e88:	f7fe f856 	bl	8001f38 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0cb      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	4b49      	ldr	r3, [pc, #292]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0ee      	beq.n	8003e88 <HAL_RCC_OscConfig+0x334>
 8003eaa:	e014      	b.n	8003ed6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eac:	f7fe f844 	bl	8001f38 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f7fe f840 	bl	8001f38 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0b5      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eca:	4b3e      	ldr	r3, [pc, #248]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1ee      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d105      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003edc:	4b39      	ldr	r3, [pc, #228]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	4a38      	ldr	r2, [pc, #224]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80a1 	beq.w	8004034 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ef2:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d05c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d141      	bne.n	8003f8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b31      	ldr	r3, [pc, #196]	; (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe f814 	bl	8001f38 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe f810 	bl	8001f38 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e087      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	4b27      	ldr	r3, [pc, #156]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	491b      	ldr	r1, [pc, #108]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fd ffe9 	bl	8001f38 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fd ffe5 	bl	8001f38 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e05c      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x416>
 8003f88:	e054      	b.n	8004034 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_RCC_OscConfig+0x478>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fd ffd2 	bl	8001f38 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fd ffce 	bl	8001f38 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e045      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_OscConfig+0x470>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x444>
 8003fb6:	e03d      	b.n	8004034 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e038      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <HAL_RCC_OscConfig+0x4ec>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d028      	beq.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d121      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d11a      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004008:	4293      	cmp	r3, r2
 800400a:	d111      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	3b01      	subs	r3, #1
 800401a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d107      	bne.n	8004030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40023800 	.word	0x40023800

08004044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0cc      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004058:	4b68      	ldr	r3, [pc, #416]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d90c      	bls.n	8004080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b65      	ldr	r3, [pc, #404]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b63      	ldr	r3, [pc, #396]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0b8      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004098:	4b59      	ldr	r3, [pc, #356]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a58      	ldr	r2, [pc, #352]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b0:	4b53      	ldr	r3, [pc, #332]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a52      	ldr	r2, [pc, #328]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040bc:	4b50      	ldr	r3, [pc, #320]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	494d      	ldr	r1, [pc, #308]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d044      	beq.n	8004164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	4b47      	ldr	r3, [pc, #284]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d119      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e07f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d003      	beq.n	8004102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004102:	4b3f      	ldr	r3, [pc, #252]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e06f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004112:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e067      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004122:	4b37      	ldr	r3, [pc, #220]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 0203 	bic.w	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4934      	ldr	r1, [pc, #208]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	4313      	orrs	r3, r2
 8004132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004134:	f7fd ff00 	bl	8001f38 <HAL_GetTick>
 8004138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	e00a      	b.n	8004152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7fd fefc 	bl	8001f38 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e04f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 020c 	and.w	r2, r3, #12
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	429a      	cmp	r2, r3
 8004162:	d1eb      	bne.n	800413c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d20c      	bcs.n	800418c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b22      	ldr	r3, [pc, #136]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b20      	ldr	r3, [pc, #128]	; (80041fc <HAL_RCC_ClockConfig+0x1b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e032      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004198:	4b19      	ldr	r3, [pc, #100]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4916      	ldr	r1, [pc, #88]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041b6:	4b12      	ldr	r3, [pc, #72]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	490e      	ldr	r1, [pc, #56]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ca:	f000 f821 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	490a      	ldr	r1, [pc, #40]	; (8004204 <HAL_RCC_ClockConfig+0x1c0>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
 80041de:	fa22 f303 	lsr.w	r3, r2, r3
 80041e2:	4a09      	ldr	r2, [pc, #36]	; (8004208 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <HAL_RCC_ClockConfig+0x1c8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fd fe60 	bl	8001eb0 <HAL_InitTick>

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40023c00 	.word	0x40023c00
 8004200:	40023800 	.word	0x40023800
 8004204:	08008304 	.word	0x08008304
 8004208:	20000000 	.word	0x20000000
 800420c:	20000004 	.word	0x20000004

08004210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004214:	b094      	sub	sp, #80	; 0x50
 8004216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	647b      	str	r3, [r7, #68]	; 0x44
 800421c:	2300      	movs	r3, #0
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004220:	2300      	movs	r3, #0
 8004222:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004228:	4b79      	ldr	r3, [pc, #484]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d00d      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x40>
 8004234:	2b08      	cmp	r3, #8
 8004236:	f200 80e1 	bhi.w	80043fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x34>
 800423e:	2b04      	cmp	r3, #4
 8004240:	d003      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0x3a>
 8004242:	e0db      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004244:	4b73      	ldr	r3, [pc, #460]	; (8004414 <HAL_RCC_GetSysClockFreq+0x204>)
 8004246:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004248:	e0db      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800424a:	4b73      	ldr	r3, [pc, #460]	; (8004418 <HAL_RCC_GetSysClockFreq+0x208>)
 800424c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800424e:	e0d8      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004250:	4b6f      	ldr	r3, [pc, #444]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004258:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800425a:	4b6d      	ldr	r3, [pc, #436]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d063      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004266:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	2200      	movs	r2, #0
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004270:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004278:	633b      	str	r3, [r7, #48]	; 0x30
 800427a:	2300      	movs	r3, #0
 800427c:	637b      	str	r3, [r7, #52]	; 0x34
 800427e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004282:	4622      	mov	r2, r4
 8004284:	462b      	mov	r3, r5
 8004286:	f04f 0000 	mov.w	r0, #0
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	0159      	lsls	r1, r3, #5
 8004290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004294:	0150      	lsls	r0, r2, #5
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4621      	mov	r1, r4
 800429c:	1a51      	subs	r1, r2, r1
 800429e:	6139      	str	r1, [r7, #16]
 80042a0:	4629      	mov	r1, r5
 80042a2:	eb63 0301 	sbc.w	r3, r3, r1
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042b4:	4659      	mov	r1, fp
 80042b6:	018b      	lsls	r3, r1, #6
 80042b8:	4651      	mov	r1, sl
 80042ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042be:	4651      	mov	r1, sl
 80042c0:	018a      	lsls	r2, r1, #6
 80042c2:	4651      	mov	r1, sl
 80042c4:	ebb2 0801 	subs.w	r8, r2, r1
 80042c8:	4659      	mov	r1, fp
 80042ca:	eb63 0901 	sbc.w	r9, r3, r1
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042e2:	4690      	mov	r8, r2
 80042e4:	4699      	mov	r9, r3
 80042e6:	4623      	mov	r3, r4
 80042e8:	eb18 0303 	adds.w	r3, r8, r3
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	462b      	mov	r3, r5
 80042f0:	eb49 0303 	adc.w	r3, r9, r3
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004302:	4629      	mov	r1, r5
 8004304:	024b      	lsls	r3, r1, #9
 8004306:	4621      	mov	r1, r4
 8004308:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800430c:	4621      	mov	r1, r4
 800430e:	024a      	lsls	r2, r1, #9
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004316:	2200      	movs	r2, #0
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
 800431a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800431c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004320:	f7fc fc92 	bl	8000c48 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4613      	mov	r3, r2
 800432a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800432c:	e058      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432e:	4b38      	ldr	r3, [pc, #224]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	099b      	lsrs	r3, r3, #6
 8004334:	2200      	movs	r2, #0
 8004336:	4618      	mov	r0, r3
 8004338:	4611      	mov	r1, r2
 800433a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800433e:	623b      	str	r3, [r7, #32]
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
 8004344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004348:	4642      	mov	r2, r8
 800434a:	464b      	mov	r3, r9
 800434c:	f04f 0000 	mov.w	r0, #0
 8004350:	f04f 0100 	mov.w	r1, #0
 8004354:	0159      	lsls	r1, r3, #5
 8004356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800435a:	0150      	lsls	r0, r2, #5
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4641      	mov	r1, r8
 8004362:	ebb2 0a01 	subs.w	sl, r2, r1
 8004366:	4649      	mov	r1, r9
 8004368:	eb63 0b01 	sbc.w	fp, r3, r1
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800437c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004380:	ebb2 040a 	subs.w	r4, r2, sl
 8004384:	eb63 050b 	sbc.w	r5, r3, fp
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	00eb      	lsls	r3, r5, #3
 8004392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004396:	00e2      	lsls	r2, r4, #3
 8004398:	4614      	mov	r4, r2
 800439a:	461d      	mov	r5, r3
 800439c:	4643      	mov	r3, r8
 800439e:	18e3      	adds	r3, r4, r3
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	464b      	mov	r3, r9
 80043a4:	eb45 0303 	adc.w	r3, r5, r3
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043b6:	4629      	mov	r1, r5
 80043b8:	028b      	lsls	r3, r1, #10
 80043ba:	4621      	mov	r1, r4
 80043bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c0:	4621      	mov	r1, r4
 80043c2:	028a      	lsls	r2, r1, #10
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ca:	2200      	movs	r2, #0
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	61fa      	str	r2, [r7, #28]
 80043d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d4:	f7fc fc38 	bl	8000c48 <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4613      	mov	r3, r2
 80043de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	3301      	adds	r3, #1
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetSysClockFreq+0x204>)
 80043fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004404:	4618      	mov	r0, r3
 8004406:	3750      	adds	r7, #80	; 0x50
 8004408:	46bd      	mov	sp, r7
 800440a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800
 8004414:	00f42400 	.word	0x00f42400
 8004418:	007a1200 	.word	0x007a1200

0800441c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <HAL_RCC_GetHCLKFreq+0x14>)
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000000 	.word	0x20000000

08004434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004438:	f7ff fff0 	bl	800441c <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	0a9b      	lsrs	r3, r3, #10
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	; (8004458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	08008314 	.word	0x08008314

0800445c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e041      	b.n	80044f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fd fb0a 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3304      	adds	r3, #4
 8004498:	4619      	mov	r1, r3
 800449a:	4610      	mov	r0, r2
 800449c:	f000 fcd4 	bl	8004e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d001      	beq.n	8004514 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e046      	b.n	80045a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a23      	ldr	r2, [pc, #140]	; (80045b0 <HAL_TIM_Base_Start+0xb4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d022      	beq.n	800456c <HAL_TIM_Base_Start+0x70>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452e:	d01d      	beq.n	800456c <HAL_TIM_Base_Start+0x70>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1f      	ldr	r2, [pc, #124]	; (80045b4 <HAL_TIM_Base_Start+0xb8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d018      	beq.n	800456c <HAL_TIM_Base_Start+0x70>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <HAL_TIM_Base_Start+0xbc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <HAL_TIM_Base_Start+0x70>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1c      	ldr	r2, [pc, #112]	; (80045bc <HAL_TIM_Base_Start+0xc0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00e      	beq.n	800456c <HAL_TIM_Base_Start+0x70>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1b      	ldr	r2, [pc, #108]	; (80045c0 <HAL_TIM_Base_Start+0xc4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_TIM_Base_Start+0x70>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <HAL_TIM_Base_Start+0xc8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_TIM_Base_Start+0x70>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <HAL_TIM_Base_Start+0xcc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d111      	bne.n	8004590 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b06      	cmp	r3, #6
 800457c:	d010      	beq.n	80045a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458e:	e007      	b.n	80045a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800
 80045bc:	40000c00 	.word	0x40000c00
 80045c0:	40010400 	.word	0x40010400
 80045c4:	40014000 	.word	0x40014000
 80045c8:	40001800 	.word	0x40001800

080045cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d001      	beq.n	80045e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e04e      	b.n	8004682 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a23      	ldr	r2, [pc, #140]	; (8004690 <HAL_TIM_Base_Start_IT+0xc4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d022      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x80>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460e:	d01d      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x80>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <HAL_TIM_Base_Start_IT+0xc8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d018      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x80>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1e      	ldr	r2, [pc, #120]	; (8004698 <HAL_TIM_Base_Start_IT+0xcc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d013      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x80>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1c      	ldr	r2, [pc, #112]	; (800469c <HAL_TIM_Base_Start_IT+0xd0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00e      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x80>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d009      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x80>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a19      	ldr	r2, [pc, #100]	; (80046a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x80>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d111      	bne.n	8004670 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b06      	cmp	r3, #6
 800465c:	d010      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466e:	e007      	b.n	8004680 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40010000 	.word	0x40010000
 8004694:	40000400 	.word	0x40000400
 8004698:	40000800 	.word	0x40000800
 800469c:	40000c00 	.word	0x40000c00
 80046a0:	40010400 	.word	0x40010400
 80046a4:	40014000 	.word	0x40014000
 80046a8:	40001800 	.word	0x40001800

080046ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e041      	b.n	8004742 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f839 	bl	800474a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f000 fbac 	bl	8004e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <HAL_TIM_PWM_Start+0x24>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	bf14      	ite	ne
 800477c:	2301      	movne	r3, #1
 800477e:	2300      	moveq	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	e022      	b.n	80047ca <HAL_TIM_PWM_Start+0x6a>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b04      	cmp	r3, #4
 8004788:	d109      	bne.n	800479e <HAL_TIM_PWM_Start+0x3e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	bf14      	ite	ne
 8004796:	2301      	movne	r3, #1
 8004798:	2300      	moveq	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	e015      	b.n	80047ca <HAL_TIM_PWM_Start+0x6a>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d109      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x58>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e008      	b.n	80047ca <HAL_TIM_PWM_Start+0x6a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e07c      	b.n	80048cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_PWM_Start+0x82>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e0:	e013      	b.n	800480a <HAL_TIM_PWM_Start+0xaa>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_PWM_Start+0x92>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f0:	e00b      	b.n	800480a <HAL_TIM_PWM_Start+0xaa>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_PWM_Start+0xa2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004800:	e003      	b.n	800480a <HAL_TIM_PWM_Start+0xaa>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2201      	movs	r2, #1
 8004810:	6839      	ldr	r1, [r7, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fe0e 	bl	8005434 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2d      	ldr	r2, [pc, #180]	; (80048d4 <HAL_TIM_PWM_Start+0x174>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_TIM_PWM_Start+0xcc>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2c      	ldr	r2, [pc, #176]	; (80048d8 <HAL_TIM_PWM_Start+0x178>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d101      	bne.n	8004830 <HAL_TIM_PWM_Start+0xd0>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_TIM_PWM_Start+0xd2>
 8004830:	2300      	movs	r3, #0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <HAL_TIM_PWM_Start+0x174>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d022      	beq.n	8004896 <HAL_TIM_PWM_Start+0x136>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d01d      	beq.n	8004896 <HAL_TIM_PWM_Start+0x136>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <HAL_TIM_PWM_Start+0x17c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d018      	beq.n	8004896 <HAL_TIM_PWM_Start+0x136>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <HAL_TIM_PWM_Start+0x180>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_TIM_PWM_Start+0x136>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <HAL_TIM_PWM_Start+0x184>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_TIM_PWM_Start+0x136>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <HAL_TIM_PWM_Start+0x178>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_TIM_PWM_Start+0x136>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <HAL_TIM_PWM_Start+0x188>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_TIM_PWM_Start+0x136>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a16      	ldr	r2, [pc, #88]	; (80048ec <HAL_TIM_PWM_Start+0x18c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d111      	bne.n	80048ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b06      	cmp	r3, #6
 80048a6:	d010      	beq.n	80048ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b8:	e007      	b.n	80048ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 0201 	orr.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40010400 	.word	0x40010400
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	40000c00 	.word	0x40000c00
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40001800 	.word	0x40001800

080048f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d020      	beq.n	8004954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01b      	beq.n	8004954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0202 	mvn.w	r2, #2
 8004924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fa65 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa57 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fa68 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d020      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01b      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0204 	mvn.w	r2, #4
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fa3f 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa31 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fa42 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d020      	beq.n	80049ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01b      	beq.n	80049ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0208 	mvn.w	r2, #8
 80049bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2204      	movs	r2, #4
 80049c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fa19 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 80049d8:	e005      	b.n	80049e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fa0b 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fa1c 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d020      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01b      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0210 	mvn.w	r2, #16
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9f3 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f9e5 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f9f6 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0201 	mvn.w	r2, #1
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9c3 	bl	8004de2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00c      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fd86 	bl	800558c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f9c7 	bl	8004e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0220 	mvn.w	r2, #32
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fd58 	bl	8005578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0ae      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	f200 809f 	bhi.w	8004c3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004c3d 	.word	0x08004c3d
 8004b0c:	08004c3d 	.word	0x08004c3d
 8004b10:	08004c3d 	.word	0x08004c3d
 8004b14:	08004b79 	.word	0x08004b79
 8004b18:	08004c3d 	.word	0x08004c3d
 8004b1c:	08004c3d 	.word	0x08004c3d
 8004b20:	08004c3d 	.word	0x08004c3d
 8004b24:	08004bbb 	.word	0x08004bbb
 8004b28:	08004c3d 	.word	0x08004c3d
 8004b2c:	08004c3d 	.word	0x08004c3d
 8004b30:	08004c3d 	.word	0x08004c3d
 8004b34:	08004bfb 	.word	0x08004bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fa2e 	bl	8004fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0208 	orr.w	r2, r2, #8
 8004b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0204 	bic.w	r2, r2, #4
 8004b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6999      	ldr	r1, [r3, #24]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	619a      	str	r2, [r3, #24]
      break;
 8004b76:	e064      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fa7e 	bl	8005080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6999      	ldr	r1, [r3, #24]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	021a      	lsls	r2, r3, #8
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	619a      	str	r2, [r3, #24]
      break;
 8004bb8:	e043      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fad3 	bl	800516c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0208 	orr.w	r2, r2, #8
 8004bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0204 	bic.w	r2, r2, #4
 8004be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69d9      	ldr	r1, [r3, #28]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	61da      	str	r2, [r3, #28]
      break;
 8004bf8:	e023      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fb27 	bl	8005254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69d9      	ldr	r1, [r3, #28]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	021a      	lsls	r2, r3, #8
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	61da      	str	r2, [r3, #28]
      break;
 8004c3a:	e002      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIM_ConfigClockSource+0x1c>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e0b4      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x186>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca8:	d03e      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0xd4>
 8004caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cae:	f200 8087 	bhi.w	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb6:	f000 8086 	beq.w	8004dc6 <HAL_TIM_ConfigClockSource+0x172>
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbe:	d87f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b70      	cmp	r3, #112	; 0x70
 8004cc2:	d01a      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0xa6>
 8004cc4:	2b70      	cmp	r3, #112	; 0x70
 8004cc6:	d87b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b60      	cmp	r3, #96	; 0x60
 8004cca:	d050      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x11a>
 8004ccc:	2b60      	cmp	r3, #96	; 0x60
 8004cce:	d877      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b50      	cmp	r3, #80	; 0x50
 8004cd2:	d03c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0xfa>
 8004cd4:	2b50      	cmp	r3, #80	; 0x50
 8004cd6:	d873      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d058      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x13a>
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d86f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b30      	cmp	r3, #48	; 0x30
 8004ce2:	d064      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004ce4:	2b30      	cmp	r3, #48	; 0x30
 8004ce6:	d86b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d060      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d867      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05c      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d05a      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf8:	e062      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d0a:	f000 fb73 	bl	80053f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	609a      	str	r2, [r3, #8]
      break;
 8004d26:	e04f      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d38:	f000 fb5c 	bl	80053f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d4a:	609a      	str	r2, [r3, #8]
      break;
 8004d4c:	e03c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 fad0 	bl	8005300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2150      	movs	r1, #80	; 0x50
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fb29 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e02c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f000 faef 	bl	800535e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2160      	movs	r1, #96	; 0x60
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fb19 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 8004d8c:	e01c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f000 fab0 	bl	8005300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2140      	movs	r1, #64	; 0x40
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fb09 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 8004dac:	e00c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f000 fb00 	bl	80053be <TIM_ITRx_SetConfig>
      break;
 8004dbe:	e003      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc4:	e000      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a46      	ldr	r2, [pc, #280]	; (8004f74 <TIM_Base_SetConfig+0x12c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e66:	d00f      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a43      	ldr	r2, [pc, #268]	; (8004f78 <TIM_Base_SetConfig+0x130>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00b      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a42      	ldr	r2, [pc, #264]	; (8004f7c <TIM_Base_SetConfig+0x134>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d007      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a41      	ldr	r2, [pc, #260]	; (8004f80 <TIM_Base_SetConfig+0x138>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a40      	ldr	r2, [pc, #256]	; (8004f84 <TIM_Base_SetConfig+0x13c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a35      	ldr	r2, [pc, #212]	; (8004f74 <TIM_Base_SetConfig+0x12c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02b      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea8:	d027      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a32      	ldr	r2, [pc, #200]	; (8004f78 <TIM_Base_SetConfig+0x130>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d023      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a31      	ldr	r2, [pc, #196]	; (8004f7c <TIM_Base_SetConfig+0x134>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a30      	ldr	r2, [pc, #192]	; (8004f80 <TIM_Base_SetConfig+0x138>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01b      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2f      	ldr	r2, [pc, #188]	; (8004f84 <TIM_Base_SetConfig+0x13c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d017      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2e      	ldr	r2, [pc, #184]	; (8004f88 <TIM_Base_SetConfig+0x140>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a2d      	ldr	r2, [pc, #180]	; (8004f8c <TIM_Base_SetConfig+0x144>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00f      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <TIM_Base_SetConfig+0x148>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00b      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <TIM_Base_SetConfig+0x14c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d007      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2a      	ldr	r2, [pc, #168]	; (8004f98 <TIM_Base_SetConfig+0x150>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a29      	ldr	r2, [pc, #164]	; (8004f9c <TIM_Base_SetConfig+0x154>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d108      	bne.n	8004f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a10      	ldr	r2, [pc, #64]	; (8004f74 <TIM_Base_SetConfig+0x12c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0xf8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a12      	ldr	r2, [pc, #72]	; (8004f84 <TIM_Base_SetConfig+0x13c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d103      	bne.n	8004f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d105      	bne.n	8004f66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f023 0201 	bic.w	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	611a      	str	r2, [r3, #16]
  }
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40010000 	.word	0x40010000
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	40000800 	.word	0x40000800
 8004f80:	40000c00 	.word	0x40000c00
 8004f84:	40010400 	.word	0x40010400
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800
 8004f94:	40001800 	.word	0x40001800
 8004f98:	40001c00 	.word	0x40001c00
 8004f9c:	40002000 	.word	0x40002000

08004fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f023 0201 	bic.w	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f023 0302 	bic.w	r3, r3, #2
 8004fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a20      	ldr	r2, [pc, #128]	; (8005078 <TIM_OC1_SetConfig+0xd8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_OC1_SetConfig+0x64>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a1f      	ldr	r2, [pc, #124]	; (800507c <TIM_OC1_SetConfig+0xdc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d10c      	bne.n	800501e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0308 	bic.w	r3, r3, #8
 800500a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	4313      	orrs	r3, r2
 8005014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f023 0304 	bic.w	r3, r3, #4
 800501c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a15      	ldr	r2, [pc, #84]	; (8005078 <TIM_OC1_SetConfig+0xd8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_OC1_SetConfig+0x8e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a14      	ldr	r2, [pc, #80]	; (800507c <TIM_OC1_SetConfig+0xdc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d111      	bne.n	8005052 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800503c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	621a      	str	r2, [r3, #32]
}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	40010000 	.word	0x40010000
 800507c:	40010400 	.word	0x40010400

08005080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f023 0210 	bic.w	r2, r3, #16
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0320 	bic.w	r3, r3, #32
 80050ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a22      	ldr	r2, [pc, #136]	; (8005164 <TIM_OC2_SetConfig+0xe4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_OC2_SetConfig+0x68>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a21      	ldr	r2, [pc, #132]	; (8005168 <TIM_OC2_SetConfig+0xe8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d10d      	bne.n	8005104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005102:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a17      	ldr	r2, [pc, #92]	; (8005164 <TIM_OC2_SetConfig+0xe4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_OC2_SetConfig+0x94>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a16      	ldr	r2, [pc, #88]	; (8005168 <TIM_OC2_SetConfig+0xe8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d113      	bne.n	800513c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800511a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000
 8005168:	40010400 	.word	0x40010400

0800516c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0303 	bic.w	r3, r3, #3
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a21      	ldr	r2, [pc, #132]	; (800524c <TIM_OC3_SetConfig+0xe0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <TIM_OC3_SetConfig+0x66>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a20      	ldr	r2, [pc, #128]	; (8005250 <TIM_OC3_SetConfig+0xe4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d10d      	bne.n	80051ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a16      	ldr	r2, [pc, #88]	; (800524c <TIM_OC3_SetConfig+0xe0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_OC3_SetConfig+0x92>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a15      	ldr	r2, [pc, #84]	; (8005250 <TIM_OC3_SetConfig+0xe4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d113      	bne.n	8005226 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800520c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	621a      	str	r2, [r3, #32]
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	40010000 	.word	0x40010000
 8005250:	40010400 	.word	0x40010400

08005254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800529e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	031b      	lsls	r3, r3, #12
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <TIM_OC4_SetConfig+0xa4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_OC4_SetConfig+0x68>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a11      	ldr	r2, [pc, #68]	; (80052fc <TIM_OC4_SetConfig+0xa8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d109      	bne.n	80052d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	019b      	lsls	r3, r3, #6
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40010400 	.word	0x40010400

08005300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800532a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 030a 	bic.w	r3, r3, #10
 800533c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	621a      	str	r2, [r3, #32]
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800535e:	b480      	push	{r7}
 8005360:	b087      	sub	sp, #28
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f023 0210 	bic.w	r2, r3, #16
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	031b      	lsls	r3, r3, #12
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800539a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	bf00      	nop
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	f043 0307 	orr.w	r3, r3, #7
 80053e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	609a      	str	r2, [r3, #8]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800540e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	021a      	lsls	r2, r3, #8
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	431a      	orrs	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4313      	orrs	r3, r2
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	609a      	str	r2, [r3, #8]
}
 8005428:	bf00      	nop
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	2201      	movs	r2, #1
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1a      	ldr	r2, [r3, #32]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	43db      	mvns	r3, r3
 8005456:	401a      	ands	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1a      	ldr	r2, [r3, #32]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	fa01 f303 	lsl.w	r3, r1, r3
 800546c:	431a      	orrs	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005494:	2302      	movs	r3, #2
 8005496:	e05a      	b.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a21      	ldr	r2, [pc, #132]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e4:	d01d      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1a      	ldr	r2, [pc, #104]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a18      	ldr	r2, [pc, #96]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a17      	ldr	r2, [pc, #92]	; (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a15      	ldr	r2, [pc, #84]	; (8005574 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d10c      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	4313      	orrs	r3, r2
 8005532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010000 	.word	0x40010000
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40010400 	.word	0x40010400
 8005570:	40014000 	.word	0x40014000
 8005574:	40001800 	.word	0x40001800

08005578 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <__cvt>:
 80055a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055a4:	ec55 4b10 	vmov	r4, r5, d0
 80055a8:	2d00      	cmp	r5, #0
 80055aa:	460e      	mov	r6, r1
 80055ac:	4619      	mov	r1, r3
 80055ae:	462b      	mov	r3, r5
 80055b0:	bfbb      	ittet	lt
 80055b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055b6:	461d      	movlt	r5, r3
 80055b8:	2300      	movge	r3, #0
 80055ba:	232d      	movlt	r3, #45	; 0x2d
 80055bc:	700b      	strb	r3, [r1, #0]
 80055be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80055c4:	4691      	mov	r9, r2
 80055c6:	f023 0820 	bic.w	r8, r3, #32
 80055ca:	bfbc      	itt	lt
 80055cc:	4622      	movlt	r2, r4
 80055ce:	4614      	movlt	r4, r2
 80055d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055d4:	d005      	beq.n	80055e2 <__cvt+0x42>
 80055d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055da:	d100      	bne.n	80055de <__cvt+0x3e>
 80055dc:	3601      	adds	r6, #1
 80055de:	2102      	movs	r1, #2
 80055e0:	e000      	b.n	80055e4 <__cvt+0x44>
 80055e2:	2103      	movs	r1, #3
 80055e4:	ab03      	add	r3, sp, #12
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	ab02      	add	r3, sp, #8
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	ec45 4b10 	vmov	d0, r4, r5
 80055f0:	4653      	mov	r3, sl
 80055f2:	4632      	mov	r2, r6
 80055f4:	f000 fe68 	bl	80062c8 <_dtoa_r>
 80055f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055fc:	4607      	mov	r7, r0
 80055fe:	d102      	bne.n	8005606 <__cvt+0x66>
 8005600:	f019 0f01 	tst.w	r9, #1
 8005604:	d022      	beq.n	800564c <__cvt+0xac>
 8005606:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800560a:	eb07 0906 	add.w	r9, r7, r6
 800560e:	d110      	bne.n	8005632 <__cvt+0x92>
 8005610:	783b      	ldrb	r3, [r7, #0]
 8005612:	2b30      	cmp	r3, #48	; 0x30
 8005614:	d10a      	bne.n	800562c <__cvt+0x8c>
 8005616:	2200      	movs	r2, #0
 8005618:	2300      	movs	r3, #0
 800561a:	4620      	mov	r0, r4
 800561c:	4629      	mov	r1, r5
 800561e:	f7fb fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 8005622:	b918      	cbnz	r0, 800562c <__cvt+0x8c>
 8005624:	f1c6 0601 	rsb	r6, r6, #1
 8005628:	f8ca 6000 	str.w	r6, [sl]
 800562c:	f8da 3000 	ldr.w	r3, [sl]
 8005630:	4499      	add	r9, r3
 8005632:	2200      	movs	r2, #0
 8005634:	2300      	movs	r3, #0
 8005636:	4620      	mov	r0, r4
 8005638:	4629      	mov	r1, r5
 800563a:	f7fb fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 800563e:	b108      	cbz	r0, 8005644 <__cvt+0xa4>
 8005640:	f8cd 900c 	str.w	r9, [sp, #12]
 8005644:	2230      	movs	r2, #48	; 0x30
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	454b      	cmp	r3, r9
 800564a:	d307      	bcc.n	800565c <__cvt+0xbc>
 800564c:	9b03      	ldr	r3, [sp, #12]
 800564e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005650:	1bdb      	subs	r3, r3, r7
 8005652:	4638      	mov	r0, r7
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	b004      	add	sp, #16
 8005658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565c:	1c59      	adds	r1, r3, #1
 800565e:	9103      	str	r1, [sp, #12]
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	e7f0      	b.n	8005646 <__cvt+0xa6>

08005664 <__exponent>:
 8005664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005666:	4603      	mov	r3, r0
 8005668:	2900      	cmp	r1, #0
 800566a:	bfb8      	it	lt
 800566c:	4249      	neglt	r1, r1
 800566e:	f803 2b02 	strb.w	r2, [r3], #2
 8005672:	bfb4      	ite	lt
 8005674:	222d      	movlt	r2, #45	; 0x2d
 8005676:	222b      	movge	r2, #43	; 0x2b
 8005678:	2909      	cmp	r1, #9
 800567a:	7042      	strb	r2, [r0, #1]
 800567c:	dd2a      	ble.n	80056d4 <__exponent+0x70>
 800567e:	f10d 0207 	add.w	r2, sp, #7
 8005682:	4617      	mov	r7, r2
 8005684:	260a      	movs	r6, #10
 8005686:	4694      	mov	ip, r2
 8005688:	fb91 f5f6 	sdiv	r5, r1, r6
 800568c:	fb06 1415 	mls	r4, r6, r5, r1
 8005690:	3430      	adds	r4, #48	; 0x30
 8005692:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005696:	460c      	mov	r4, r1
 8005698:	2c63      	cmp	r4, #99	; 0x63
 800569a:	f102 32ff 	add.w	r2, r2, #4294967295
 800569e:	4629      	mov	r1, r5
 80056a0:	dcf1      	bgt.n	8005686 <__exponent+0x22>
 80056a2:	3130      	adds	r1, #48	; 0x30
 80056a4:	f1ac 0402 	sub.w	r4, ip, #2
 80056a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80056ac:	1c41      	adds	r1, r0, #1
 80056ae:	4622      	mov	r2, r4
 80056b0:	42ba      	cmp	r2, r7
 80056b2:	d30a      	bcc.n	80056ca <__exponent+0x66>
 80056b4:	f10d 0209 	add.w	r2, sp, #9
 80056b8:	eba2 020c 	sub.w	r2, r2, ip
 80056bc:	42bc      	cmp	r4, r7
 80056be:	bf88      	it	hi
 80056c0:	2200      	movhi	r2, #0
 80056c2:	4413      	add	r3, r2
 80056c4:	1a18      	subs	r0, r3, r0
 80056c6:	b003      	add	sp, #12
 80056c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80056ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80056d2:	e7ed      	b.n	80056b0 <__exponent+0x4c>
 80056d4:	2330      	movs	r3, #48	; 0x30
 80056d6:	3130      	adds	r1, #48	; 0x30
 80056d8:	7083      	strb	r3, [r0, #2]
 80056da:	70c1      	strb	r1, [r0, #3]
 80056dc:	1d03      	adds	r3, r0, #4
 80056de:	e7f1      	b.n	80056c4 <__exponent+0x60>

080056e0 <_printf_float>:
 80056e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	ed2d 8b02 	vpush	{d8}
 80056e8:	b08d      	sub	sp, #52	; 0x34
 80056ea:	460c      	mov	r4, r1
 80056ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80056f0:	4616      	mov	r6, r2
 80056f2:	461f      	mov	r7, r3
 80056f4:	4605      	mov	r5, r0
 80056f6:	f000 fce7 	bl	80060c8 <_localeconv_r>
 80056fa:	f8d0 a000 	ldr.w	sl, [r0]
 80056fe:	4650      	mov	r0, sl
 8005700:	f7fa fdb6 	bl	8000270 <strlen>
 8005704:	2300      	movs	r3, #0
 8005706:	930a      	str	r3, [sp, #40]	; 0x28
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	9305      	str	r3, [sp, #20]
 800570c:	f8d8 3000 	ldr.w	r3, [r8]
 8005710:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005714:	3307      	adds	r3, #7
 8005716:	f023 0307 	bic.w	r3, r3, #7
 800571a:	f103 0208 	add.w	r2, r3, #8
 800571e:	f8c8 2000 	str.w	r2, [r8]
 8005722:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005726:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800572a:	9307      	str	r3, [sp, #28]
 800572c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005730:	ee08 0a10 	vmov	s16, r0
 8005734:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800573c:	4b9e      	ldr	r3, [pc, #632]	; (80059b8 <_printf_float+0x2d8>)
 800573e:	f04f 32ff 	mov.w	r2, #4294967295
 8005742:	f7fb f9f3 	bl	8000b2c <__aeabi_dcmpun>
 8005746:	bb88      	cbnz	r0, 80057ac <_printf_float+0xcc>
 8005748:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800574c:	4b9a      	ldr	r3, [pc, #616]	; (80059b8 <_printf_float+0x2d8>)
 800574e:	f04f 32ff 	mov.w	r2, #4294967295
 8005752:	f7fb f9cd 	bl	8000af0 <__aeabi_dcmple>
 8005756:	bb48      	cbnz	r0, 80057ac <_printf_float+0xcc>
 8005758:	2200      	movs	r2, #0
 800575a:	2300      	movs	r3, #0
 800575c:	4640      	mov	r0, r8
 800575e:	4649      	mov	r1, r9
 8005760:	f7fb f9bc 	bl	8000adc <__aeabi_dcmplt>
 8005764:	b110      	cbz	r0, 800576c <_printf_float+0x8c>
 8005766:	232d      	movs	r3, #45	; 0x2d
 8005768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800576c:	4a93      	ldr	r2, [pc, #588]	; (80059bc <_printf_float+0x2dc>)
 800576e:	4b94      	ldr	r3, [pc, #592]	; (80059c0 <_printf_float+0x2e0>)
 8005770:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005774:	bf94      	ite	ls
 8005776:	4690      	movls	r8, r2
 8005778:	4698      	movhi	r8, r3
 800577a:	2303      	movs	r3, #3
 800577c:	6123      	str	r3, [r4, #16]
 800577e:	9b05      	ldr	r3, [sp, #20]
 8005780:	f023 0304 	bic.w	r3, r3, #4
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	f04f 0900 	mov.w	r9, #0
 800578a:	9700      	str	r7, [sp, #0]
 800578c:	4633      	mov	r3, r6
 800578e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005790:	4621      	mov	r1, r4
 8005792:	4628      	mov	r0, r5
 8005794:	f000 f9da 	bl	8005b4c <_printf_common>
 8005798:	3001      	adds	r0, #1
 800579a:	f040 8090 	bne.w	80058be <_printf_float+0x1de>
 800579e:	f04f 30ff 	mov.w	r0, #4294967295
 80057a2:	b00d      	add	sp, #52	; 0x34
 80057a4:	ecbd 8b02 	vpop	{d8}
 80057a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ac:	4642      	mov	r2, r8
 80057ae:	464b      	mov	r3, r9
 80057b0:	4640      	mov	r0, r8
 80057b2:	4649      	mov	r1, r9
 80057b4:	f7fb f9ba 	bl	8000b2c <__aeabi_dcmpun>
 80057b8:	b140      	cbz	r0, 80057cc <_printf_float+0xec>
 80057ba:	464b      	mov	r3, r9
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bfbc      	itt	lt
 80057c0:	232d      	movlt	r3, #45	; 0x2d
 80057c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057c6:	4a7f      	ldr	r2, [pc, #508]	; (80059c4 <_printf_float+0x2e4>)
 80057c8:	4b7f      	ldr	r3, [pc, #508]	; (80059c8 <_printf_float+0x2e8>)
 80057ca:	e7d1      	b.n	8005770 <_printf_float+0x90>
 80057cc:	6863      	ldr	r3, [r4, #4]
 80057ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80057d2:	9206      	str	r2, [sp, #24]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	d13f      	bne.n	8005858 <_printf_float+0x178>
 80057d8:	2306      	movs	r3, #6
 80057da:	6063      	str	r3, [r4, #4]
 80057dc:	9b05      	ldr	r3, [sp, #20]
 80057de:	6861      	ldr	r1, [r4, #4]
 80057e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80057e4:	2300      	movs	r3, #0
 80057e6:	9303      	str	r3, [sp, #12]
 80057e8:	ab0a      	add	r3, sp, #40	; 0x28
 80057ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80057ee:	ab09      	add	r3, sp, #36	; 0x24
 80057f0:	ec49 8b10 	vmov	d0, r8, r9
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	6022      	str	r2, [r4, #0]
 80057f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80057fc:	4628      	mov	r0, r5
 80057fe:	f7ff fecf 	bl	80055a0 <__cvt>
 8005802:	9b06      	ldr	r3, [sp, #24]
 8005804:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005806:	2b47      	cmp	r3, #71	; 0x47
 8005808:	4680      	mov	r8, r0
 800580a:	d108      	bne.n	800581e <_printf_float+0x13e>
 800580c:	1cc8      	adds	r0, r1, #3
 800580e:	db02      	blt.n	8005816 <_printf_float+0x136>
 8005810:	6863      	ldr	r3, [r4, #4]
 8005812:	4299      	cmp	r1, r3
 8005814:	dd41      	ble.n	800589a <_printf_float+0x1ba>
 8005816:	f1ab 0302 	sub.w	r3, fp, #2
 800581a:	fa5f fb83 	uxtb.w	fp, r3
 800581e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005822:	d820      	bhi.n	8005866 <_printf_float+0x186>
 8005824:	3901      	subs	r1, #1
 8005826:	465a      	mov	r2, fp
 8005828:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800582c:	9109      	str	r1, [sp, #36]	; 0x24
 800582e:	f7ff ff19 	bl	8005664 <__exponent>
 8005832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005834:	1813      	adds	r3, r2, r0
 8005836:	2a01      	cmp	r2, #1
 8005838:	4681      	mov	r9, r0
 800583a:	6123      	str	r3, [r4, #16]
 800583c:	dc02      	bgt.n	8005844 <_printf_float+0x164>
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	07d2      	lsls	r2, r2, #31
 8005842:	d501      	bpl.n	8005848 <_printf_float+0x168>
 8005844:	3301      	adds	r3, #1
 8005846:	6123      	str	r3, [r4, #16]
 8005848:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800584c:	2b00      	cmp	r3, #0
 800584e:	d09c      	beq.n	800578a <_printf_float+0xaa>
 8005850:	232d      	movs	r3, #45	; 0x2d
 8005852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005856:	e798      	b.n	800578a <_printf_float+0xaa>
 8005858:	9a06      	ldr	r2, [sp, #24]
 800585a:	2a47      	cmp	r2, #71	; 0x47
 800585c:	d1be      	bne.n	80057dc <_printf_float+0xfc>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1bc      	bne.n	80057dc <_printf_float+0xfc>
 8005862:	2301      	movs	r3, #1
 8005864:	e7b9      	b.n	80057da <_printf_float+0xfa>
 8005866:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800586a:	d118      	bne.n	800589e <_printf_float+0x1be>
 800586c:	2900      	cmp	r1, #0
 800586e:	6863      	ldr	r3, [r4, #4]
 8005870:	dd0b      	ble.n	800588a <_printf_float+0x1aa>
 8005872:	6121      	str	r1, [r4, #16]
 8005874:	b913      	cbnz	r3, 800587c <_printf_float+0x19c>
 8005876:	6822      	ldr	r2, [r4, #0]
 8005878:	07d0      	lsls	r0, r2, #31
 800587a:	d502      	bpl.n	8005882 <_printf_float+0x1a2>
 800587c:	3301      	adds	r3, #1
 800587e:	440b      	add	r3, r1
 8005880:	6123      	str	r3, [r4, #16]
 8005882:	65a1      	str	r1, [r4, #88]	; 0x58
 8005884:	f04f 0900 	mov.w	r9, #0
 8005888:	e7de      	b.n	8005848 <_printf_float+0x168>
 800588a:	b913      	cbnz	r3, 8005892 <_printf_float+0x1b2>
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	07d2      	lsls	r2, r2, #31
 8005890:	d501      	bpl.n	8005896 <_printf_float+0x1b6>
 8005892:	3302      	adds	r3, #2
 8005894:	e7f4      	b.n	8005880 <_printf_float+0x1a0>
 8005896:	2301      	movs	r3, #1
 8005898:	e7f2      	b.n	8005880 <_printf_float+0x1a0>
 800589a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800589e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a0:	4299      	cmp	r1, r3
 80058a2:	db05      	blt.n	80058b0 <_printf_float+0x1d0>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	6121      	str	r1, [r4, #16]
 80058a8:	07d8      	lsls	r0, r3, #31
 80058aa:	d5ea      	bpl.n	8005882 <_printf_float+0x1a2>
 80058ac:	1c4b      	adds	r3, r1, #1
 80058ae:	e7e7      	b.n	8005880 <_printf_float+0x1a0>
 80058b0:	2900      	cmp	r1, #0
 80058b2:	bfd4      	ite	le
 80058b4:	f1c1 0202 	rsble	r2, r1, #2
 80058b8:	2201      	movgt	r2, #1
 80058ba:	4413      	add	r3, r2
 80058bc:	e7e0      	b.n	8005880 <_printf_float+0x1a0>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	055a      	lsls	r2, r3, #21
 80058c2:	d407      	bmi.n	80058d4 <_printf_float+0x1f4>
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	4642      	mov	r2, r8
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	d12c      	bne.n	800592c <_printf_float+0x24c>
 80058d2:	e764      	b.n	800579e <_printf_float+0xbe>
 80058d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058d8:	f240 80e0 	bls.w	8005a9c <_printf_float+0x3bc>
 80058dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058e0:	2200      	movs	r2, #0
 80058e2:	2300      	movs	r3, #0
 80058e4:	f7fb f8f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d034      	beq.n	8005956 <_printf_float+0x276>
 80058ec:	4a37      	ldr	r2, [pc, #220]	; (80059cc <_printf_float+0x2ec>)
 80058ee:	2301      	movs	r3, #1
 80058f0:	4631      	mov	r1, r6
 80058f2:	4628      	mov	r0, r5
 80058f4:	47b8      	blx	r7
 80058f6:	3001      	adds	r0, #1
 80058f8:	f43f af51 	beq.w	800579e <_printf_float+0xbe>
 80058fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005900:	429a      	cmp	r2, r3
 8005902:	db02      	blt.n	800590a <_printf_float+0x22a>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	07d8      	lsls	r0, r3, #31
 8005908:	d510      	bpl.n	800592c <_printf_float+0x24c>
 800590a:	ee18 3a10 	vmov	r3, s16
 800590e:	4652      	mov	r2, sl
 8005910:	4631      	mov	r1, r6
 8005912:	4628      	mov	r0, r5
 8005914:	47b8      	blx	r7
 8005916:	3001      	adds	r0, #1
 8005918:	f43f af41 	beq.w	800579e <_printf_float+0xbe>
 800591c:	f04f 0800 	mov.w	r8, #0
 8005920:	f104 091a 	add.w	r9, r4, #26
 8005924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005926:	3b01      	subs	r3, #1
 8005928:	4543      	cmp	r3, r8
 800592a:	dc09      	bgt.n	8005940 <_printf_float+0x260>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	079b      	lsls	r3, r3, #30
 8005930:	f100 8107 	bmi.w	8005b42 <_printf_float+0x462>
 8005934:	68e0      	ldr	r0, [r4, #12]
 8005936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005938:	4298      	cmp	r0, r3
 800593a:	bfb8      	it	lt
 800593c:	4618      	movlt	r0, r3
 800593e:	e730      	b.n	80057a2 <_printf_float+0xc2>
 8005940:	2301      	movs	r3, #1
 8005942:	464a      	mov	r2, r9
 8005944:	4631      	mov	r1, r6
 8005946:	4628      	mov	r0, r5
 8005948:	47b8      	blx	r7
 800594a:	3001      	adds	r0, #1
 800594c:	f43f af27 	beq.w	800579e <_printf_float+0xbe>
 8005950:	f108 0801 	add.w	r8, r8, #1
 8005954:	e7e6      	b.n	8005924 <_printf_float+0x244>
 8005956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005958:	2b00      	cmp	r3, #0
 800595a:	dc39      	bgt.n	80059d0 <_printf_float+0x2f0>
 800595c:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <_printf_float+0x2ec>)
 800595e:	2301      	movs	r3, #1
 8005960:	4631      	mov	r1, r6
 8005962:	4628      	mov	r0, r5
 8005964:	47b8      	blx	r7
 8005966:	3001      	adds	r0, #1
 8005968:	f43f af19 	beq.w	800579e <_printf_float+0xbe>
 800596c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005970:	4313      	orrs	r3, r2
 8005972:	d102      	bne.n	800597a <_printf_float+0x29a>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	07d9      	lsls	r1, r3, #31
 8005978:	d5d8      	bpl.n	800592c <_printf_float+0x24c>
 800597a:	ee18 3a10 	vmov	r3, s16
 800597e:	4652      	mov	r2, sl
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	f43f af09 	beq.w	800579e <_printf_float+0xbe>
 800598c:	f04f 0900 	mov.w	r9, #0
 8005990:	f104 0a1a 	add.w	sl, r4, #26
 8005994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005996:	425b      	negs	r3, r3
 8005998:	454b      	cmp	r3, r9
 800599a:	dc01      	bgt.n	80059a0 <_printf_float+0x2c0>
 800599c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800599e:	e792      	b.n	80058c6 <_printf_float+0x1e6>
 80059a0:	2301      	movs	r3, #1
 80059a2:	4652      	mov	r2, sl
 80059a4:	4631      	mov	r1, r6
 80059a6:	4628      	mov	r0, r5
 80059a8:	47b8      	blx	r7
 80059aa:	3001      	adds	r0, #1
 80059ac:	f43f aef7 	beq.w	800579e <_printf_float+0xbe>
 80059b0:	f109 0901 	add.w	r9, r9, #1
 80059b4:	e7ee      	b.n	8005994 <_printf_float+0x2b4>
 80059b6:	bf00      	nop
 80059b8:	7fefffff 	.word	0x7fefffff
 80059bc:	08008324 	.word	0x08008324
 80059c0:	08008328 	.word	0x08008328
 80059c4:	0800832c 	.word	0x0800832c
 80059c8:	08008330 	.word	0x08008330
 80059cc:	08008334 	.word	0x08008334
 80059d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059d4:	429a      	cmp	r2, r3
 80059d6:	bfa8      	it	ge
 80059d8:	461a      	movge	r2, r3
 80059da:	2a00      	cmp	r2, #0
 80059dc:	4691      	mov	r9, r2
 80059de:	dc37      	bgt.n	8005a50 <_printf_float+0x370>
 80059e0:	f04f 0b00 	mov.w	fp, #0
 80059e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059e8:	f104 021a 	add.w	r2, r4, #26
 80059ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059ee:	9305      	str	r3, [sp, #20]
 80059f0:	eba3 0309 	sub.w	r3, r3, r9
 80059f4:	455b      	cmp	r3, fp
 80059f6:	dc33      	bgt.n	8005a60 <_printf_float+0x380>
 80059f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059fc:	429a      	cmp	r2, r3
 80059fe:	db3b      	blt.n	8005a78 <_printf_float+0x398>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	07da      	lsls	r2, r3, #31
 8005a04:	d438      	bmi.n	8005a78 <_printf_float+0x398>
 8005a06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a0a:	eba2 0903 	sub.w	r9, r2, r3
 8005a0e:	9b05      	ldr	r3, [sp, #20]
 8005a10:	1ad2      	subs	r2, r2, r3
 8005a12:	4591      	cmp	r9, r2
 8005a14:	bfa8      	it	ge
 8005a16:	4691      	movge	r9, r2
 8005a18:	f1b9 0f00 	cmp.w	r9, #0
 8005a1c:	dc35      	bgt.n	8005a8a <_printf_float+0x3aa>
 8005a1e:	f04f 0800 	mov.w	r8, #0
 8005a22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a26:	f104 0a1a 	add.w	sl, r4, #26
 8005a2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	eba3 0309 	sub.w	r3, r3, r9
 8005a34:	4543      	cmp	r3, r8
 8005a36:	f77f af79 	ble.w	800592c <_printf_float+0x24c>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4652      	mov	r2, sl
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b8      	blx	r7
 8005a44:	3001      	adds	r0, #1
 8005a46:	f43f aeaa 	beq.w	800579e <_printf_float+0xbe>
 8005a4a:	f108 0801 	add.w	r8, r8, #1
 8005a4e:	e7ec      	b.n	8005a2a <_printf_float+0x34a>
 8005a50:	4613      	mov	r3, r2
 8005a52:	4631      	mov	r1, r6
 8005a54:	4642      	mov	r2, r8
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d1c0      	bne.n	80059e0 <_printf_float+0x300>
 8005a5e:	e69e      	b.n	800579e <_printf_float+0xbe>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4631      	mov	r1, r6
 8005a64:	4628      	mov	r0, r5
 8005a66:	9205      	str	r2, [sp, #20]
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f ae97 	beq.w	800579e <_printf_float+0xbe>
 8005a70:	9a05      	ldr	r2, [sp, #20]
 8005a72:	f10b 0b01 	add.w	fp, fp, #1
 8005a76:	e7b9      	b.n	80059ec <_printf_float+0x30c>
 8005a78:	ee18 3a10 	vmov	r3, s16
 8005a7c:	4652      	mov	r2, sl
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b8      	blx	r7
 8005a84:	3001      	adds	r0, #1
 8005a86:	d1be      	bne.n	8005a06 <_printf_float+0x326>
 8005a88:	e689      	b.n	800579e <_printf_float+0xbe>
 8005a8a:	9a05      	ldr	r2, [sp, #20]
 8005a8c:	464b      	mov	r3, r9
 8005a8e:	4442      	add	r2, r8
 8005a90:	4631      	mov	r1, r6
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	d1c1      	bne.n	8005a1e <_printf_float+0x33e>
 8005a9a:	e680      	b.n	800579e <_printf_float+0xbe>
 8005a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a9e:	2a01      	cmp	r2, #1
 8005aa0:	dc01      	bgt.n	8005aa6 <_printf_float+0x3c6>
 8005aa2:	07db      	lsls	r3, r3, #31
 8005aa4:	d53a      	bpl.n	8005b1c <_printf_float+0x43c>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4628      	mov	r0, r5
 8005aae:	47b8      	blx	r7
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	f43f ae74 	beq.w	800579e <_printf_float+0xbe>
 8005ab6:	ee18 3a10 	vmov	r3, s16
 8005aba:	4652      	mov	r2, sl
 8005abc:	4631      	mov	r1, r6
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b8      	blx	r7
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f43f ae6b 	beq.w	800579e <_printf_float+0xbe>
 8005ac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005acc:	2200      	movs	r2, #0
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005ad4:	f7fa fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ad8:	b9d8      	cbnz	r0, 8005b12 <_printf_float+0x432>
 8005ada:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ade:	f108 0201 	add.w	r2, r8, #1
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b8      	blx	r7
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d10e      	bne.n	8005b0a <_printf_float+0x42a>
 8005aec:	e657      	b.n	800579e <_printf_float+0xbe>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4652      	mov	r2, sl
 8005af2:	4631      	mov	r1, r6
 8005af4:	4628      	mov	r0, r5
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	f43f ae50 	beq.w	800579e <_printf_float+0xbe>
 8005afe:	f108 0801 	add.w	r8, r8, #1
 8005b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b04:	3b01      	subs	r3, #1
 8005b06:	4543      	cmp	r3, r8
 8005b08:	dcf1      	bgt.n	8005aee <_printf_float+0x40e>
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b10:	e6da      	b.n	80058c8 <_printf_float+0x1e8>
 8005b12:	f04f 0800 	mov.w	r8, #0
 8005b16:	f104 0a1a 	add.w	sl, r4, #26
 8005b1a:	e7f2      	b.n	8005b02 <_printf_float+0x422>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	4642      	mov	r2, r8
 8005b20:	e7df      	b.n	8005ae2 <_printf_float+0x402>
 8005b22:	2301      	movs	r3, #1
 8005b24:	464a      	mov	r2, r9
 8005b26:	4631      	mov	r1, r6
 8005b28:	4628      	mov	r0, r5
 8005b2a:	47b8      	blx	r7
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	f43f ae36 	beq.w	800579e <_printf_float+0xbe>
 8005b32:	f108 0801 	add.w	r8, r8, #1
 8005b36:	68e3      	ldr	r3, [r4, #12]
 8005b38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b3a:	1a5b      	subs	r3, r3, r1
 8005b3c:	4543      	cmp	r3, r8
 8005b3e:	dcf0      	bgt.n	8005b22 <_printf_float+0x442>
 8005b40:	e6f8      	b.n	8005934 <_printf_float+0x254>
 8005b42:	f04f 0800 	mov.w	r8, #0
 8005b46:	f104 0919 	add.w	r9, r4, #25
 8005b4a:	e7f4      	b.n	8005b36 <_printf_float+0x456>

08005b4c <_printf_common>:
 8005b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b50:	4616      	mov	r6, r2
 8005b52:	4699      	mov	r9, r3
 8005b54:	688a      	ldr	r2, [r1, #8]
 8005b56:	690b      	ldr	r3, [r1, #16]
 8005b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	bfb8      	it	lt
 8005b60:	4613      	movlt	r3, r2
 8005b62:	6033      	str	r3, [r6, #0]
 8005b64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b68:	4607      	mov	r7, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	b10a      	cbz	r2, 8005b72 <_printf_common+0x26>
 8005b6e:	3301      	adds	r3, #1
 8005b70:	6033      	str	r3, [r6, #0]
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	0699      	lsls	r1, r3, #26
 8005b76:	bf42      	ittt	mi
 8005b78:	6833      	ldrmi	r3, [r6, #0]
 8005b7a:	3302      	addmi	r3, #2
 8005b7c:	6033      	strmi	r3, [r6, #0]
 8005b7e:	6825      	ldr	r5, [r4, #0]
 8005b80:	f015 0506 	ands.w	r5, r5, #6
 8005b84:	d106      	bne.n	8005b94 <_printf_common+0x48>
 8005b86:	f104 0a19 	add.w	sl, r4, #25
 8005b8a:	68e3      	ldr	r3, [r4, #12]
 8005b8c:	6832      	ldr	r2, [r6, #0]
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	42ab      	cmp	r3, r5
 8005b92:	dc26      	bgt.n	8005be2 <_printf_common+0x96>
 8005b94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b98:	1e13      	subs	r3, r2, #0
 8005b9a:	6822      	ldr	r2, [r4, #0]
 8005b9c:	bf18      	it	ne
 8005b9e:	2301      	movne	r3, #1
 8005ba0:	0692      	lsls	r2, r2, #26
 8005ba2:	d42b      	bmi.n	8005bfc <_printf_common+0xb0>
 8005ba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ba8:	4649      	mov	r1, r9
 8005baa:	4638      	mov	r0, r7
 8005bac:	47c0      	blx	r8
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d01e      	beq.n	8005bf0 <_printf_common+0xa4>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	6922      	ldr	r2, [r4, #16]
 8005bb6:	f003 0306 	and.w	r3, r3, #6
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	bf02      	ittt	eq
 8005bbe:	68e5      	ldreq	r5, [r4, #12]
 8005bc0:	6833      	ldreq	r3, [r6, #0]
 8005bc2:	1aed      	subeq	r5, r5, r3
 8005bc4:	68a3      	ldr	r3, [r4, #8]
 8005bc6:	bf0c      	ite	eq
 8005bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bcc:	2500      	movne	r5, #0
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	bfc4      	itt	gt
 8005bd2:	1a9b      	subgt	r3, r3, r2
 8005bd4:	18ed      	addgt	r5, r5, r3
 8005bd6:	2600      	movs	r6, #0
 8005bd8:	341a      	adds	r4, #26
 8005bda:	42b5      	cmp	r5, r6
 8005bdc:	d11a      	bne.n	8005c14 <_printf_common+0xc8>
 8005bde:	2000      	movs	r0, #0
 8005be0:	e008      	b.n	8005bf4 <_printf_common+0xa8>
 8005be2:	2301      	movs	r3, #1
 8005be4:	4652      	mov	r2, sl
 8005be6:	4649      	mov	r1, r9
 8005be8:	4638      	mov	r0, r7
 8005bea:	47c0      	blx	r8
 8005bec:	3001      	adds	r0, #1
 8005bee:	d103      	bne.n	8005bf8 <_printf_common+0xac>
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf8:	3501      	adds	r5, #1
 8005bfa:	e7c6      	b.n	8005b8a <_printf_common+0x3e>
 8005bfc:	18e1      	adds	r1, r4, r3
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	2030      	movs	r0, #48	; 0x30
 8005c02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c06:	4422      	add	r2, r4
 8005c08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c10:	3302      	adds	r3, #2
 8005c12:	e7c7      	b.n	8005ba4 <_printf_common+0x58>
 8005c14:	2301      	movs	r3, #1
 8005c16:	4622      	mov	r2, r4
 8005c18:	4649      	mov	r1, r9
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	47c0      	blx	r8
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d0e6      	beq.n	8005bf0 <_printf_common+0xa4>
 8005c22:	3601      	adds	r6, #1
 8005c24:	e7d9      	b.n	8005bda <_printf_common+0x8e>
	...

08005c28 <_printf_i>:
 8005c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	7e0f      	ldrb	r7, [r1, #24]
 8005c2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c30:	2f78      	cmp	r7, #120	; 0x78
 8005c32:	4691      	mov	r9, r2
 8005c34:	4680      	mov	r8, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	469a      	mov	sl, r3
 8005c3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c3e:	d807      	bhi.n	8005c50 <_printf_i+0x28>
 8005c40:	2f62      	cmp	r7, #98	; 0x62
 8005c42:	d80a      	bhi.n	8005c5a <_printf_i+0x32>
 8005c44:	2f00      	cmp	r7, #0
 8005c46:	f000 80d4 	beq.w	8005df2 <_printf_i+0x1ca>
 8005c4a:	2f58      	cmp	r7, #88	; 0x58
 8005c4c:	f000 80c0 	beq.w	8005dd0 <_printf_i+0x1a8>
 8005c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c58:	e03a      	b.n	8005cd0 <_printf_i+0xa8>
 8005c5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c5e:	2b15      	cmp	r3, #21
 8005c60:	d8f6      	bhi.n	8005c50 <_printf_i+0x28>
 8005c62:	a101      	add	r1, pc, #4	; (adr r1, 8005c68 <_printf_i+0x40>)
 8005c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c68:	08005cc1 	.word	0x08005cc1
 8005c6c:	08005cd5 	.word	0x08005cd5
 8005c70:	08005c51 	.word	0x08005c51
 8005c74:	08005c51 	.word	0x08005c51
 8005c78:	08005c51 	.word	0x08005c51
 8005c7c:	08005c51 	.word	0x08005c51
 8005c80:	08005cd5 	.word	0x08005cd5
 8005c84:	08005c51 	.word	0x08005c51
 8005c88:	08005c51 	.word	0x08005c51
 8005c8c:	08005c51 	.word	0x08005c51
 8005c90:	08005c51 	.word	0x08005c51
 8005c94:	08005dd9 	.word	0x08005dd9
 8005c98:	08005d01 	.word	0x08005d01
 8005c9c:	08005d93 	.word	0x08005d93
 8005ca0:	08005c51 	.word	0x08005c51
 8005ca4:	08005c51 	.word	0x08005c51
 8005ca8:	08005dfb 	.word	0x08005dfb
 8005cac:	08005c51 	.word	0x08005c51
 8005cb0:	08005d01 	.word	0x08005d01
 8005cb4:	08005c51 	.word	0x08005c51
 8005cb8:	08005c51 	.word	0x08005c51
 8005cbc:	08005d9b 	.word	0x08005d9b
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	1d1a      	adds	r2, r3, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	602a      	str	r2, [r5, #0]
 8005cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e09f      	b.n	8005e14 <_printf_i+0x1ec>
 8005cd4:	6820      	ldr	r0, [r4, #0]
 8005cd6:	682b      	ldr	r3, [r5, #0]
 8005cd8:	0607      	lsls	r7, r0, #24
 8005cda:	f103 0104 	add.w	r1, r3, #4
 8005cde:	6029      	str	r1, [r5, #0]
 8005ce0:	d501      	bpl.n	8005ce6 <_printf_i+0xbe>
 8005ce2:	681e      	ldr	r6, [r3, #0]
 8005ce4:	e003      	b.n	8005cee <_printf_i+0xc6>
 8005ce6:	0646      	lsls	r6, r0, #25
 8005ce8:	d5fb      	bpl.n	8005ce2 <_printf_i+0xba>
 8005cea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cee:	2e00      	cmp	r6, #0
 8005cf0:	da03      	bge.n	8005cfa <_printf_i+0xd2>
 8005cf2:	232d      	movs	r3, #45	; 0x2d
 8005cf4:	4276      	negs	r6, r6
 8005cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cfa:	485a      	ldr	r0, [pc, #360]	; (8005e64 <_printf_i+0x23c>)
 8005cfc:	230a      	movs	r3, #10
 8005cfe:	e012      	b.n	8005d26 <_printf_i+0xfe>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	6820      	ldr	r0, [r4, #0]
 8005d04:	1d19      	adds	r1, r3, #4
 8005d06:	6029      	str	r1, [r5, #0]
 8005d08:	0605      	lsls	r5, r0, #24
 8005d0a:	d501      	bpl.n	8005d10 <_printf_i+0xe8>
 8005d0c:	681e      	ldr	r6, [r3, #0]
 8005d0e:	e002      	b.n	8005d16 <_printf_i+0xee>
 8005d10:	0641      	lsls	r1, r0, #25
 8005d12:	d5fb      	bpl.n	8005d0c <_printf_i+0xe4>
 8005d14:	881e      	ldrh	r6, [r3, #0]
 8005d16:	4853      	ldr	r0, [pc, #332]	; (8005e64 <_printf_i+0x23c>)
 8005d18:	2f6f      	cmp	r7, #111	; 0x6f
 8005d1a:	bf0c      	ite	eq
 8005d1c:	2308      	moveq	r3, #8
 8005d1e:	230a      	movne	r3, #10
 8005d20:	2100      	movs	r1, #0
 8005d22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d26:	6865      	ldr	r5, [r4, #4]
 8005d28:	60a5      	str	r5, [r4, #8]
 8005d2a:	2d00      	cmp	r5, #0
 8005d2c:	bfa2      	ittt	ge
 8005d2e:	6821      	ldrge	r1, [r4, #0]
 8005d30:	f021 0104 	bicge.w	r1, r1, #4
 8005d34:	6021      	strge	r1, [r4, #0]
 8005d36:	b90e      	cbnz	r6, 8005d3c <_printf_i+0x114>
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	d04b      	beq.n	8005dd4 <_printf_i+0x1ac>
 8005d3c:	4615      	mov	r5, r2
 8005d3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d42:	fb03 6711 	mls	r7, r3, r1, r6
 8005d46:	5dc7      	ldrb	r7, [r0, r7]
 8005d48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d4c:	4637      	mov	r7, r6
 8005d4e:	42bb      	cmp	r3, r7
 8005d50:	460e      	mov	r6, r1
 8005d52:	d9f4      	bls.n	8005d3e <_printf_i+0x116>
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d10b      	bne.n	8005d70 <_printf_i+0x148>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	07de      	lsls	r6, r3, #31
 8005d5c:	d508      	bpl.n	8005d70 <_printf_i+0x148>
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	6861      	ldr	r1, [r4, #4]
 8005d62:	4299      	cmp	r1, r3
 8005d64:	bfde      	ittt	le
 8005d66:	2330      	movle	r3, #48	; 0x30
 8005d68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d70:	1b52      	subs	r2, r2, r5
 8005d72:	6122      	str	r2, [r4, #16]
 8005d74:	f8cd a000 	str.w	sl, [sp]
 8005d78:	464b      	mov	r3, r9
 8005d7a:	aa03      	add	r2, sp, #12
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4640      	mov	r0, r8
 8005d80:	f7ff fee4 	bl	8005b4c <_printf_common>
 8005d84:	3001      	adds	r0, #1
 8005d86:	d14a      	bne.n	8005e1e <_printf_i+0x1f6>
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8c:	b004      	add	sp, #16
 8005d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	f043 0320 	orr.w	r3, r3, #32
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	4833      	ldr	r0, [pc, #204]	; (8005e68 <_printf_i+0x240>)
 8005d9c:	2778      	movs	r7, #120	; 0x78
 8005d9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	6829      	ldr	r1, [r5, #0]
 8005da6:	061f      	lsls	r7, r3, #24
 8005da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dac:	d402      	bmi.n	8005db4 <_printf_i+0x18c>
 8005dae:	065f      	lsls	r7, r3, #25
 8005db0:	bf48      	it	mi
 8005db2:	b2b6      	uxthmi	r6, r6
 8005db4:	07df      	lsls	r7, r3, #31
 8005db6:	bf48      	it	mi
 8005db8:	f043 0320 	orrmi.w	r3, r3, #32
 8005dbc:	6029      	str	r1, [r5, #0]
 8005dbe:	bf48      	it	mi
 8005dc0:	6023      	strmi	r3, [r4, #0]
 8005dc2:	b91e      	cbnz	r6, 8005dcc <_printf_i+0x1a4>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	f023 0320 	bic.w	r3, r3, #32
 8005dca:	6023      	str	r3, [r4, #0]
 8005dcc:	2310      	movs	r3, #16
 8005dce:	e7a7      	b.n	8005d20 <_printf_i+0xf8>
 8005dd0:	4824      	ldr	r0, [pc, #144]	; (8005e64 <_printf_i+0x23c>)
 8005dd2:	e7e4      	b.n	8005d9e <_printf_i+0x176>
 8005dd4:	4615      	mov	r5, r2
 8005dd6:	e7bd      	b.n	8005d54 <_printf_i+0x12c>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	6826      	ldr	r6, [r4, #0]
 8005ddc:	6961      	ldr	r1, [r4, #20]
 8005dde:	1d18      	adds	r0, r3, #4
 8005de0:	6028      	str	r0, [r5, #0]
 8005de2:	0635      	lsls	r5, r6, #24
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	d501      	bpl.n	8005dec <_printf_i+0x1c4>
 8005de8:	6019      	str	r1, [r3, #0]
 8005dea:	e002      	b.n	8005df2 <_printf_i+0x1ca>
 8005dec:	0670      	lsls	r0, r6, #25
 8005dee:	d5fb      	bpl.n	8005de8 <_printf_i+0x1c0>
 8005df0:	8019      	strh	r1, [r3, #0]
 8005df2:	2300      	movs	r3, #0
 8005df4:	6123      	str	r3, [r4, #16]
 8005df6:	4615      	mov	r5, r2
 8005df8:	e7bc      	b.n	8005d74 <_printf_i+0x14c>
 8005dfa:	682b      	ldr	r3, [r5, #0]
 8005dfc:	1d1a      	adds	r2, r3, #4
 8005dfe:	602a      	str	r2, [r5, #0]
 8005e00:	681d      	ldr	r5, [r3, #0]
 8005e02:	6862      	ldr	r2, [r4, #4]
 8005e04:	2100      	movs	r1, #0
 8005e06:	4628      	mov	r0, r5
 8005e08:	f7fa f9e2 	bl	80001d0 <memchr>
 8005e0c:	b108      	cbz	r0, 8005e12 <_printf_i+0x1ea>
 8005e0e:	1b40      	subs	r0, r0, r5
 8005e10:	6060      	str	r0, [r4, #4]
 8005e12:	6863      	ldr	r3, [r4, #4]
 8005e14:	6123      	str	r3, [r4, #16]
 8005e16:	2300      	movs	r3, #0
 8005e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e1c:	e7aa      	b.n	8005d74 <_printf_i+0x14c>
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	462a      	mov	r2, r5
 8005e22:	4649      	mov	r1, r9
 8005e24:	4640      	mov	r0, r8
 8005e26:	47d0      	blx	sl
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d0ad      	beq.n	8005d88 <_printf_i+0x160>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	079b      	lsls	r3, r3, #30
 8005e30:	d413      	bmi.n	8005e5a <_printf_i+0x232>
 8005e32:	68e0      	ldr	r0, [r4, #12]
 8005e34:	9b03      	ldr	r3, [sp, #12]
 8005e36:	4298      	cmp	r0, r3
 8005e38:	bfb8      	it	lt
 8005e3a:	4618      	movlt	r0, r3
 8005e3c:	e7a6      	b.n	8005d8c <_printf_i+0x164>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	4632      	mov	r2, r6
 8005e42:	4649      	mov	r1, r9
 8005e44:	4640      	mov	r0, r8
 8005e46:	47d0      	blx	sl
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d09d      	beq.n	8005d88 <_printf_i+0x160>
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	68e3      	ldr	r3, [r4, #12]
 8005e50:	9903      	ldr	r1, [sp, #12]
 8005e52:	1a5b      	subs	r3, r3, r1
 8005e54:	42ab      	cmp	r3, r5
 8005e56:	dcf2      	bgt.n	8005e3e <_printf_i+0x216>
 8005e58:	e7eb      	b.n	8005e32 <_printf_i+0x20a>
 8005e5a:	2500      	movs	r5, #0
 8005e5c:	f104 0619 	add.w	r6, r4, #25
 8005e60:	e7f5      	b.n	8005e4e <_printf_i+0x226>
 8005e62:	bf00      	nop
 8005e64:	08008336 	.word	0x08008336
 8005e68:	08008347 	.word	0x08008347

08005e6c <std>:
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	4604      	mov	r4, r0
 8005e72:	e9c0 3300 	strd	r3, r3, [r0]
 8005e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e7a:	6083      	str	r3, [r0, #8]
 8005e7c:	8181      	strh	r1, [r0, #12]
 8005e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e80:	81c2      	strh	r2, [r0, #14]
 8005e82:	6183      	str	r3, [r0, #24]
 8005e84:	4619      	mov	r1, r3
 8005e86:	2208      	movs	r2, #8
 8005e88:	305c      	adds	r0, #92	; 0x5c
 8005e8a:	f000 f914 	bl	80060b6 <memset>
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <std+0x58>)
 8005e90:	6263      	str	r3, [r4, #36]	; 0x24
 8005e92:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <std+0x5c>)
 8005e94:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e96:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <std+0x60>)
 8005e98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <std+0x64>)
 8005e9c:	6323      	str	r3, [r4, #48]	; 0x30
 8005e9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ed4 <std+0x68>)
 8005ea0:	6224      	str	r4, [r4, #32]
 8005ea2:	429c      	cmp	r4, r3
 8005ea4:	d006      	beq.n	8005eb4 <std+0x48>
 8005ea6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005eaa:	4294      	cmp	r4, r2
 8005eac:	d002      	beq.n	8005eb4 <std+0x48>
 8005eae:	33d0      	adds	r3, #208	; 0xd0
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	d105      	bne.n	8005ec0 <std+0x54>
 8005eb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ebc:	f000 b978 	b.w	80061b0 <__retarget_lock_init_recursive>
 8005ec0:	bd10      	pop	{r4, pc}
 8005ec2:	bf00      	nop
 8005ec4:	08006031 	.word	0x08006031
 8005ec8:	08006053 	.word	0x08006053
 8005ecc:	0800608b 	.word	0x0800608b
 8005ed0:	080060af 	.word	0x080060af
 8005ed4:	20000360 	.word	0x20000360

08005ed8 <stdio_exit_handler>:
 8005ed8:	4a02      	ldr	r2, [pc, #8]	; (8005ee4 <stdio_exit_handler+0xc>)
 8005eda:	4903      	ldr	r1, [pc, #12]	; (8005ee8 <stdio_exit_handler+0x10>)
 8005edc:	4803      	ldr	r0, [pc, #12]	; (8005eec <stdio_exit_handler+0x14>)
 8005ede:	f000 b869 	b.w	8005fb4 <_fwalk_sglue>
 8005ee2:	bf00      	nop
 8005ee4:	2000000c 	.word	0x2000000c
 8005ee8:	08007b61 	.word	0x08007b61
 8005eec:	20000018 	.word	0x20000018

08005ef0 <cleanup_stdio>:
 8005ef0:	6841      	ldr	r1, [r0, #4]
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <cleanup_stdio+0x34>)
 8005ef4:	4299      	cmp	r1, r3
 8005ef6:	b510      	push	{r4, lr}
 8005ef8:	4604      	mov	r4, r0
 8005efa:	d001      	beq.n	8005f00 <cleanup_stdio+0x10>
 8005efc:	f001 fe30 	bl	8007b60 <_fflush_r>
 8005f00:	68a1      	ldr	r1, [r4, #8]
 8005f02:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <cleanup_stdio+0x38>)
 8005f04:	4299      	cmp	r1, r3
 8005f06:	d002      	beq.n	8005f0e <cleanup_stdio+0x1e>
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f001 fe29 	bl	8007b60 <_fflush_r>
 8005f0e:	68e1      	ldr	r1, [r4, #12]
 8005f10:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <cleanup_stdio+0x3c>)
 8005f12:	4299      	cmp	r1, r3
 8005f14:	d004      	beq.n	8005f20 <cleanup_stdio+0x30>
 8005f16:	4620      	mov	r0, r4
 8005f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f1c:	f001 be20 	b.w	8007b60 <_fflush_r>
 8005f20:	bd10      	pop	{r4, pc}
 8005f22:	bf00      	nop
 8005f24:	20000360 	.word	0x20000360
 8005f28:	200003c8 	.word	0x200003c8
 8005f2c:	20000430 	.word	0x20000430

08005f30 <global_stdio_init.part.0>:
 8005f30:	b510      	push	{r4, lr}
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <global_stdio_init.part.0+0x30>)
 8005f34:	4c0b      	ldr	r4, [pc, #44]	; (8005f64 <global_stdio_init.part.0+0x34>)
 8005f36:	4a0c      	ldr	r2, [pc, #48]	; (8005f68 <global_stdio_init.part.0+0x38>)
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2104      	movs	r1, #4
 8005f40:	f7ff ff94 	bl	8005e6c <std>
 8005f44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f48:	2201      	movs	r2, #1
 8005f4a:	2109      	movs	r1, #9
 8005f4c:	f7ff ff8e 	bl	8005e6c <std>
 8005f50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f54:	2202      	movs	r2, #2
 8005f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f5a:	2112      	movs	r1, #18
 8005f5c:	f7ff bf86 	b.w	8005e6c <std>
 8005f60:	20000498 	.word	0x20000498
 8005f64:	20000360 	.word	0x20000360
 8005f68:	08005ed9 	.word	0x08005ed9

08005f6c <__sfp_lock_acquire>:
 8005f6c:	4801      	ldr	r0, [pc, #4]	; (8005f74 <__sfp_lock_acquire+0x8>)
 8005f6e:	f000 b920 	b.w	80061b2 <__retarget_lock_acquire_recursive>
 8005f72:	bf00      	nop
 8005f74:	200004a1 	.word	0x200004a1

08005f78 <__sfp_lock_release>:
 8005f78:	4801      	ldr	r0, [pc, #4]	; (8005f80 <__sfp_lock_release+0x8>)
 8005f7a:	f000 b91b 	b.w	80061b4 <__retarget_lock_release_recursive>
 8005f7e:	bf00      	nop
 8005f80:	200004a1 	.word	0x200004a1

08005f84 <__sinit>:
 8005f84:	b510      	push	{r4, lr}
 8005f86:	4604      	mov	r4, r0
 8005f88:	f7ff fff0 	bl	8005f6c <__sfp_lock_acquire>
 8005f8c:	6a23      	ldr	r3, [r4, #32]
 8005f8e:	b11b      	cbz	r3, 8005f98 <__sinit+0x14>
 8005f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f94:	f7ff bff0 	b.w	8005f78 <__sfp_lock_release>
 8005f98:	4b04      	ldr	r3, [pc, #16]	; (8005fac <__sinit+0x28>)
 8005f9a:	6223      	str	r3, [r4, #32]
 8005f9c:	4b04      	ldr	r3, [pc, #16]	; (8005fb0 <__sinit+0x2c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f5      	bne.n	8005f90 <__sinit+0xc>
 8005fa4:	f7ff ffc4 	bl	8005f30 <global_stdio_init.part.0>
 8005fa8:	e7f2      	b.n	8005f90 <__sinit+0xc>
 8005faa:	bf00      	nop
 8005fac:	08005ef1 	.word	0x08005ef1
 8005fb0:	20000498 	.word	0x20000498

08005fb4 <_fwalk_sglue>:
 8005fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb8:	4607      	mov	r7, r0
 8005fba:	4688      	mov	r8, r1
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8005fc8:	d505      	bpl.n	8005fd6 <_fwalk_sglue+0x22>
 8005fca:	6824      	ldr	r4, [r4, #0]
 8005fcc:	2c00      	cmp	r4, #0
 8005fce:	d1f7      	bne.n	8005fc0 <_fwalk_sglue+0xc>
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fd6:	89ab      	ldrh	r3, [r5, #12]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d907      	bls.n	8005fec <_fwalk_sglue+0x38>
 8005fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	d003      	beq.n	8005fec <_fwalk_sglue+0x38>
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	47c0      	blx	r8
 8005fea:	4306      	orrs	r6, r0
 8005fec:	3568      	adds	r5, #104	; 0x68
 8005fee:	e7e9      	b.n	8005fc4 <_fwalk_sglue+0x10>

08005ff0 <siprintf>:
 8005ff0:	b40e      	push	{r1, r2, r3}
 8005ff2:	b500      	push	{lr}
 8005ff4:	b09c      	sub	sp, #112	; 0x70
 8005ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ff8:	9002      	str	r0, [sp, #8]
 8005ffa:	9006      	str	r0, [sp, #24]
 8005ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006000:	4809      	ldr	r0, [pc, #36]	; (8006028 <siprintf+0x38>)
 8006002:	9107      	str	r1, [sp, #28]
 8006004:	9104      	str	r1, [sp, #16]
 8006006:	4909      	ldr	r1, [pc, #36]	; (800602c <siprintf+0x3c>)
 8006008:	f853 2b04 	ldr.w	r2, [r3], #4
 800600c:	9105      	str	r1, [sp, #20]
 800600e:	6800      	ldr	r0, [r0, #0]
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	a902      	add	r1, sp, #8
 8006014:	f001 fc20 	bl	8007858 <_svfiprintf_r>
 8006018:	9b02      	ldr	r3, [sp, #8]
 800601a:	2200      	movs	r2, #0
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	b01c      	add	sp, #112	; 0x70
 8006020:	f85d eb04 	ldr.w	lr, [sp], #4
 8006024:	b003      	add	sp, #12
 8006026:	4770      	bx	lr
 8006028:	20000064 	.word	0x20000064
 800602c:	ffff0208 	.word	0xffff0208

08006030 <__sread>:
 8006030:	b510      	push	{r4, lr}
 8006032:	460c      	mov	r4, r1
 8006034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006038:	f000 f86c 	bl	8006114 <_read_r>
 800603c:	2800      	cmp	r0, #0
 800603e:	bfab      	itete	ge
 8006040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006042:	89a3      	ldrhlt	r3, [r4, #12]
 8006044:	181b      	addge	r3, r3, r0
 8006046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800604a:	bfac      	ite	ge
 800604c:	6563      	strge	r3, [r4, #84]	; 0x54
 800604e:	81a3      	strhlt	r3, [r4, #12]
 8006050:	bd10      	pop	{r4, pc}

08006052 <__swrite>:
 8006052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006056:	461f      	mov	r7, r3
 8006058:	898b      	ldrh	r3, [r1, #12]
 800605a:	05db      	lsls	r3, r3, #23
 800605c:	4605      	mov	r5, r0
 800605e:	460c      	mov	r4, r1
 8006060:	4616      	mov	r6, r2
 8006062:	d505      	bpl.n	8006070 <__swrite+0x1e>
 8006064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006068:	2302      	movs	r3, #2
 800606a:	2200      	movs	r2, #0
 800606c:	f000 f840 	bl	80060f0 <_lseek_r>
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800607a:	81a3      	strh	r3, [r4, #12]
 800607c:	4632      	mov	r2, r6
 800607e:	463b      	mov	r3, r7
 8006080:	4628      	mov	r0, r5
 8006082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006086:	f000 b857 	b.w	8006138 <_write_r>

0800608a <__sseek>:
 800608a:	b510      	push	{r4, lr}
 800608c:	460c      	mov	r4, r1
 800608e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006092:	f000 f82d 	bl	80060f0 <_lseek_r>
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	bf15      	itete	ne
 800609c:	6560      	strne	r0, [r4, #84]	; 0x54
 800609e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060a6:	81a3      	strheq	r3, [r4, #12]
 80060a8:	bf18      	it	ne
 80060aa:	81a3      	strhne	r3, [r4, #12]
 80060ac:	bd10      	pop	{r4, pc}

080060ae <__sclose>:
 80060ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b2:	f000 b80d 	b.w	80060d0 <_close_r>

080060b6 <memset>:
 80060b6:	4402      	add	r2, r0
 80060b8:	4603      	mov	r3, r0
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d100      	bne.n	80060c0 <memset+0xa>
 80060be:	4770      	bx	lr
 80060c0:	f803 1b01 	strb.w	r1, [r3], #1
 80060c4:	e7f9      	b.n	80060ba <memset+0x4>
	...

080060c8 <_localeconv_r>:
 80060c8:	4800      	ldr	r0, [pc, #0]	; (80060cc <_localeconv_r+0x4>)
 80060ca:	4770      	bx	lr
 80060cc:	20000158 	.word	0x20000158

080060d0 <_close_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d06      	ldr	r5, [pc, #24]	; (80060ec <_close_r+0x1c>)
 80060d4:	2300      	movs	r3, #0
 80060d6:	4604      	mov	r4, r0
 80060d8:	4608      	mov	r0, r1
 80060da:	602b      	str	r3, [r5, #0]
 80060dc:	f7fb fe1f 	bl	8001d1e <_close>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d102      	bne.n	80060ea <_close_r+0x1a>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b103      	cbz	r3, 80060ea <_close_r+0x1a>
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	2000049c 	.word	0x2000049c

080060f0 <_lseek_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d07      	ldr	r5, [pc, #28]	; (8006110 <_lseek_r+0x20>)
 80060f4:	4604      	mov	r4, r0
 80060f6:	4608      	mov	r0, r1
 80060f8:	4611      	mov	r1, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	602a      	str	r2, [r5, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f7fb fe34 	bl	8001d6c <_lseek>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_lseek_r+0x1e>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_lseek_r+0x1e>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	2000049c 	.word	0x2000049c

08006114 <_read_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d07      	ldr	r5, [pc, #28]	; (8006134 <_read_r+0x20>)
 8006118:	4604      	mov	r4, r0
 800611a:	4608      	mov	r0, r1
 800611c:	4611      	mov	r1, r2
 800611e:	2200      	movs	r2, #0
 8006120:	602a      	str	r2, [r5, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	f7fb fdc2 	bl	8001cac <_read>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_read_r+0x1e>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_read_r+0x1e>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	2000049c 	.word	0x2000049c

08006138 <_write_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d07      	ldr	r5, [pc, #28]	; (8006158 <_write_r+0x20>)
 800613c:	4604      	mov	r4, r0
 800613e:	4608      	mov	r0, r1
 8006140:	4611      	mov	r1, r2
 8006142:	2200      	movs	r2, #0
 8006144:	602a      	str	r2, [r5, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	f7fb fdcd 	bl	8001ce6 <_write>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_write_r+0x1e>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_write_r+0x1e>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	2000049c 	.word	0x2000049c

0800615c <__errno>:
 800615c:	4b01      	ldr	r3, [pc, #4]	; (8006164 <__errno+0x8>)
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000064 	.word	0x20000064

08006168 <__libc_init_array>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	4d0d      	ldr	r5, [pc, #52]	; (80061a0 <__libc_init_array+0x38>)
 800616c:	4c0d      	ldr	r4, [pc, #52]	; (80061a4 <__libc_init_array+0x3c>)
 800616e:	1b64      	subs	r4, r4, r5
 8006170:	10a4      	asrs	r4, r4, #2
 8006172:	2600      	movs	r6, #0
 8006174:	42a6      	cmp	r6, r4
 8006176:	d109      	bne.n	800618c <__libc_init_array+0x24>
 8006178:	4d0b      	ldr	r5, [pc, #44]	; (80061a8 <__libc_init_array+0x40>)
 800617a:	4c0c      	ldr	r4, [pc, #48]	; (80061ac <__libc_init_array+0x44>)
 800617c:	f002 f894 	bl	80082a8 <_init>
 8006180:	1b64      	subs	r4, r4, r5
 8006182:	10a4      	asrs	r4, r4, #2
 8006184:	2600      	movs	r6, #0
 8006186:	42a6      	cmp	r6, r4
 8006188:	d105      	bne.n	8006196 <__libc_init_array+0x2e>
 800618a:	bd70      	pop	{r4, r5, r6, pc}
 800618c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006190:	4798      	blx	r3
 8006192:	3601      	adds	r6, #1
 8006194:	e7ee      	b.n	8006174 <__libc_init_array+0xc>
 8006196:	f855 3b04 	ldr.w	r3, [r5], #4
 800619a:	4798      	blx	r3
 800619c:	3601      	adds	r6, #1
 800619e:	e7f2      	b.n	8006186 <__libc_init_array+0x1e>
 80061a0:	0800869c 	.word	0x0800869c
 80061a4:	0800869c 	.word	0x0800869c
 80061a8:	0800869c 	.word	0x0800869c
 80061ac:	080086a0 	.word	0x080086a0

080061b0 <__retarget_lock_init_recursive>:
 80061b0:	4770      	bx	lr

080061b2 <__retarget_lock_acquire_recursive>:
 80061b2:	4770      	bx	lr

080061b4 <__retarget_lock_release_recursive>:
 80061b4:	4770      	bx	lr

080061b6 <quorem>:
 80061b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ba:	6903      	ldr	r3, [r0, #16]
 80061bc:	690c      	ldr	r4, [r1, #16]
 80061be:	42a3      	cmp	r3, r4
 80061c0:	4607      	mov	r7, r0
 80061c2:	db7e      	blt.n	80062c2 <quorem+0x10c>
 80061c4:	3c01      	subs	r4, #1
 80061c6:	f101 0814 	add.w	r8, r1, #20
 80061ca:	f100 0514 	add.w	r5, r0, #20
 80061ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061dc:	3301      	adds	r3, #1
 80061de:	429a      	cmp	r2, r3
 80061e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80061ec:	d331      	bcc.n	8006252 <quorem+0x9c>
 80061ee:	f04f 0e00 	mov.w	lr, #0
 80061f2:	4640      	mov	r0, r8
 80061f4:	46ac      	mov	ip, r5
 80061f6:	46f2      	mov	sl, lr
 80061f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80061fc:	b293      	uxth	r3, r2
 80061fe:	fb06 e303 	mla	r3, r6, r3, lr
 8006202:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006206:	0c1a      	lsrs	r2, r3, #16
 8006208:	b29b      	uxth	r3, r3
 800620a:	ebaa 0303 	sub.w	r3, sl, r3
 800620e:	f8dc a000 	ldr.w	sl, [ip]
 8006212:	fa13 f38a 	uxtah	r3, r3, sl
 8006216:	fb06 220e 	mla	r2, r6, lr, r2
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006222:	b292      	uxth	r2, r2
 8006224:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800622c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006230:	4581      	cmp	r9, r0
 8006232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006236:	f84c 3b04 	str.w	r3, [ip], #4
 800623a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800623e:	d2db      	bcs.n	80061f8 <quorem+0x42>
 8006240:	f855 300b 	ldr.w	r3, [r5, fp]
 8006244:	b92b      	cbnz	r3, 8006252 <quorem+0x9c>
 8006246:	9b01      	ldr	r3, [sp, #4]
 8006248:	3b04      	subs	r3, #4
 800624a:	429d      	cmp	r5, r3
 800624c:	461a      	mov	r2, r3
 800624e:	d32c      	bcc.n	80062aa <quorem+0xf4>
 8006250:	613c      	str	r4, [r7, #16]
 8006252:	4638      	mov	r0, r7
 8006254:	f001 f9a6 	bl	80075a4 <__mcmp>
 8006258:	2800      	cmp	r0, #0
 800625a:	db22      	blt.n	80062a2 <quorem+0xec>
 800625c:	3601      	adds	r6, #1
 800625e:	4629      	mov	r1, r5
 8006260:	2000      	movs	r0, #0
 8006262:	f858 2b04 	ldr.w	r2, [r8], #4
 8006266:	f8d1 c000 	ldr.w	ip, [r1]
 800626a:	b293      	uxth	r3, r2
 800626c:	1ac3      	subs	r3, r0, r3
 800626e:	0c12      	lsrs	r2, r2, #16
 8006270:	fa13 f38c 	uxtah	r3, r3, ip
 8006274:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006278:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800627c:	b29b      	uxth	r3, r3
 800627e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006282:	45c1      	cmp	r9, r8
 8006284:	f841 3b04 	str.w	r3, [r1], #4
 8006288:	ea4f 4022 	mov.w	r0, r2, asr #16
 800628c:	d2e9      	bcs.n	8006262 <quorem+0xac>
 800628e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006296:	b922      	cbnz	r2, 80062a2 <quorem+0xec>
 8006298:	3b04      	subs	r3, #4
 800629a:	429d      	cmp	r5, r3
 800629c:	461a      	mov	r2, r3
 800629e:	d30a      	bcc.n	80062b6 <quorem+0x100>
 80062a0:	613c      	str	r4, [r7, #16]
 80062a2:	4630      	mov	r0, r6
 80062a4:	b003      	add	sp, #12
 80062a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	d1ce      	bne.n	8006250 <quorem+0x9a>
 80062b2:	3c01      	subs	r4, #1
 80062b4:	e7c9      	b.n	800624a <quorem+0x94>
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	3b04      	subs	r3, #4
 80062ba:	2a00      	cmp	r2, #0
 80062bc:	d1f0      	bne.n	80062a0 <quorem+0xea>
 80062be:	3c01      	subs	r4, #1
 80062c0:	e7eb      	b.n	800629a <quorem+0xe4>
 80062c2:	2000      	movs	r0, #0
 80062c4:	e7ee      	b.n	80062a4 <quorem+0xee>
	...

080062c8 <_dtoa_r>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	ed2d 8b04 	vpush	{d8-d9}
 80062d0:	69c5      	ldr	r5, [r0, #28]
 80062d2:	b093      	sub	sp, #76	; 0x4c
 80062d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80062d8:	ec57 6b10 	vmov	r6, r7, d0
 80062dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062e0:	9107      	str	r1, [sp, #28]
 80062e2:	4604      	mov	r4, r0
 80062e4:	920a      	str	r2, [sp, #40]	; 0x28
 80062e6:	930d      	str	r3, [sp, #52]	; 0x34
 80062e8:	b975      	cbnz	r5, 8006308 <_dtoa_r+0x40>
 80062ea:	2010      	movs	r0, #16
 80062ec:	f000 fe2a 	bl	8006f44 <malloc>
 80062f0:	4602      	mov	r2, r0
 80062f2:	61e0      	str	r0, [r4, #28]
 80062f4:	b920      	cbnz	r0, 8006300 <_dtoa_r+0x38>
 80062f6:	4bae      	ldr	r3, [pc, #696]	; (80065b0 <_dtoa_r+0x2e8>)
 80062f8:	21ef      	movs	r1, #239	; 0xef
 80062fa:	48ae      	ldr	r0, [pc, #696]	; (80065b4 <_dtoa_r+0x2ec>)
 80062fc:	f001 fc90 	bl	8007c20 <__assert_func>
 8006300:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006304:	6005      	str	r5, [r0, #0]
 8006306:	60c5      	str	r5, [r0, #12]
 8006308:	69e3      	ldr	r3, [r4, #28]
 800630a:	6819      	ldr	r1, [r3, #0]
 800630c:	b151      	cbz	r1, 8006324 <_dtoa_r+0x5c>
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	604a      	str	r2, [r1, #4]
 8006312:	2301      	movs	r3, #1
 8006314:	4093      	lsls	r3, r2
 8006316:	608b      	str	r3, [r1, #8]
 8006318:	4620      	mov	r0, r4
 800631a:	f000 ff07 	bl	800712c <_Bfree>
 800631e:	69e3      	ldr	r3, [r4, #28]
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	1e3b      	subs	r3, r7, #0
 8006326:	bfbb      	ittet	lt
 8006328:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800632c:	9303      	strlt	r3, [sp, #12]
 800632e:	2300      	movge	r3, #0
 8006330:	2201      	movlt	r2, #1
 8006332:	bfac      	ite	ge
 8006334:	f8c8 3000 	strge.w	r3, [r8]
 8006338:	f8c8 2000 	strlt.w	r2, [r8]
 800633c:	4b9e      	ldr	r3, [pc, #632]	; (80065b8 <_dtoa_r+0x2f0>)
 800633e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006342:	ea33 0308 	bics.w	r3, r3, r8
 8006346:	d11b      	bne.n	8006380 <_dtoa_r+0xb8>
 8006348:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800634a:	f242 730f 	movw	r3, #9999	; 0x270f
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006354:	4333      	orrs	r3, r6
 8006356:	f000 8593 	beq.w	8006e80 <_dtoa_r+0xbb8>
 800635a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800635c:	b963      	cbnz	r3, 8006378 <_dtoa_r+0xb0>
 800635e:	4b97      	ldr	r3, [pc, #604]	; (80065bc <_dtoa_r+0x2f4>)
 8006360:	e027      	b.n	80063b2 <_dtoa_r+0xea>
 8006362:	4b97      	ldr	r3, [pc, #604]	; (80065c0 <_dtoa_r+0x2f8>)
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	9800      	ldr	r0, [sp, #0]
 800636e:	b013      	add	sp, #76	; 0x4c
 8006370:	ecbd 8b04 	vpop	{d8-d9}
 8006374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006378:	4b90      	ldr	r3, [pc, #576]	; (80065bc <_dtoa_r+0x2f4>)
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	3303      	adds	r3, #3
 800637e:	e7f3      	b.n	8006368 <_dtoa_r+0xa0>
 8006380:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006384:	2200      	movs	r2, #0
 8006386:	ec51 0b17 	vmov	r0, r1, d7
 800638a:	eeb0 8a47 	vmov.f32	s16, s14
 800638e:	eef0 8a67 	vmov.f32	s17, s15
 8006392:	2300      	movs	r3, #0
 8006394:	f7fa fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 8006398:	4681      	mov	r9, r0
 800639a:	b160      	cbz	r0, 80063b6 <_dtoa_r+0xee>
 800639c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800639e:	2301      	movs	r3, #1
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8568 	beq.w	8006e7a <_dtoa_r+0xbb2>
 80063aa:	4b86      	ldr	r3, [pc, #536]	; (80065c4 <_dtoa_r+0x2fc>)
 80063ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	e7da      	b.n	800636c <_dtoa_r+0xa4>
 80063b6:	aa10      	add	r2, sp, #64	; 0x40
 80063b8:	a911      	add	r1, sp, #68	; 0x44
 80063ba:	4620      	mov	r0, r4
 80063bc:	eeb0 0a48 	vmov.f32	s0, s16
 80063c0:	eef0 0a68 	vmov.f32	s1, s17
 80063c4:	f001 f994 	bl	80076f0 <__d2b>
 80063c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80063cc:	4682      	mov	sl, r0
 80063ce:	2d00      	cmp	r5, #0
 80063d0:	d07f      	beq.n	80064d2 <_dtoa_r+0x20a>
 80063d2:	ee18 3a90 	vmov	r3, s17
 80063d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80063de:	ec51 0b18 	vmov	r0, r1, d8
 80063e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80063ee:	4619      	mov	r1, r3
 80063f0:	2200      	movs	r2, #0
 80063f2:	4b75      	ldr	r3, [pc, #468]	; (80065c8 <_dtoa_r+0x300>)
 80063f4:	f7f9 ff48 	bl	8000288 <__aeabi_dsub>
 80063f8:	a367      	add	r3, pc, #412	; (adr r3, 8006598 <_dtoa_r+0x2d0>)
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f7fa f8fb 	bl	80005f8 <__aeabi_dmul>
 8006402:	a367      	add	r3, pc, #412	; (adr r3, 80065a0 <_dtoa_r+0x2d8>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7f9 ff40 	bl	800028c <__adddf3>
 800640c:	4606      	mov	r6, r0
 800640e:	4628      	mov	r0, r5
 8006410:	460f      	mov	r7, r1
 8006412:	f7fa f887 	bl	8000524 <__aeabi_i2d>
 8006416:	a364      	add	r3, pc, #400	; (adr r3, 80065a8 <_dtoa_r+0x2e0>)
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f7fa f8ec 	bl	80005f8 <__aeabi_dmul>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4630      	mov	r0, r6
 8006426:	4639      	mov	r1, r7
 8006428:	f7f9 ff30 	bl	800028c <__adddf3>
 800642c:	4606      	mov	r6, r0
 800642e:	460f      	mov	r7, r1
 8006430:	f7fa fb92 	bl	8000b58 <__aeabi_d2iz>
 8006434:	2200      	movs	r2, #0
 8006436:	4683      	mov	fp, r0
 8006438:	2300      	movs	r3, #0
 800643a:	4630      	mov	r0, r6
 800643c:	4639      	mov	r1, r7
 800643e:	f7fa fb4d 	bl	8000adc <__aeabi_dcmplt>
 8006442:	b148      	cbz	r0, 8006458 <_dtoa_r+0x190>
 8006444:	4658      	mov	r0, fp
 8006446:	f7fa f86d 	bl	8000524 <__aeabi_i2d>
 800644a:	4632      	mov	r2, r6
 800644c:	463b      	mov	r3, r7
 800644e:	f7fa fb3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006452:	b908      	cbnz	r0, 8006458 <_dtoa_r+0x190>
 8006454:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006458:	f1bb 0f16 	cmp.w	fp, #22
 800645c:	d857      	bhi.n	800650e <_dtoa_r+0x246>
 800645e:	4b5b      	ldr	r3, [pc, #364]	; (80065cc <_dtoa_r+0x304>)
 8006460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	ec51 0b18 	vmov	r0, r1, d8
 800646c:	f7fa fb36 	bl	8000adc <__aeabi_dcmplt>
 8006470:	2800      	cmp	r0, #0
 8006472:	d04e      	beq.n	8006512 <_dtoa_r+0x24a>
 8006474:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006478:	2300      	movs	r3, #0
 800647a:	930c      	str	r3, [sp, #48]	; 0x30
 800647c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800647e:	1b5b      	subs	r3, r3, r5
 8006480:	1e5a      	subs	r2, r3, #1
 8006482:	bf45      	ittet	mi
 8006484:	f1c3 0301 	rsbmi	r3, r3, #1
 8006488:	9305      	strmi	r3, [sp, #20]
 800648a:	2300      	movpl	r3, #0
 800648c:	2300      	movmi	r3, #0
 800648e:	9206      	str	r2, [sp, #24]
 8006490:	bf54      	ite	pl
 8006492:	9305      	strpl	r3, [sp, #20]
 8006494:	9306      	strmi	r3, [sp, #24]
 8006496:	f1bb 0f00 	cmp.w	fp, #0
 800649a:	db3c      	blt.n	8006516 <_dtoa_r+0x24e>
 800649c:	9b06      	ldr	r3, [sp, #24]
 800649e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80064a2:	445b      	add	r3, fp
 80064a4:	9306      	str	r3, [sp, #24]
 80064a6:	2300      	movs	r3, #0
 80064a8:	9308      	str	r3, [sp, #32]
 80064aa:	9b07      	ldr	r3, [sp, #28]
 80064ac:	2b09      	cmp	r3, #9
 80064ae:	d868      	bhi.n	8006582 <_dtoa_r+0x2ba>
 80064b0:	2b05      	cmp	r3, #5
 80064b2:	bfc4      	itt	gt
 80064b4:	3b04      	subgt	r3, #4
 80064b6:	9307      	strgt	r3, [sp, #28]
 80064b8:	9b07      	ldr	r3, [sp, #28]
 80064ba:	f1a3 0302 	sub.w	r3, r3, #2
 80064be:	bfcc      	ite	gt
 80064c0:	2500      	movgt	r5, #0
 80064c2:	2501      	movle	r5, #1
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	f200 8085 	bhi.w	80065d4 <_dtoa_r+0x30c>
 80064ca:	e8df f003 	tbb	[pc, r3]
 80064ce:	3b2e      	.short	0x3b2e
 80064d0:	5839      	.short	0x5839
 80064d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80064d6:	441d      	add	r5, r3
 80064d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064dc:	2b20      	cmp	r3, #32
 80064de:	bfc1      	itttt	gt
 80064e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80064e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80064ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80064f0:	bfd6      	itet	le
 80064f2:	f1c3 0320 	rsble	r3, r3, #32
 80064f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80064fa:	fa06 f003 	lslle.w	r0, r6, r3
 80064fe:	f7fa f801 	bl	8000504 <__aeabi_ui2d>
 8006502:	2201      	movs	r2, #1
 8006504:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006508:	3d01      	subs	r5, #1
 800650a:	920e      	str	r2, [sp, #56]	; 0x38
 800650c:	e76f      	b.n	80063ee <_dtoa_r+0x126>
 800650e:	2301      	movs	r3, #1
 8006510:	e7b3      	b.n	800647a <_dtoa_r+0x1b2>
 8006512:	900c      	str	r0, [sp, #48]	; 0x30
 8006514:	e7b2      	b.n	800647c <_dtoa_r+0x1b4>
 8006516:	9b05      	ldr	r3, [sp, #20]
 8006518:	eba3 030b 	sub.w	r3, r3, fp
 800651c:	9305      	str	r3, [sp, #20]
 800651e:	f1cb 0300 	rsb	r3, fp, #0
 8006522:	9308      	str	r3, [sp, #32]
 8006524:	2300      	movs	r3, #0
 8006526:	930b      	str	r3, [sp, #44]	; 0x2c
 8006528:	e7bf      	b.n	80064aa <_dtoa_r+0x1e2>
 800652a:	2300      	movs	r3, #0
 800652c:	9309      	str	r3, [sp, #36]	; 0x24
 800652e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006530:	2b00      	cmp	r3, #0
 8006532:	dc52      	bgt.n	80065da <_dtoa_r+0x312>
 8006534:	2301      	movs	r3, #1
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	9304      	str	r3, [sp, #16]
 800653a:	461a      	mov	r2, r3
 800653c:	920a      	str	r2, [sp, #40]	; 0x28
 800653e:	e00b      	b.n	8006558 <_dtoa_r+0x290>
 8006540:	2301      	movs	r3, #1
 8006542:	e7f3      	b.n	800652c <_dtoa_r+0x264>
 8006544:	2300      	movs	r3, #0
 8006546:	9309      	str	r3, [sp, #36]	; 0x24
 8006548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654a:	445b      	add	r3, fp
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	3301      	adds	r3, #1
 8006550:	2b01      	cmp	r3, #1
 8006552:	9304      	str	r3, [sp, #16]
 8006554:	bfb8      	it	lt
 8006556:	2301      	movlt	r3, #1
 8006558:	69e0      	ldr	r0, [r4, #28]
 800655a:	2100      	movs	r1, #0
 800655c:	2204      	movs	r2, #4
 800655e:	f102 0614 	add.w	r6, r2, #20
 8006562:	429e      	cmp	r6, r3
 8006564:	d93d      	bls.n	80065e2 <_dtoa_r+0x31a>
 8006566:	6041      	str	r1, [r0, #4]
 8006568:	4620      	mov	r0, r4
 800656a:	f000 fd9f 	bl	80070ac <_Balloc>
 800656e:	9000      	str	r0, [sp, #0]
 8006570:	2800      	cmp	r0, #0
 8006572:	d139      	bne.n	80065e8 <_dtoa_r+0x320>
 8006574:	4b16      	ldr	r3, [pc, #88]	; (80065d0 <_dtoa_r+0x308>)
 8006576:	4602      	mov	r2, r0
 8006578:	f240 11af 	movw	r1, #431	; 0x1af
 800657c:	e6bd      	b.n	80062fa <_dtoa_r+0x32>
 800657e:	2301      	movs	r3, #1
 8006580:	e7e1      	b.n	8006546 <_dtoa_r+0x27e>
 8006582:	2501      	movs	r5, #1
 8006584:	2300      	movs	r3, #0
 8006586:	9307      	str	r3, [sp, #28]
 8006588:	9509      	str	r5, [sp, #36]	; 0x24
 800658a:	f04f 33ff 	mov.w	r3, #4294967295
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	9304      	str	r3, [sp, #16]
 8006592:	2200      	movs	r2, #0
 8006594:	2312      	movs	r3, #18
 8006596:	e7d1      	b.n	800653c <_dtoa_r+0x274>
 8006598:	636f4361 	.word	0x636f4361
 800659c:	3fd287a7 	.word	0x3fd287a7
 80065a0:	8b60c8b3 	.word	0x8b60c8b3
 80065a4:	3fc68a28 	.word	0x3fc68a28
 80065a8:	509f79fb 	.word	0x509f79fb
 80065ac:	3fd34413 	.word	0x3fd34413
 80065b0:	08008365 	.word	0x08008365
 80065b4:	0800837c 	.word	0x0800837c
 80065b8:	7ff00000 	.word	0x7ff00000
 80065bc:	08008361 	.word	0x08008361
 80065c0:	08008358 	.word	0x08008358
 80065c4:	08008335 	.word	0x08008335
 80065c8:	3ff80000 	.word	0x3ff80000
 80065cc:	08008468 	.word	0x08008468
 80065d0:	080083d4 	.word	0x080083d4
 80065d4:	2301      	movs	r3, #1
 80065d6:	9309      	str	r3, [sp, #36]	; 0x24
 80065d8:	e7d7      	b.n	800658a <_dtoa_r+0x2c2>
 80065da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065dc:	9301      	str	r3, [sp, #4]
 80065de:	9304      	str	r3, [sp, #16]
 80065e0:	e7ba      	b.n	8006558 <_dtoa_r+0x290>
 80065e2:	3101      	adds	r1, #1
 80065e4:	0052      	lsls	r2, r2, #1
 80065e6:	e7ba      	b.n	800655e <_dtoa_r+0x296>
 80065e8:	69e3      	ldr	r3, [r4, #28]
 80065ea:	9a00      	ldr	r2, [sp, #0]
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	9b04      	ldr	r3, [sp, #16]
 80065f0:	2b0e      	cmp	r3, #14
 80065f2:	f200 80a8 	bhi.w	8006746 <_dtoa_r+0x47e>
 80065f6:	2d00      	cmp	r5, #0
 80065f8:	f000 80a5 	beq.w	8006746 <_dtoa_r+0x47e>
 80065fc:	f1bb 0f00 	cmp.w	fp, #0
 8006600:	dd38      	ble.n	8006674 <_dtoa_r+0x3ac>
 8006602:	4bc0      	ldr	r3, [pc, #768]	; (8006904 <_dtoa_r+0x63c>)
 8006604:	f00b 020f 	and.w	r2, fp, #15
 8006608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800660c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006610:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006614:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006618:	d019      	beq.n	800664e <_dtoa_r+0x386>
 800661a:	4bbb      	ldr	r3, [pc, #748]	; (8006908 <_dtoa_r+0x640>)
 800661c:	ec51 0b18 	vmov	r0, r1, d8
 8006620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006624:	f7fa f912 	bl	800084c <__aeabi_ddiv>
 8006628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800662c:	f008 080f 	and.w	r8, r8, #15
 8006630:	2503      	movs	r5, #3
 8006632:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006908 <_dtoa_r+0x640>
 8006636:	f1b8 0f00 	cmp.w	r8, #0
 800663a:	d10a      	bne.n	8006652 <_dtoa_r+0x38a>
 800663c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006640:	4632      	mov	r2, r6
 8006642:	463b      	mov	r3, r7
 8006644:	f7fa f902 	bl	800084c <__aeabi_ddiv>
 8006648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800664c:	e02b      	b.n	80066a6 <_dtoa_r+0x3de>
 800664e:	2502      	movs	r5, #2
 8006650:	e7ef      	b.n	8006632 <_dtoa_r+0x36a>
 8006652:	f018 0f01 	tst.w	r8, #1
 8006656:	d008      	beq.n	800666a <_dtoa_r+0x3a2>
 8006658:	4630      	mov	r0, r6
 800665a:	4639      	mov	r1, r7
 800665c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006660:	f7f9 ffca 	bl	80005f8 <__aeabi_dmul>
 8006664:	3501      	adds	r5, #1
 8006666:	4606      	mov	r6, r0
 8006668:	460f      	mov	r7, r1
 800666a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800666e:	f109 0908 	add.w	r9, r9, #8
 8006672:	e7e0      	b.n	8006636 <_dtoa_r+0x36e>
 8006674:	f000 809f 	beq.w	80067b6 <_dtoa_r+0x4ee>
 8006678:	f1cb 0600 	rsb	r6, fp, #0
 800667c:	4ba1      	ldr	r3, [pc, #644]	; (8006904 <_dtoa_r+0x63c>)
 800667e:	4fa2      	ldr	r7, [pc, #648]	; (8006908 <_dtoa_r+0x640>)
 8006680:	f006 020f 	and.w	r2, r6, #15
 8006684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	ec51 0b18 	vmov	r0, r1, d8
 8006690:	f7f9 ffb2 	bl	80005f8 <__aeabi_dmul>
 8006694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006698:	1136      	asrs	r6, r6, #4
 800669a:	2300      	movs	r3, #0
 800669c:	2502      	movs	r5, #2
 800669e:	2e00      	cmp	r6, #0
 80066a0:	d17e      	bne.n	80067a0 <_dtoa_r+0x4d8>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1d0      	bne.n	8006648 <_dtoa_r+0x380>
 80066a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8084 	beq.w	80067ba <_dtoa_r+0x4f2>
 80066b2:	4b96      	ldr	r3, [pc, #600]	; (800690c <_dtoa_r+0x644>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	4640      	mov	r0, r8
 80066b8:	4649      	mov	r1, r9
 80066ba:	f7fa fa0f 	bl	8000adc <__aeabi_dcmplt>
 80066be:	2800      	cmp	r0, #0
 80066c0:	d07b      	beq.n	80067ba <_dtoa_r+0x4f2>
 80066c2:	9b04      	ldr	r3, [sp, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d078      	beq.n	80067ba <_dtoa_r+0x4f2>
 80066c8:	9b01      	ldr	r3, [sp, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	dd39      	ble.n	8006742 <_dtoa_r+0x47a>
 80066ce:	4b90      	ldr	r3, [pc, #576]	; (8006910 <_dtoa_r+0x648>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	4640      	mov	r0, r8
 80066d4:	4649      	mov	r1, r9
 80066d6:	f7f9 ff8f 	bl	80005f8 <__aeabi_dmul>
 80066da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066de:	9e01      	ldr	r6, [sp, #4]
 80066e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80066e4:	3501      	adds	r5, #1
 80066e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80066ea:	4628      	mov	r0, r5
 80066ec:	f7f9 ff1a 	bl	8000524 <__aeabi_i2d>
 80066f0:	4642      	mov	r2, r8
 80066f2:	464b      	mov	r3, r9
 80066f4:	f7f9 ff80 	bl	80005f8 <__aeabi_dmul>
 80066f8:	4b86      	ldr	r3, [pc, #536]	; (8006914 <_dtoa_r+0x64c>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	f7f9 fdc6 	bl	800028c <__adddf3>
 8006700:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	2e00      	cmp	r6, #0
 800670c:	d158      	bne.n	80067c0 <_dtoa_r+0x4f8>
 800670e:	4b82      	ldr	r3, [pc, #520]	; (8006918 <_dtoa_r+0x650>)
 8006710:	2200      	movs	r2, #0
 8006712:	4640      	mov	r0, r8
 8006714:	4649      	mov	r1, r9
 8006716:	f7f9 fdb7 	bl	8000288 <__aeabi_dsub>
 800671a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800671e:	4680      	mov	r8, r0
 8006720:	4689      	mov	r9, r1
 8006722:	f7fa f9f9 	bl	8000b18 <__aeabi_dcmpgt>
 8006726:	2800      	cmp	r0, #0
 8006728:	f040 8296 	bne.w	8006c58 <_dtoa_r+0x990>
 800672c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006730:	4640      	mov	r0, r8
 8006732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006736:	4649      	mov	r1, r9
 8006738:	f7fa f9d0 	bl	8000adc <__aeabi_dcmplt>
 800673c:	2800      	cmp	r0, #0
 800673e:	f040 8289 	bne.w	8006c54 <_dtoa_r+0x98c>
 8006742:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006748:	2b00      	cmp	r3, #0
 800674a:	f2c0 814e 	blt.w	80069ea <_dtoa_r+0x722>
 800674e:	f1bb 0f0e 	cmp.w	fp, #14
 8006752:	f300 814a 	bgt.w	80069ea <_dtoa_r+0x722>
 8006756:	4b6b      	ldr	r3, [pc, #428]	; (8006904 <_dtoa_r+0x63c>)
 8006758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800675c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	f280 80dc 	bge.w	8006920 <_dtoa_r+0x658>
 8006768:	9b04      	ldr	r3, [sp, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f300 80d8 	bgt.w	8006920 <_dtoa_r+0x658>
 8006770:	f040 826f 	bne.w	8006c52 <_dtoa_r+0x98a>
 8006774:	4b68      	ldr	r3, [pc, #416]	; (8006918 <_dtoa_r+0x650>)
 8006776:	2200      	movs	r2, #0
 8006778:	4640      	mov	r0, r8
 800677a:	4649      	mov	r1, r9
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006784:	f7fa f9be 	bl	8000b04 <__aeabi_dcmpge>
 8006788:	9e04      	ldr	r6, [sp, #16]
 800678a:	4637      	mov	r7, r6
 800678c:	2800      	cmp	r0, #0
 800678e:	f040 8245 	bne.w	8006c1c <_dtoa_r+0x954>
 8006792:	9d00      	ldr	r5, [sp, #0]
 8006794:	2331      	movs	r3, #49	; 0x31
 8006796:	f805 3b01 	strb.w	r3, [r5], #1
 800679a:	f10b 0b01 	add.w	fp, fp, #1
 800679e:	e241      	b.n	8006c24 <_dtoa_r+0x95c>
 80067a0:	07f2      	lsls	r2, r6, #31
 80067a2:	d505      	bpl.n	80067b0 <_dtoa_r+0x4e8>
 80067a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067a8:	f7f9 ff26 	bl	80005f8 <__aeabi_dmul>
 80067ac:	3501      	adds	r5, #1
 80067ae:	2301      	movs	r3, #1
 80067b0:	1076      	asrs	r6, r6, #1
 80067b2:	3708      	adds	r7, #8
 80067b4:	e773      	b.n	800669e <_dtoa_r+0x3d6>
 80067b6:	2502      	movs	r5, #2
 80067b8:	e775      	b.n	80066a6 <_dtoa_r+0x3de>
 80067ba:	9e04      	ldr	r6, [sp, #16]
 80067bc:	465f      	mov	r7, fp
 80067be:	e792      	b.n	80066e6 <_dtoa_r+0x41e>
 80067c0:	9900      	ldr	r1, [sp, #0]
 80067c2:	4b50      	ldr	r3, [pc, #320]	; (8006904 <_dtoa_r+0x63c>)
 80067c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067c8:	4431      	add	r1, r6
 80067ca:	9102      	str	r1, [sp, #8]
 80067cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ce:	eeb0 9a47 	vmov.f32	s18, s14
 80067d2:	eef0 9a67 	vmov.f32	s19, s15
 80067d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80067da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067de:	2900      	cmp	r1, #0
 80067e0:	d044      	beq.n	800686c <_dtoa_r+0x5a4>
 80067e2:	494e      	ldr	r1, [pc, #312]	; (800691c <_dtoa_r+0x654>)
 80067e4:	2000      	movs	r0, #0
 80067e6:	f7fa f831 	bl	800084c <__aeabi_ddiv>
 80067ea:	ec53 2b19 	vmov	r2, r3, d9
 80067ee:	f7f9 fd4b 	bl	8000288 <__aeabi_dsub>
 80067f2:	9d00      	ldr	r5, [sp, #0]
 80067f4:	ec41 0b19 	vmov	d9, r0, r1
 80067f8:	4649      	mov	r1, r9
 80067fa:	4640      	mov	r0, r8
 80067fc:	f7fa f9ac 	bl	8000b58 <__aeabi_d2iz>
 8006800:	4606      	mov	r6, r0
 8006802:	f7f9 fe8f 	bl	8000524 <__aeabi_i2d>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4640      	mov	r0, r8
 800680c:	4649      	mov	r1, r9
 800680e:	f7f9 fd3b 	bl	8000288 <__aeabi_dsub>
 8006812:	3630      	adds	r6, #48	; 0x30
 8006814:	f805 6b01 	strb.w	r6, [r5], #1
 8006818:	ec53 2b19 	vmov	r2, r3, d9
 800681c:	4680      	mov	r8, r0
 800681e:	4689      	mov	r9, r1
 8006820:	f7fa f95c 	bl	8000adc <__aeabi_dcmplt>
 8006824:	2800      	cmp	r0, #0
 8006826:	d164      	bne.n	80068f2 <_dtoa_r+0x62a>
 8006828:	4642      	mov	r2, r8
 800682a:	464b      	mov	r3, r9
 800682c:	4937      	ldr	r1, [pc, #220]	; (800690c <_dtoa_r+0x644>)
 800682e:	2000      	movs	r0, #0
 8006830:	f7f9 fd2a 	bl	8000288 <__aeabi_dsub>
 8006834:	ec53 2b19 	vmov	r2, r3, d9
 8006838:	f7fa f950 	bl	8000adc <__aeabi_dcmplt>
 800683c:	2800      	cmp	r0, #0
 800683e:	f040 80b6 	bne.w	80069ae <_dtoa_r+0x6e6>
 8006842:	9b02      	ldr	r3, [sp, #8]
 8006844:	429d      	cmp	r5, r3
 8006846:	f43f af7c 	beq.w	8006742 <_dtoa_r+0x47a>
 800684a:	4b31      	ldr	r3, [pc, #196]	; (8006910 <_dtoa_r+0x648>)
 800684c:	ec51 0b19 	vmov	r0, r1, d9
 8006850:	2200      	movs	r2, #0
 8006852:	f7f9 fed1 	bl	80005f8 <__aeabi_dmul>
 8006856:	4b2e      	ldr	r3, [pc, #184]	; (8006910 <_dtoa_r+0x648>)
 8006858:	ec41 0b19 	vmov	d9, r0, r1
 800685c:	2200      	movs	r2, #0
 800685e:	4640      	mov	r0, r8
 8006860:	4649      	mov	r1, r9
 8006862:	f7f9 fec9 	bl	80005f8 <__aeabi_dmul>
 8006866:	4680      	mov	r8, r0
 8006868:	4689      	mov	r9, r1
 800686a:	e7c5      	b.n	80067f8 <_dtoa_r+0x530>
 800686c:	ec51 0b17 	vmov	r0, r1, d7
 8006870:	f7f9 fec2 	bl	80005f8 <__aeabi_dmul>
 8006874:	9b02      	ldr	r3, [sp, #8]
 8006876:	9d00      	ldr	r5, [sp, #0]
 8006878:	930f      	str	r3, [sp, #60]	; 0x3c
 800687a:	ec41 0b19 	vmov	d9, r0, r1
 800687e:	4649      	mov	r1, r9
 8006880:	4640      	mov	r0, r8
 8006882:	f7fa f969 	bl	8000b58 <__aeabi_d2iz>
 8006886:	4606      	mov	r6, r0
 8006888:	f7f9 fe4c 	bl	8000524 <__aeabi_i2d>
 800688c:	3630      	adds	r6, #48	; 0x30
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4640      	mov	r0, r8
 8006894:	4649      	mov	r1, r9
 8006896:	f7f9 fcf7 	bl	8000288 <__aeabi_dsub>
 800689a:	f805 6b01 	strb.w	r6, [r5], #1
 800689e:	9b02      	ldr	r3, [sp, #8]
 80068a0:	429d      	cmp	r5, r3
 80068a2:	4680      	mov	r8, r0
 80068a4:	4689      	mov	r9, r1
 80068a6:	f04f 0200 	mov.w	r2, #0
 80068aa:	d124      	bne.n	80068f6 <_dtoa_r+0x62e>
 80068ac:	4b1b      	ldr	r3, [pc, #108]	; (800691c <_dtoa_r+0x654>)
 80068ae:	ec51 0b19 	vmov	r0, r1, d9
 80068b2:	f7f9 fceb 	bl	800028c <__adddf3>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4640      	mov	r0, r8
 80068bc:	4649      	mov	r1, r9
 80068be:	f7fa f92b 	bl	8000b18 <__aeabi_dcmpgt>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d173      	bne.n	80069ae <_dtoa_r+0x6e6>
 80068c6:	ec53 2b19 	vmov	r2, r3, d9
 80068ca:	4914      	ldr	r1, [pc, #80]	; (800691c <_dtoa_r+0x654>)
 80068cc:	2000      	movs	r0, #0
 80068ce:	f7f9 fcdb 	bl	8000288 <__aeabi_dsub>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4640      	mov	r0, r8
 80068d8:	4649      	mov	r1, r9
 80068da:	f7fa f8ff 	bl	8000adc <__aeabi_dcmplt>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f43f af2f 	beq.w	8006742 <_dtoa_r+0x47a>
 80068e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80068e6:	1e6b      	subs	r3, r5, #1
 80068e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80068ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068ee:	2b30      	cmp	r3, #48	; 0x30
 80068f0:	d0f8      	beq.n	80068e4 <_dtoa_r+0x61c>
 80068f2:	46bb      	mov	fp, r7
 80068f4:	e04a      	b.n	800698c <_dtoa_r+0x6c4>
 80068f6:	4b06      	ldr	r3, [pc, #24]	; (8006910 <_dtoa_r+0x648>)
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	4680      	mov	r8, r0
 80068fe:	4689      	mov	r9, r1
 8006900:	e7bd      	b.n	800687e <_dtoa_r+0x5b6>
 8006902:	bf00      	nop
 8006904:	08008468 	.word	0x08008468
 8006908:	08008440 	.word	0x08008440
 800690c:	3ff00000 	.word	0x3ff00000
 8006910:	40240000 	.word	0x40240000
 8006914:	401c0000 	.word	0x401c0000
 8006918:	40140000 	.word	0x40140000
 800691c:	3fe00000 	.word	0x3fe00000
 8006920:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006924:	9d00      	ldr	r5, [sp, #0]
 8006926:	4642      	mov	r2, r8
 8006928:	464b      	mov	r3, r9
 800692a:	4630      	mov	r0, r6
 800692c:	4639      	mov	r1, r7
 800692e:	f7f9 ff8d 	bl	800084c <__aeabi_ddiv>
 8006932:	f7fa f911 	bl	8000b58 <__aeabi_d2iz>
 8006936:	9001      	str	r0, [sp, #4]
 8006938:	f7f9 fdf4 	bl	8000524 <__aeabi_i2d>
 800693c:	4642      	mov	r2, r8
 800693e:	464b      	mov	r3, r9
 8006940:	f7f9 fe5a 	bl	80005f8 <__aeabi_dmul>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4630      	mov	r0, r6
 800694a:	4639      	mov	r1, r7
 800694c:	f7f9 fc9c 	bl	8000288 <__aeabi_dsub>
 8006950:	9e01      	ldr	r6, [sp, #4]
 8006952:	9f04      	ldr	r7, [sp, #16]
 8006954:	3630      	adds	r6, #48	; 0x30
 8006956:	f805 6b01 	strb.w	r6, [r5], #1
 800695a:	9e00      	ldr	r6, [sp, #0]
 800695c:	1bae      	subs	r6, r5, r6
 800695e:	42b7      	cmp	r7, r6
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	d134      	bne.n	80069d0 <_dtoa_r+0x708>
 8006966:	f7f9 fc91 	bl	800028c <__adddf3>
 800696a:	4642      	mov	r2, r8
 800696c:	464b      	mov	r3, r9
 800696e:	4606      	mov	r6, r0
 8006970:	460f      	mov	r7, r1
 8006972:	f7fa f8d1 	bl	8000b18 <__aeabi_dcmpgt>
 8006976:	b9c8      	cbnz	r0, 80069ac <_dtoa_r+0x6e4>
 8006978:	4642      	mov	r2, r8
 800697a:	464b      	mov	r3, r9
 800697c:	4630      	mov	r0, r6
 800697e:	4639      	mov	r1, r7
 8006980:	f7fa f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006984:	b110      	cbz	r0, 800698c <_dtoa_r+0x6c4>
 8006986:	9b01      	ldr	r3, [sp, #4]
 8006988:	07db      	lsls	r3, r3, #31
 800698a:	d40f      	bmi.n	80069ac <_dtoa_r+0x6e4>
 800698c:	4651      	mov	r1, sl
 800698e:	4620      	mov	r0, r4
 8006990:	f000 fbcc 	bl	800712c <_Bfree>
 8006994:	2300      	movs	r3, #0
 8006996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006998:	702b      	strb	r3, [r5, #0]
 800699a:	f10b 0301 	add.w	r3, fp, #1
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f43f ace2 	beq.w	800636c <_dtoa_r+0xa4>
 80069a8:	601d      	str	r5, [r3, #0]
 80069aa:	e4df      	b.n	800636c <_dtoa_r+0xa4>
 80069ac:	465f      	mov	r7, fp
 80069ae:	462b      	mov	r3, r5
 80069b0:	461d      	mov	r5, r3
 80069b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069b6:	2a39      	cmp	r2, #57	; 0x39
 80069b8:	d106      	bne.n	80069c8 <_dtoa_r+0x700>
 80069ba:	9a00      	ldr	r2, [sp, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d1f7      	bne.n	80069b0 <_dtoa_r+0x6e8>
 80069c0:	9900      	ldr	r1, [sp, #0]
 80069c2:	2230      	movs	r2, #48	; 0x30
 80069c4:	3701      	adds	r7, #1
 80069c6:	700a      	strb	r2, [r1, #0]
 80069c8:	781a      	ldrb	r2, [r3, #0]
 80069ca:	3201      	adds	r2, #1
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e790      	b.n	80068f2 <_dtoa_r+0x62a>
 80069d0:	4ba3      	ldr	r3, [pc, #652]	; (8006c60 <_dtoa_r+0x998>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	f7f9 fe10 	bl	80005f8 <__aeabi_dmul>
 80069d8:	2200      	movs	r2, #0
 80069da:	2300      	movs	r3, #0
 80069dc:	4606      	mov	r6, r0
 80069de:	460f      	mov	r7, r1
 80069e0:	f7fa f872 	bl	8000ac8 <__aeabi_dcmpeq>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d09e      	beq.n	8006926 <_dtoa_r+0x65e>
 80069e8:	e7d0      	b.n	800698c <_dtoa_r+0x6c4>
 80069ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ec:	2a00      	cmp	r2, #0
 80069ee:	f000 80ca 	beq.w	8006b86 <_dtoa_r+0x8be>
 80069f2:	9a07      	ldr	r2, [sp, #28]
 80069f4:	2a01      	cmp	r2, #1
 80069f6:	f300 80ad 	bgt.w	8006b54 <_dtoa_r+0x88c>
 80069fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069fc:	2a00      	cmp	r2, #0
 80069fe:	f000 80a5 	beq.w	8006b4c <_dtoa_r+0x884>
 8006a02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a06:	9e08      	ldr	r6, [sp, #32]
 8006a08:	9d05      	ldr	r5, [sp, #20]
 8006a0a:	9a05      	ldr	r2, [sp, #20]
 8006a0c:	441a      	add	r2, r3
 8006a0e:	9205      	str	r2, [sp, #20]
 8006a10:	9a06      	ldr	r2, [sp, #24]
 8006a12:	2101      	movs	r1, #1
 8006a14:	441a      	add	r2, r3
 8006a16:	4620      	mov	r0, r4
 8006a18:	9206      	str	r2, [sp, #24]
 8006a1a:	f000 fc3d 	bl	8007298 <__i2b>
 8006a1e:	4607      	mov	r7, r0
 8006a20:	b165      	cbz	r5, 8006a3c <_dtoa_r+0x774>
 8006a22:	9b06      	ldr	r3, [sp, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dd09      	ble.n	8006a3c <_dtoa_r+0x774>
 8006a28:	42ab      	cmp	r3, r5
 8006a2a:	9a05      	ldr	r2, [sp, #20]
 8006a2c:	bfa8      	it	ge
 8006a2e:	462b      	movge	r3, r5
 8006a30:	1ad2      	subs	r2, r2, r3
 8006a32:	9205      	str	r2, [sp, #20]
 8006a34:	9a06      	ldr	r2, [sp, #24]
 8006a36:	1aed      	subs	r5, r5, r3
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	9306      	str	r3, [sp, #24]
 8006a3c:	9b08      	ldr	r3, [sp, #32]
 8006a3e:	b1f3      	cbz	r3, 8006a7e <_dtoa_r+0x7b6>
 8006a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80a3 	beq.w	8006b8e <_dtoa_r+0x8c6>
 8006a48:	2e00      	cmp	r6, #0
 8006a4a:	dd10      	ble.n	8006a6e <_dtoa_r+0x7a6>
 8006a4c:	4639      	mov	r1, r7
 8006a4e:	4632      	mov	r2, r6
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 fce1 	bl	8007418 <__pow5mult>
 8006a56:	4652      	mov	r2, sl
 8006a58:	4601      	mov	r1, r0
 8006a5a:	4607      	mov	r7, r0
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fc31 	bl	80072c4 <__multiply>
 8006a62:	4651      	mov	r1, sl
 8006a64:	4680      	mov	r8, r0
 8006a66:	4620      	mov	r0, r4
 8006a68:	f000 fb60 	bl	800712c <_Bfree>
 8006a6c:	46c2      	mov	sl, r8
 8006a6e:	9b08      	ldr	r3, [sp, #32]
 8006a70:	1b9a      	subs	r2, r3, r6
 8006a72:	d004      	beq.n	8006a7e <_dtoa_r+0x7b6>
 8006a74:	4651      	mov	r1, sl
 8006a76:	4620      	mov	r0, r4
 8006a78:	f000 fcce 	bl	8007418 <__pow5mult>
 8006a7c:	4682      	mov	sl, r0
 8006a7e:	2101      	movs	r1, #1
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 fc09 	bl	8007298 <__i2b>
 8006a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	f340 8081 	ble.w	8006b92 <_dtoa_r+0x8ca>
 8006a90:	461a      	mov	r2, r3
 8006a92:	4601      	mov	r1, r0
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fcbf 	bl	8007418 <__pow5mult>
 8006a9a:	9b07      	ldr	r3, [sp, #28]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	dd7a      	ble.n	8006b98 <_dtoa_r+0x8d0>
 8006aa2:	f04f 0800 	mov.w	r8, #0
 8006aa6:	6933      	ldr	r3, [r6, #16]
 8006aa8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006aac:	6918      	ldr	r0, [r3, #16]
 8006aae:	f000 fba5 	bl	80071fc <__hi0bits>
 8006ab2:	f1c0 0020 	rsb	r0, r0, #32
 8006ab6:	9b06      	ldr	r3, [sp, #24]
 8006ab8:	4418      	add	r0, r3
 8006aba:	f010 001f 	ands.w	r0, r0, #31
 8006abe:	f000 8094 	beq.w	8006bea <_dtoa_r+0x922>
 8006ac2:	f1c0 0320 	rsb	r3, r0, #32
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	f340 8085 	ble.w	8006bd6 <_dtoa_r+0x90e>
 8006acc:	9b05      	ldr	r3, [sp, #20]
 8006ace:	f1c0 001c 	rsb	r0, r0, #28
 8006ad2:	4403      	add	r3, r0
 8006ad4:	9305      	str	r3, [sp, #20]
 8006ad6:	9b06      	ldr	r3, [sp, #24]
 8006ad8:	4403      	add	r3, r0
 8006ada:	4405      	add	r5, r0
 8006adc:	9306      	str	r3, [sp, #24]
 8006ade:	9b05      	ldr	r3, [sp, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dd05      	ble.n	8006af0 <_dtoa_r+0x828>
 8006ae4:	4651      	mov	r1, sl
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fcef 	bl	80074cc <__lshift>
 8006aee:	4682      	mov	sl, r0
 8006af0:	9b06      	ldr	r3, [sp, #24]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	dd05      	ble.n	8006b02 <_dtoa_r+0x83a>
 8006af6:	4631      	mov	r1, r6
 8006af8:	461a      	mov	r2, r3
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 fce6 	bl	80074cc <__lshift>
 8006b00:	4606      	mov	r6, r0
 8006b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d072      	beq.n	8006bee <_dtoa_r+0x926>
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	f000 fd4a 	bl	80075a4 <__mcmp>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	da6c      	bge.n	8006bee <_dtoa_r+0x926>
 8006b14:	2300      	movs	r3, #0
 8006b16:	4651      	mov	r1, sl
 8006b18:	220a      	movs	r2, #10
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 fb28 	bl	8007170 <__multadd>
 8006b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b26:	4682      	mov	sl, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 81b0 	beq.w	8006e8e <_dtoa_r+0xbc6>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4639      	mov	r1, r7
 8006b32:	220a      	movs	r2, #10
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 fb1b 	bl	8007170 <__multadd>
 8006b3a:	9b01      	ldr	r3, [sp, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	4607      	mov	r7, r0
 8006b40:	f300 8096 	bgt.w	8006c70 <_dtoa_r+0x9a8>
 8006b44:	9b07      	ldr	r3, [sp, #28]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	dc59      	bgt.n	8006bfe <_dtoa_r+0x936>
 8006b4a:	e091      	b.n	8006c70 <_dtoa_r+0x9a8>
 8006b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b52:	e758      	b.n	8006a06 <_dtoa_r+0x73e>
 8006b54:	9b04      	ldr	r3, [sp, #16]
 8006b56:	1e5e      	subs	r6, r3, #1
 8006b58:	9b08      	ldr	r3, [sp, #32]
 8006b5a:	42b3      	cmp	r3, r6
 8006b5c:	bfbf      	itttt	lt
 8006b5e:	9b08      	ldrlt	r3, [sp, #32]
 8006b60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006b62:	9608      	strlt	r6, [sp, #32]
 8006b64:	1af3      	sublt	r3, r6, r3
 8006b66:	bfb4      	ite	lt
 8006b68:	18d2      	addlt	r2, r2, r3
 8006b6a:	1b9e      	subge	r6, r3, r6
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	bfbc      	itt	lt
 8006b70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006b72:	2600      	movlt	r6, #0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bfb7      	itett	lt
 8006b78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006b7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006b80:	1a9d      	sublt	r5, r3, r2
 8006b82:	2300      	movlt	r3, #0
 8006b84:	e741      	b.n	8006a0a <_dtoa_r+0x742>
 8006b86:	9e08      	ldr	r6, [sp, #32]
 8006b88:	9d05      	ldr	r5, [sp, #20]
 8006b8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b8c:	e748      	b.n	8006a20 <_dtoa_r+0x758>
 8006b8e:	9a08      	ldr	r2, [sp, #32]
 8006b90:	e770      	b.n	8006a74 <_dtoa_r+0x7ac>
 8006b92:	9b07      	ldr	r3, [sp, #28]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	dc19      	bgt.n	8006bcc <_dtoa_r+0x904>
 8006b98:	9b02      	ldr	r3, [sp, #8]
 8006b9a:	b9bb      	cbnz	r3, 8006bcc <_dtoa_r+0x904>
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ba2:	b99b      	cbnz	r3, 8006bcc <_dtoa_r+0x904>
 8006ba4:	9b03      	ldr	r3, [sp, #12]
 8006ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006baa:	0d1b      	lsrs	r3, r3, #20
 8006bac:	051b      	lsls	r3, r3, #20
 8006bae:	b183      	cbz	r3, 8006bd2 <_dtoa_r+0x90a>
 8006bb0:	9b05      	ldr	r3, [sp, #20]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	9305      	str	r3, [sp, #20]
 8006bb6:	9b06      	ldr	r3, [sp, #24]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	9306      	str	r3, [sp, #24]
 8006bbc:	f04f 0801 	mov.w	r8, #1
 8006bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f47f af6f 	bne.w	8006aa6 <_dtoa_r+0x7de>
 8006bc8:	2001      	movs	r0, #1
 8006bca:	e774      	b.n	8006ab6 <_dtoa_r+0x7ee>
 8006bcc:	f04f 0800 	mov.w	r8, #0
 8006bd0:	e7f6      	b.n	8006bc0 <_dtoa_r+0x8f8>
 8006bd2:	4698      	mov	r8, r3
 8006bd4:	e7f4      	b.n	8006bc0 <_dtoa_r+0x8f8>
 8006bd6:	d082      	beq.n	8006ade <_dtoa_r+0x816>
 8006bd8:	9a05      	ldr	r2, [sp, #20]
 8006bda:	331c      	adds	r3, #28
 8006bdc:	441a      	add	r2, r3
 8006bde:	9205      	str	r2, [sp, #20]
 8006be0:	9a06      	ldr	r2, [sp, #24]
 8006be2:	441a      	add	r2, r3
 8006be4:	441d      	add	r5, r3
 8006be6:	9206      	str	r2, [sp, #24]
 8006be8:	e779      	b.n	8006ade <_dtoa_r+0x816>
 8006bea:	4603      	mov	r3, r0
 8006bec:	e7f4      	b.n	8006bd8 <_dtoa_r+0x910>
 8006bee:	9b04      	ldr	r3, [sp, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	dc37      	bgt.n	8006c64 <_dtoa_r+0x99c>
 8006bf4:	9b07      	ldr	r3, [sp, #28]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	dd34      	ble.n	8006c64 <_dtoa_r+0x99c>
 8006bfa:	9b04      	ldr	r3, [sp, #16]
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	9b01      	ldr	r3, [sp, #4]
 8006c00:	b963      	cbnz	r3, 8006c1c <_dtoa_r+0x954>
 8006c02:	4631      	mov	r1, r6
 8006c04:	2205      	movs	r2, #5
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 fab2 	bl	8007170 <__multadd>
 8006c0c:	4601      	mov	r1, r0
 8006c0e:	4606      	mov	r6, r0
 8006c10:	4650      	mov	r0, sl
 8006c12:	f000 fcc7 	bl	80075a4 <__mcmp>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	f73f adbb 	bgt.w	8006792 <_dtoa_r+0x4ca>
 8006c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c1e:	9d00      	ldr	r5, [sp, #0]
 8006c20:	ea6f 0b03 	mvn.w	fp, r3
 8006c24:	f04f 0800 	mov.w	r8, #0
 8006c28:	4631      	mov	r1, r6
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 fa7e 	bl	800712c <_Bfree>
 8006c30:	2f00      	cmp	r7, #0
 8006c32:	f43f aeab 	beq.w	800698c <_dtoa_r+0x6c4>
 8006c36:	f1b8 0f00 	cmp.w	r8, #0
 8006c3a:	d005      	beq.n	8006c48 <_dtoa_r+0x980>
 8006c3c:	45b8      	cmp	r8, r7
 8006c3e:	d003      	beq.n	8006c48 <_dtoa_r+0x980>
 8006c40:	4641      	mov	r1, r8
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 fa72 	bl	800712c <_Bfree>
 8006c48:	4639      	mov	r1, r7
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 fa6e 	bl	800712c <_Bfree>
 8006c50:	e69c      	b.n	800698c <_dtoa_r+0x6c4>
 8006c52:	2600      	movs	r6, #0
 8006c54:	4637      	mov	r7, r6
 8006c56:	e7e1      	b.n	8006c1c <_dtoa_r+0x954>
 8006c58:	46bb      	mov	fp, r7
 8006c5a:	4637      	mov	r7, r6
 8006c5c:	e599      	b.n	8006792 <_dtoa_r+0x4ca>
 8006c5e:	bf00      	nop
 8006c60:	40240000 	.word	0x40240000
 8006c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 80c8 	beq.w	8006dfc <_dtoa_r+0xb34>
 8006c6c:	9b04      	ldr	r3, [sp, #16]
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	2d00      	cmp	r5, #0
 8006c72:	dd05      	ble.n	8006c80 <_dtoa_r+0x9b8>
 8006c74:	4639      	mov	r1, r7
 8006c76:	462a      	mov	r2, r5
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 fc27 	bl	80074cc <__lshift>
 8006c7e:	4607      	mov	r7, r0
 8006c80:	f1b8 0f00 	cmp.w	r8, #0
 8006c84:	d05b      	beq.n	8006d3e <_dtoa_r+0xa76>
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 fa0f 	bl	80070ac <_Balloc>
 8006c8e:	4605      	mov	r5, r0
 8006c90:	b928      	cbnz	r0, 8006c9e <_dtoa_r+0x9d6>
 8006c92:	4b83      	ldr	r3, [pc, #524]	; (8006ea0 <_dtoa_r+0xbd8>)
 8006c94:	4602      	mov	r2, r0
 8006c96:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c9a:	f7ff bb2e 	b.w	80062fa <_dtoa_r+0x32>
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	3202      	adds	r2, #2
 8006ca2:	0092      	lsls	r2, r2, #2
 8006ca4:	f107 010c 	add.w	r1, r7, #12
 8006ca8:	300c      	adds	r0, #12
 8006caa:	f000 ffab 	bl	8007c04 <memcpy>
 8006cae:	2201      	movs	r2, #1
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fc0a 	bl	80074cc <__lshift>
 8006cb8:	9b00      	ldr	r3, [sp, #0]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	9304      	str	r3, [sp, #16]
 8006cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	9308      	str	r3, [sp, #32]
 8006cc6:	9b02      	ldr	r3, [sp, #8]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	46b8      	mov	r8, r7
 8006cce:	9306      	str	r3, [sp, #24]
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	4650      	mov	r0, sl
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	f7ff fa6b 	bl	80061b6 <quorem>
 8006ce0:	4641      	mov	r1, r8
 8006ce2:	9002      	str	r0, [sp, #8]
 8006ce4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ce8:	4650      	mov	r0, sl
 8006cea:	f000 fc5b 	bl	80075a4 <__mcmp>
 8006cee:	463a      	mov	r2, r7
 8006cf0:	9005      	str	r0, [sp, #20]
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 fc71 	bl	80075dc <__mdiff>
 8006cfa:	68c2      	ldr	r2, [r0, #12]
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	bb02      	cbnz	r2, 8006d42 <_dtoa_r+0xa7a>
 8006d00:	4601      	mov	r1, r0
 8006d02:	4650      	mov	r0, sl
 8006d04:	f000 fc4e 	bl	80075a4 <__mcmp>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d10:	f000 fa0c 	bl	800712c <_Bfree>
 8006d14:	9b07      	ldr	r3, [sp, #28]
 8006d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d18:	9d04      	ldr	r5, [sp, #16]
 8006d1a:	ea43 0102 	orr.w	r1, r3, r2
 8006d1e:	9b06      	ldr	r3, [sp, #24]
 8006d20:	4319      	orrs	r1, r3
 8006d22:	d110      	bne.n	8006d46 <_dtoa_r+0xa7e>
 8006d24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d28:	d029      	beq.n	8006d7e <_dtoa_r+0xab6>
 8006d2a:	9b05      	ldr	r3, [sp, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	dd02      	ble.n	8006d36 <_dtoa_r+0xa6e>
 8006d30:	9b02      	ldr	r3, [sp, #8]
 8006d32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d36:	9b01      	ldr	r3, [sp, #4]
 8006d38:	f883 9000 	strb.w	r9, [r3]
 8006d3c:	e774      	b.n	8006c28 <_dtoa_r+0x960>
 8006d3e:	4638      	mov	r0, r7
 8006d40:	e7ba      	b.n	8006cb8 <_dtoa_r+0x9f0>
 8006d42:	2201      	movs	r2, #1
 8006d44:	e7e1      	b.n	8006d0a <_dtoa_r+0xa42>
 8006d46:	9b05      	ldr	r3, [sp, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	db04      	blt.n	8006d56 <_dtoa_r+0xa8e>
 8006d4c:	9907      	ldr	r1, [sp, #28]
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	9906      	ldr	r1, [sp, #24]
 8006d52:	430b      	orrs	r3, r1
 8006d54:	d120      	bne.n	8006d98 <_dtoa_r+0xad0>
 8006d56:	2a00      	cmp	r2, #0
 8006d58:	dded      	ble.n	8006d36 <_dtoa_r+0xa6e>
 8006d5a:	4651      	mov	r1, sl
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 fbb4 	bl	80074cc <__lshift>
 8006d64:	4631      	mov	r1, r6
 8006d66:	4682      	mov	sl, r0
 8006d68:	f000 fc1c 	bl	80075a4 <__mcmp>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	dc03      	bgt.n	8006d78 <_dtoa_r+0xab0>
 8006d70:	d1e1      	bne.n	8006d36 <_dtoa_r+0xa6e>
 8006d72:	f019 0f01 	tst.w	r9, #1
 8006d76:	d0de      	beq.n	8006d36 <_dtoa_r+0xa6e>
 8006d78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d7c:	d1d8      	bne.n	8006d30 <_dtoa_r+0xa68>
 8006d7e:	9a01      	ldr	r2, [sp, #4]
 8006d80:	2339      	movs	r3, #57	; 0x39
 8006d82:	7013      	strb	r3, [r2, #0]
 8006d84:	462b      	mov	r3, r5
 8006d86:	461d      	mov	r5, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d8e:	2a39      	cmp	r2, #57	; 0x39
 8006d90:	d06c      	beq.n	8006e6c <_dtoa_r+0xba4>
 8006d92:	3201      	adds	r2, #1
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	e747      	b.n	8006c28 <_dtoa_r+0x960>
 8006d98:	2a00      	cmp	r2, #0
 8006d9a:	dd07      	ble.n	8006dac <_dtoa_r+0xae4>
 8006d9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006da0:	d0ed      	beq.n	8006d7e <_dtoa_r+0xab6>
 8006da2:	9a01      	ldr	r2, [sp, #4]
 8006da4:	f109 0301 	add.w	r3, r9, #1
 8006da8:	7013      	strb	r3, [r2, #0]
 8006daa:	e73d      	b.n	8006c28 <_dtoa_r+0x960>
 8006dac:	9b04      	ldr	r3, [sp, #16]
 8006dae:	9a08      	ldr	r2, [sp, #32]
 8006db0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d043      	beq.n	8006e40 <_dtoa_r+0xb78>
 8006db8:	4651      	mov	r1, sl
 8006dba:	2300      	movs	r3, #0
 8006dbc:	220a      	movs	r2, #10
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 f9d6 	bl	8007170 <__multadd>
 8006dc4:	45b8      	cmp	r8, r7
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	f04f 020a 	mov.w	r2, #10
 8006dd0:	4641      	mov	r1, r8
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	d107      	bne.n	8006de6 <_dtoa_r+0xb1e>
 8006dd6:	f000 f9cb 	bl	8007170 <__multadd>
 8006dda:	4680      	mov	r8, r0
 8006ddc:	4607      	mov	r7, r0
 8006dde:	9b04      	ldr	r3, [sp, #16]
 8006de0:	3301      	adds	r3, #1
 8006de2:	9304      	str	r3, [sp, #16]
 8006de4:	e775      	b.n	8006cd2 <_dtoa_r+0xa0a>
 8006de6:	f000 f9c3 	bl	8007170 <__multadd>
 8006dea:	4639      	mov	r1, r7
 8006dec:	4680      	mov	r8, r0
 8006dee:	2300      	movs	r3, #0
 8006df0:	220a      	movs	r2, #10
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 f9bc 	bl	8007170 <__multadd>
 8006df8:	4607      	mov	r7, r0
 8006dfa:	e7f0      	b.n	8006dde <_dtoa_r+0xb16>
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	9d00      	ldr	r5, [sp, #0]
 8006e02:	4631      	mov	r1, r6
 8006e04:	4650      	mov	r0, sl
 8006e06:	f7ff f9d6 	bl	80061b6 <quorem>
 8006e0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e0e:	9b00      	ldr	r3, [sp, #0]
 8006e10:	f805 9b01 	strb.w	r9, [r5], #1
 8006e14:	1aea      	subs	r2, r5, r3
 8006e16:	9b01      	ldr	r3, [sp, #4]
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	dd07      	ble.n	8006e2c <_dtoa_r+0xb64>
 8006e1c:	4651      	mov	r1, sl
 8006e1e:	2300      	movs	r3, #0
 8006e20:	220a      	movs	r2, #10
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 f9a4 	bl	8007170 <__multadd>
 8006e28:	4682      	mov	sl, r0
 8006e2a:	e7ea      	b.n	8006e02 <_dtoa_r+0xb3a>
 8006e2c:	9b01      	ldr	r3, [sp, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	bfc8      	it	gt
 8006e32:	461d      	movgt	r5, r3
 8006e34:	9b00      	ldr	r3, [sp, #0]
 8006e36:	bfd8      	it	le
 8006e38:	2501      	movle	r5, #1
 8006e3a:	441d      	add	r5, r3
 8006e3c:	f04f 0800 	mov.w	r8, #0
 8006e40:	4651      	mov	r1, sl
 8006e42:	2201      	movs	r2, #1
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fb41 	bl	80074cc <__lshift>
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	4682      	mov	sl, r0
 8006e4e:	f000 fba9 	bl	80075a4 <__mcmp>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	dc96      	bgt.n	8006d84 <_dtoa_r+0xabc>
 8006e56:	d102      	bne.n	8006e5e <_dtoa_r+0xb96>
 8006e58:	f019 0f01 	tst.w	r9, #1
 8006e5c:	d192      	bne.n	8006d84 <_dtoa_r+0xabc>
 8006e5e:	462b      	mov	r3, r5
 8006e60:	461d      	mov	r5, r3
 8006e62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e66:	2a30      	cmp	r2, #48	; 0x30
 8006e68:	d0fa      	beq.n	8006e60 <_dtoa_r+0xb98>
 8006e6a:	e6dd      	b.n	8006c28 <_dtoa_r+0x960>
 8006e6c:	9a00      	ldr	r2, [sp, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d189      	bne.n	8006d86 <_dtoa_r+0xabe>
 8006e72:	f10b 0b01 	add.w	fp, fp, #1
 8006e76:	2331      	movs	r3, #49	; 0x31
 8006e78:	e796      	b.n	8006da8 <_dtoa_r+0xae0>
 8006e7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <_dtoa_r+0xbdc>)
 8006e7c:	f7ff ba99 	b.w	80063b2 <_dtoa_r+0xea>
 8006e80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f47f aa6d 	bne.w	8006362 <_dtoa_r+0x9a>
 8006e88:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <_dtoa_r+0xbe0>)
 8006e8a:	f7ff ba92 	b.w	80063b2 <_dtoa_r+0xea>
 8006e8e:	9b01      	ldr	r3, [sp, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	dcb5      	bgt.n	8006e00 <_dtoa_r+0xb38>
 8006e94:	9b07      	ldr	r3, [sp, #28]
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	f73f aeb1 	bgt.w	8006bfe <_dtoa_r+0x936>
 8006e9c:	e7b0      	b.n	8006e00 <_dtoa_r+0xb38>
 8006e9e:	bf00      	nop
 8006ea0:	080083d4 	.word	0x080083d4
 8006ea4:	08008334 	.word	0x08008334
 8006ea8:	08008358 	.word	0x08008358

08006eac <_free_r>:
 8006eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eae:	2900      	cmp	r1, #0
 8006eb0:	d044      	beq.n	8006f3c <_free_r+0x90>
 8006eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb6:	9001      	str	r0, [sp, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f1a1 0404 	sub.w	r4, r1, #4
 8006ebe:	bfb8      	it	lt
 8006ec0:	18e4      	addlt	r4, r4, r3
 8006ec2:	f000 f8e7 	bl	8007094 <__malloc_lock>
 8006ec6:	4a1e      	ldr	r2, [pc, #120]	; (8006f40 <_free_r+0x94>)
 8006ec8:	9801      	ldr	r0, [sp, #4]
 8006eca:	6813      	ldr	r3, [r2, #0]
 8006ecc:	b933      	cbnz	r3, 8006edc <_free_r+0x30>
 8006ece:	6063      	str	r3, [r4, #4]
 8006ed0:	6014      	str	r4, [r2, #0]
 8006ed2:	b003      	add	sp, #12
 8006ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ed8:	f000 b8e2 	b.w	80070a0 <__malloc_unlock>
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	d908      	bls.n	8006ef2 <_free_r+0x46>
 8006ee0:	6825      	ldr	r5, [r4, #0]
 8006ee2:	1961      	adds	r1, r4, r5
 8006ee4:	428b      	cmp	r3, r1
 8006ee6:	bf01      	itttt	eq
 8006ee8:	6819      	ldreq	r1, [r3, #0]
 8006eea:	685b      	ldreq	r3, [r3, #4]
 8006eec:	1949      	addeq	r1, r1, r5
 8006eee:	6021      	streq	r1, [r4, #0]
 8006ef0:	e7ed      	b.n	8006ece <_free_r+0x22>
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	b10b      	cbz	r3, 8006efc <_free_r+0x50>
 8006ef8:	42a3      	cmp	r3, r4
 8006efa:	d9fa      	bls.n	8006ef2 <_free_r+0x46>
 8006efc:	6811      	ldr	r1, [r2, #0]
 8006efe:	1855      	adds	r5, r2, r1
 8006f00:	42a5      	cmp	r5, r4
 8006f02:	d10b      	bne.n	8006f1c <_free_r+0x70>
 8006f04:	6824      	ldr	r4, [r4, #0]
 8006f06:	4421      	add	r1, r4
 8006f08:	1854      	adds	r4, r2, r1
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	6011      	str	r1, [r2, #0]
 8006f0e:	d1e0      	bne.n	8006ed2 <_free_r+0x26>
 8006f10:	681c      	ldr	r4, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	6053      	str	r3, [r2, #4]
 8006f16:	440c      	add	r4, r1
 8006f18:	6014      	str	r4, [r2, #0]
 8006f1a:	e7da      	b.n	8006ed2 <_free_r+0x26>
 8006f1c:	d902      	bls.n	8006f24 <_free_r+0x78>
 8006f1e:	230c      	movs	r3, #12
 8006f20:	6003      	str	r3, [r0, #0]
 8006f22:	e7d6      	b.n	8006ed2 <_free_r+0x26>
 8006f24:	6825      	ldr	r5, [r4, #0]
 8006f26:	1961      	adds	r1, r4, r5
 8006f28:	428b      	cmp	r3, r1
 8006f2a:	bf04      	itt	eq
 8006f2c:	6819      	ldreq	r1, [r3, #0]
 8006f2e:	685b      	ldreq	r3, [r3, #4]
 8006f30:	6063      	str	r3, [r4, #4]
 8006f32:	bf04      	itt	eq
 8006f34:	1949      	addeq	r1, r1, r5
 8006f36:	6021      	streq	r1, [r4, #0]
 8006f38:	6054      	str	r4, [r2, #4]
 8006f3a:	e7ca      	b.n	8006ed2 <_free_r+0x26>
 8006f3c:	b003      	add	sp, #12
 8006f3e:	bd30      	pop	{r4, r5, pc}
 8006f40:	200004a4 	.word	0x200004a4

08006f44 <malloc>:
 8006f44:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <malloc+0xc>)
 8006f46:	4601      	mov	r1, r0
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	f000 b823 	b.w	8006f94 <_malloc_r>
 8006f4e:	bf00      	nop
 8006f50:	20000064 	.word	0x20000064

08006f54 <sbrk_aligned>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	4e0e      	ldr	r6, [pc, #56]	; (8006f90 <sbrk_aligned+0x3c>)
 8006f58:	460c      	mov	r4, r1
 8006f5a:	6831      	ldr	r1, [r6, #0]
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	b911      	cbnz	r1, 8006f66 <sbrk_aligned+0x12>
 8006f60:	f000 fe40 	bl	8007be4 <_sbrk_r>
 8006f64:	6030      	str	r0, [r6, #0]
 8006f66:	4621      	mov	r1, r4
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f000 fe3b 	bl	8007be4 <_sbrk_r>
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	d00a      	beq.n	8006f88 <sbrk_aligned+0x34>
 8006f72:	1cc4      	adds	r4, r0, #3
 8006f74:	f024 0403 	bic.w	r4, r4, #3
 8006f78:	42a0      	cmp	r0, r4
 8006f7a:	d007      	beq.n	8006f8c <sbrk_aligned+0x38>
 8006f7c:	1a21      	subs	r1, r4, r0
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f000 fe30 	bl	8007be4 <_sbrk_r>
 8006f84:	3001      	adds	r0, #1
 8006f86:	d101      	bne.n	8006f8c <sbrk_aligned+0x38>
 8006f88:	f04f 34ff 	mov.w	r4, #4294967295
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	bd70      	pop	{r4, r5, r6, pc}
 8006f90:	200004a8 	.word	0x200004a8

08006f94 <_malloc_r>:
 8006f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f98:	1ccd      	adds	r5, r1, #3
 8006f9a:	f025 0503 	bic.w	r5, r5, #3
 8006f9e:	3508      	adds	r5, #8
 8006fa0:	2d0c      	cmp	r5, #12
 8006fa2:	bf38      	it	cc
 8006fa4:	250c      	movcc	r5, #12
 8006fa6:	2d00      	cmp	r5, #0
 8006fa8:	4607      	mov	r7, r0
 8006faa:	db01      	blt.n	8006fb0 <_malloc_r+0x1c>
 8006fac:	42a9      	cmp	r1, r5
 8006fae:	d905      	bls.n	8006fbc <_malloc_r+0x28>
 8006fb0:	230c      	movs	r3, #12
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	2600      	movs	r6, #0
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007090 <_malloc_r+0xfc>
 8006fc0:	f000 f868 	bl	8007094 <__malloc_lock>
 8006fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fc8:	461c      	mov	r4, r3
 8006fca:	bb5c      	cbnz	r4, 8007024 <_malloc_r+0x90>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f7ff ffc0 	bl	8006f54 <sbrk_aligned>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	d155      	bne.n	8007086 <_malloc_r+0xf2>
 8006fda:	f8d8 4000 	ldr.w	r4, [r8]
 8006fde:	4626      	mov	r6, r4
 8006fe0:	2e00      	cmp	r6, #0
 8006fe2:	d145      	bne.n	8007070 <_malloc_r+0xdc>
 8006fe4:	2c00      	cmp	r4, #0
 8006fe6:	d048      	beq.n	800707a <_malloc_r+0xe6>
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	4631      	mov	r1, r6
 8006fec:	4638      	mov	r0, r7
 8006fee:	eb04 0903 	add.w	r9, r4, r3
 8006ff2:	f000 fdf7 	bl	8007be4 <_sbrk_r>
 8006ff6:	4581      	cmp	r9, r0
 8006ff8:	d13f      	bne.n	800707a <_malloc_r+0xe6>
 8006ffa:	6821      	ldr	r1, [r4, #0]
 8006ffc:	1a6d      	subs	r5, r5, r1
 8006ffe:	4629      	mov	r1, r5
 8007000:	4638      	mov	r0, r7
 8007002:	f7ff ffa7 	bl	8006f54 <sbrk_aligned>
 8007006:	3001      	adds	r0, #1
 8007008:	d037      	beq.n	800707a <_malloc_r+0xe6>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	442b      	add	r3, r5
 800700e:	6023      	str	r3, [r4, #0]
 8007010:	f8d8 3000 	ldr.w	r3, [r8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d038      	beq.n	800708a <_malloc_r+0xf6>
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	42a2      	cmp	r2, r4
 800701c:	d12b      	bne.n	8007076 <_malloc_r+0xe2>
 800701e:	2200      	movs	r2, #0
 8007020:	605a      	str	r2, [r3, #4]
 8007022:	e00f      	b.n	8007044 <_malloc_r+0xb0>
 8007024:	6822      	ldr	r2, [r4, #0]
 8007026:	1b52      	subs	r2, r2, r5
 8007028:	d41f      	bmi.n	800706a <_malloc_r+0xd6>
 800702a:	2a0b      	cmp	r2, #11
 800702c:	d917      	bls.n	800705e <_malloc_r+0xca>
 800702e:	1961      	adds	r1, r4, r5
 8007030:	42a3      	cmp	r3, r4
 8007032:	6025      	str	r5, [r4, #0]
 8007034:	bf18      	it	ne
 8007036:	6059      	strne	r1, [r3, #4]
 8007038:	6863      	ldr	r3, [r4, #4]
 800703a:	bf08      	it	eq
 800703c:	f8c8 1000 	streq.w	r1, [r8]
 8007040:	5162      	str	r2, [r4, r5]
 8007042:	604b      	str	r3, [r1, #4]
 8007044:	4638      	mov	r0, r7
 8007046:	f104 060b 	add.w	r6, r4, #11
 800704a:	f000 f829 	bl	80070a0 <__malloc_unlock>
 800704e:	f026 0607 	bic.w	r6, r6, #7
 8007052:	1d23      	adds	r3, r4, #4
 8007054:	1af2      	subs	r2, r6, r3
 8007056:	d0ae      	beq.n	8006fb6 <_malloc_r+0x22>
 8007058:	1b9b      	subs	r3, r3, r6
 800705a:	50a3      	str	r3, [r4, r2]
 800705c:	e7ab      	b.n	8006fb6 <_malloc_r+0x22>
 800705e:	42a3      	cmp	r3, r4
 8007060:	6862      	ldr	r2, [r4, #4]
 8007062:	d1dd      	bne.n	8007020 <_malloc_r+0x8c>
 8007064:	f8c8 2000 	str.w	r2, [r8]
 8007068:	e7ec      	b.n	8007044 <_malloc_r+0xb0>
 800706a:	4623      	mov	r3, r4
 800706c:	6864      	ldr	r4, [r4, #4]
 800706e:	e7ac      	b.n	8006fca <_malloc_r+0x36>
 8007070:	4634      	mov	r4, r6
 8007072:	6876      	ldr	r6, [r6, #4]
 8007074:	e7b4      	b.n	8006fe0 <_malloc_r+0x4c>
 8007076:	4613      	mov	r3, r2
 8007078:	e7cc      	b.n	8007014 <_malloc_r+0x80>
 800707a:	230c      	movs	r3, #12
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	4638      	mov	r0, r7
 8007080:	f000 f80e 	bl	80070a0 <__malloc_unlock>
 8007084:	e797      	b.n	8006fb6 <_malloc_r+0x22>
 8007086:	6025      	str	r5, [r4, #0]
 8007088:	e7dc      	b.n	8007044 <_malloc_r+0xb0>
 800708a:	605b      	str	r3, [r3, #4]
 800708c:	deff      	udf	#255	; 0xff
 800708e:	bf00      	nop
 8007090:	200004a4 	.word	0x200004a4

08007094 <__malloc_lock>:
 8007094:	4801      	ldr	r0, [pc, #4]	; (800709c <__malloc_lock+0x8>)
 8007096:	f7ff b88c 	b.w	80061b2 <__retarget_lock_acquire_recursive>
 800709a:	bf00      	nop
 800709c:	200004a0 	.word	0x200004a0

080070a0 <__malloc_unlock>:
 80070a0:	4801      	ldr	r0, [pc, #4]	; (80070a8 <__malloc_unlock+0x8>)
 80070a2:	f7ff b887 	b.w	80061b4 <__retarget_lock_release_recursive>
 80070a6:	bf00      	nop
 80070a8:	200004a0 	.word	0x200004a0

080070ac <_Balloc>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	69c6      	ldr	r6, [r0, #28]
 80070b0:	4604      	mov	r4, r0
 80070b2:	460d      	mov	r5, r1
 80070b4:	b976      	cbnz	r6, 80070d4 <_Balloc+0x28>
 80070b6:	2010      	movs	r0, #16
 80070b8:	f7ff ff44 	bl	8006f44 <malloc>
 80070bc:	4602      	mov	r2, r0
 80070be:	61e0      	str	r0, [r4, #28]
 80070c0:	b920      	cbnz	r0, 80070cc <_Balloc+0x20>
 80070c2:	4b18      	ldr	r3, [pc, #96]	; (8007124 <_Balloc+0x78>)
 80070c4:	4818      	ldr	r0, [pc, #96]	; (8007128 <_Balloc+0x7c>)
 80070c6:	216b      	movs	r1, #107	; 0x6b
 80070c8:	f000 fdaa 	bl	8007c20 <__assert_func>
 80070cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070d0:	6006      	str	r6, [r0, #0]
 80070d2:	60c6      	str	r6, [r0, #12]
 80070d4:	69e6      	ldr	r6, [r4, #28]
 80070d6:	68f3      	ldr	r3, [r6, #12]
 80070d8:	b183      	cbz	r3, 80070fc <_Balloc+0x50>
 80070da:	69e3      	ldr	r3, [r4, #28]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070e2:	b9b8      	cbnz	r0, 8007114 <_Balloc+0x68>
 80070e4:	2101      	movs	r1, #1
 80070e6:	fa01 f605 	lsl.w	r6, r1, r5
 80070ea:	1d72      	adds	r2, r6, #5
 80070ec:	0092      	lsls	r2, r2, #2
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 fdb4 	bl	8007c5c <_calloc_r>
 80070f4:	b160      	cbz	r0, 8007110 <_Balloc+0x64>
 80070f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070fa:	e00e      	b.n	800711a <_Balloc+0x6e>
 80070fc:	2221      	movs	r2, #33	; 0x21
 80070fe:	2104      	movs	r1, #4
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fdab 	bl	8007c5c <_calloc_r>
 8007106:	69e3      	ldr	r3, [r4, #28]
 8007108:	60f0      	str	r0, [r6, #12]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e4      	bne.n	80070da <_Balloc+0x2e>
 8007110:	2000      	movs	r0, #0
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	6802      	ldr	r2, [r0, #0]
 8007116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800711a:	2300      	movs	r3, #0
 800711c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007120:	e7f7      	b.n	8007112 <_Balloc+0x66>
 8007122:	bf00      	nop
 8007124:	08008365 	.word	0x08008365
 8007128:	080083e5 	.word	0x080083e5

0800712c <_Bfree>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	69c6      	ldr	r6, [r0, #28]
 8007130:	4605      	mov	r5, r0
 8007132:	460c      	mov	r4, r1
 8007134:	b976      	cbnz	r6, 8007154 <_Bfree+0x28>
 8007136:	2010      	movs	r0, #16
 8007138:	f7ff ff04 	bl	8006f44 <malloc>
 800713c:	4602      	mov	r2, r0
 800713e:	61e8      	str	r0, [r5, #28]
 8007140:	b920      	cbnz	r0, 800714c <_Bfree+0x20>
 8007142:	4b09      	ldr	r3, [pc, #36]	; (8007168 <_Bfree+0x3c>)
 8007144:	4809      	ldr	r0, [pc, #36]	; (800716c <_Bfree+0x40>)
 8007146:	218f      	movs	r1, #143	; 0x8f
 8007148:	f000 fd6a 	bl	8007c20 <__assert_func>
 800714c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007150:	6006      	str	r6, [r0, #0]
 8007152:	60c6      	str	r6, [r0, #12]
 8007154:	b13c      	cbz	r4, 8007166 <_Bfree+0x3a>
 8007156:	69eb      	ldr	r3, [r5, #28]
 8007158:	6862      	ldr	r2, [r4, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007160:	6021      	str	r1, [r4, #0]
 8007162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	08008365 	.word	0x08008365
 800716c:	080083e5 	.word	0x080083e5

08007170 <__multadd>:
 8007170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007174:	690d      	ldr	r5, [r1, #16]
 8007176:	4607      	mov	r7, r0
 8007178:	460c      	mov	r4, r1
 800717a:	461e      	mov	r6, r3
 800717c:	f101 0c14 	add.w	ip, r1, #20
 8007180:	2000      	movs	r0, #0
 8007182:	f8dc 3000 	ldr.w	r3, [ip]
 8007186:	b299      	uxth	r1, r3
 8007188:	fb02 6101 	mla	r1, r2, r1, r6
 800718c:	0c1e      	lsrs	r6, r3, #16
 800718e:	0c0b      	lsrs	r3, r1, #16
 8007190:	fb02 3306 	mla	r3, r2, r6, r3
 8007194:	b289      	uxth	r1, r1
 8007196:	3001      	adds	r0, #1
 8007198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800719c:	4285      	cmp	r5, r0
 800719e:	f84c 1b04 	str.w	r1, [ip], #4
 80071a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071a6:	dcec      	bgt.n	8007182 <__multadd+0x12>
 80071a8:	b30e      	cbz	r6, 80071ee <__multadd+0x7e>
 80071aa:	68a3      	ldr	r3, [r4, #8]
 80071ac:	42ab      	cmp	r3, r5
 80071ae:	dc19      	bgt.n	80071e4 <__multadd+0x74>
 80071b0:	6861      	ldr	r1, [r4, #4]
 80071b2:	4638      	mov	r0, r7
 80071b4:	3101      	adds	r1, #1
 80071b6:	f7ff ff79 	bl	80070ac <_Balloc>
 80071ba:	4680      	mov	r8, r0
 80071bc:	b928      	cbnz	r0, 80071ca <__multadd+0x5a>
 80071be:	4602      	mov	r2, r0
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <__multadd+0x84>)
 80071c2:	480d      	ldr	r0, [pc, #52]	; (80071f8 <__multadd+0x88>)
 80071c4:	21ba      	movs	r1, #186	; 0xba
 80071c6:	f000 fd2b 	bl	8007c20 <__assert_func>
 80071ca:	6922      	ldr	r2, [r4, #16]
 80071cc:	3202      	adds	r2, #2
 80071ce:	f104 010c 	add.w	r1, r4, #12
 80071d2:	0092      	lsls	r2, r2, #2
 80071d4:	300c      	adds	r0, #12
 80071d6:	f000 fd15 	bl	8007c04 <memcpy>
 80071da:	4621      	mov	r1, r4
 80071dc:	4638      	mov	r0, r7
 80071de:	f7ff ffa5 	bl	800712c <_Bfree>
 80071e2:	4644      	mov	r4, r8
 80071e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071e8:	3501      	adds	r5, #1
 80071ea:	615e      	str	r6, [r3, #20]
 80071ec:	6125      	str	r5, [r4, #16]
 80071ee:	4620      	mov	r0, r4
 80071f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f4:	080083d4 	.word	0x080083d4
 80071f8:	080083e5 	.word	0x080083e5

080071fc <__hi0bits>:
 80071fc:	0c03      	lsrs	r3, r0, #16
 80071fe:	041b      	lsls	r3, r3, #16
 8007200:	b9d3      	cbnz	r3, 8007238 <__hi0bits+0x3c>
 8007202:	0400      	lsls	r0, r0, #16
 8007204:	2310      	movs	r3, #16
 8007206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800720a:	bf04      	itt	eq
 800720c:	0200      	lsleq	r0, r0, #8
 800720e:	3308      	addeq	r3, #8
 8007210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007214:	bf04      	itt	eq
 8007216:	0100      	lsleq	r0, r0, #4
 8007218:	3304      	addeq	r3, #4
 800721a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800721e:	bf04      	itt	eq
 8007220:	0080      	lsleq	r0, r0, #2
 8007222:	3302      	addeq	r3, #2
 8007224:	2800      	cmp	r0, #0
 8007226:	db05      	blt.n	8007234 <__hi0bits+0x38>
 8007228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800722c:	f103 0301 	add.w	r3, r3, #1
 8007230:	bf08      	it	eq
 8007232:	2320      	moveq	r3, #32
 8007234:	4618      	mov	r0, r3
 8007236:	4770      	bx	lr
 8007238:	2300      	movs	r3, #0
 800723a:	e7e4      	b.n	8007206 <__hi0bits+0xa>

0800723c <__lo0bits>:
 800723c:	6803      	ldr	r3, [r0, #0]
 800723e:	f013 0207 	ands.w	r2, r3, #7
 8007242:	d00c      	beq.n	800725e <__lo0bits+0x22>
 8007244:	07d9      	lsls	r1, r3, #31
 8007246:	d422      	bmi.n	800728e <__lo0bits+0x52>
 8007248:	079a      	lsls	r2, r3, #30
 800724a:	bf49      	itett	mi
 800724c:	085b      	lsrmi	r3, r3, #1
 800724e:	089b      	lsrpl	r3, r3, #2
 8007250:	6003      	strmi	r3, [r0, #0]
 8007252:	2201      	movmi	r2, #1
 8007254:	bf5c      	itt	pl
 8007256:	6003      	strpl	r3, [r0, #0]
 8007258:	2202      	movpl	r2, #2
 800725a:	4610      	mov	r0, r2
 800725c:	4770      	bx	lr
 800725e:	b299      	uxth	r1, r3
 8007260:	b909      	cbnz	r1, 8007266 <__lo0bits+0x2a>
 8007262:	0c1b      	lsrs	r3, r3, #16
 8007264:	2210      	movs	r2, #16
 8007266:	b2d9      	uxtb	r1, r3
 8007268:	b909      	cbnz	r1, 800726e <__lo0bits+0x32>
 800726a:	3208      	adds	r2, #8
 800726c:	0a1b      	lsrs	r3, r3, #8
 800726e:	0719      	lsls	r1, r3, #28
 8007270:	bf04      	itt	eq
 8007272:	091b      	lsreq	r3, r3, #4
 8007274:	3204      	addeq	r2, #4
 8007276:	0799      	lsls	r1, r3, #30
 8007278:	bf04      	itt	eq
 800727a:	089b      	lsreq	r3, r3, #2
 800727c:	3202      	addeq	r2, #2
 800727e:	07d9      	lsls	r1, r3, #31
 8007280:	d403      	bmi.n	800728a <__lo0bits+0x4e>
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	f102 0201 	add.w	r2, r2, #1
 8007288:	d003      	beq.n	8007292 <__lo0bits+0x56>
 800728a:	6003      	str	r3, [r0, #0]
 800728c:	e7e5      	b.n	800725a <__lo0bits+0x1e>
 800728e:	2200      	movs	r2, #0
 8007290:	e7e3      	b.n	800725a <__lo0bits+0x1e>
 8007292:	2220      	movs	r2, #32
 8007294:	e7e1      	b.n	800725a <__lo0bits+0x1e>
	...

08007298 <__i2b>:
 8007298:	b510      	push	{r4, lr}
 800729a:	460c      	mov	r4, r1
 800729c:	2101      	movs	r1, #1
 800729e:	f7ff ff05 	bl	80070ac <_Balloc>
 80072a2:	4602      	mov	r2, r0
 80072a4:	b928      	cbnz	r0, 80072b2 <__i2b+0x1a>
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <__i2b+0x24>)
 80072a8:	4805      	ldr	r0, [pc, #20]	; (80072c0 <__i2b+0x28>)
 80072aa:	f240 1145 	movw	r1, #325	; 0x145
 80072ae:	f000 fcb7 	bl	8007c20 <__assert_func>
 80072b2:	2301      	movs	r3, #1
 80072b4:	6144      	str	r4, [r0, #20]
 80072b6:	6103      	str	r3, [r0, #16]
 80072b8:	bd10      	pop	{r4, pc}
 80072ba:	bf00      	nop
 80072bc:	080083d4 	.word	0x080083d4
 80072c0:	080083e5 	.word	0x080083e5

080072c4 <__multiply>:
 80072c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	4691      	mov	r9, r2
 80072ca:	690a      	ldr	r2, [r1, #16]
 80072cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	bfb8      	it	lt
 80072d4:	460b      	movlt	r3, r1
 80072d6:	460c      	mov	r4, r1
 80072d8:	bfbc      	itt	lt
 80072da:	464c      	movlt	r4, r9
 80072dc:	4699      	movlt	r9, r3
 80072de:	6927      	ldr	r7, [r4, #16]
 80072e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072e4:	68a3      	ldr	r3, [r4, #8]
 80072e6:	6861      	ldr	r1, [r4, #4]
 80072e8:	eb07 060a 	add.w	r6, r7, sl
 80072ec:	42b3      	cmp	r3, r6
 80072ee:	b085      	sub	sp, #20
 80072f0:	bfb8      	it	lt
 80072f2:	3101      	addlt	r1, #1
 80072f4:	f7ff feda 	bl	80070ac <_Balloc>
 80072f8:	b930      	cbnz	r0, 8007308 <__multiply+0x44>
 80072fa:	4602      	mov	r2, r0
 80072fc:	4b44      	ldr	r3, [pc, #272]	; (8007410 <__multiply+0x14c>)
 80072fe:	4845      	ldr	r0, [pc, #276]	; (8007414 <__multiply+0x150>)
 8007300:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007304:	f000 fc8c 	bl	8007c20 <__assert_func>
 8007308:	f100 0514 	add.w	r5, r0, #20
 800730c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007310:	462b      	mov	r3, r5
 8007312:	2200      	movs	r2, #0
 8007314:	4543      	cmp	r3, r8
 8007316:	d321      	bcc.n	800735c <__multiply+0x98>
 8007318:	f104 0314 	add.w	r3, r4, #20
 800731c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007320:	f109 0314 	add.w	r3, r9, #20
 8007324:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007328:	9202      	str	r2, [sp, #8]
 800732a:	1b3a      	subs	r2, r7, r4
 800732c:	3a15      	subs	r2, #21
 800732e:	f022 0203 	bic.w	r2, r2, #3
 8007332:	3204      	adds	r2, #4
 8007334:	f104 0115 	add.w	r1, r4, #21
 8007338:	428f      	cmp	r7, r1
 800733a:	bf38      	it	cc
 800733c:	2204      	movcc	r2, #4
 800733e:	9201      	str	r2, [sp, #4]
 8007340:	9a02      	ldr	r2, [sp, #8]
 8007342:	9303      	str	r3, [sp, #12]
 8007344:	429a      	cmp	r2, r3
 8007346:	d80c      	bhi.n	8007362 <__multiply+0x9e>
 8007348:	2e00      	cmp	r6, #0
 800734a:	dd03      	ble.n	8007354 <__multiply+0x90>
 800734c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007350:	2b00      	cmp	r3, #0
 8007352:	d05b      	beq.n	800740c <__multiply+0x148>
 8007354:	6106      	str	r6, [r0, #16]
 8007356:	b005      	add	sp, #20
 8007358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735c:	f843 2b04 	str.w	r2, [r3], #4
 8007360:	e7d8      	b.n	8007314 <__multiply+0x50>
 8007362:	f8b3 a000 	ldrh.w	sl, [r3]
 8007366:	f1ba 0f00 	cmp.w	sl, #0
 800736a:	d024      	beq.n	80073b6 <__multiply+0xf2>
 800736c:	f104 0e14 	add.w	lr, r4, #20
 8007370:	46a9      	mov	r9, r5
 8007372:	f04f 0c00 	mov.w	ip, #0
 8007376:	f85e 2b04 	ldr.w	r2, [lr], #4
 800737a:	f8d9 1000 	ldr.w	r1, [r9]
 800737e:	fa1f fb82 	uxth.w	fp, r2
 8007382:	b289      	uxth	r1, r1
 8007384:	fb0a 110b 	mla	r1, sl, fp, r1
 8007388:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800738c:	f8d9 2000 	ldr.w	r2, [r9]
 8007390:	4461      	add	r1, ip
 8007392:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007396:	fb0a c20b 	mla	r2, sl, fp, ip
 800739a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800739e:	b289      	uxth	r1, r1
 80073a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073a4:	4577      	cmp	r7, lr
 80073a6:	f849 1b04 	str.w	r1, [r9], #4
 80073aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073ae:	d8e2      	bhi.n	8007376 <__multiply+0xb2>
 80073b0:	9a01      	ldr	r2, [sp, #4]
 80073b2:	f845 c002 	str.w	ip, [r5, r2]
 80073b6:	9a03      	ldr	r2, [sp, #12]
 80073b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073bc:	3304      	adds	r3, #4
 80073be:	f1b9 0f00 	cmp.w	r9, #0
 80073c2:	d021      	beq.n	8007408 <__multiply+0x144>
 80073c4:	6829      	ldr	r1, [r5, #0]
 80073c6:	f104 0c14 	add.w	ip, r4, #20
 80073ca:	46ae      	mov	lr, r5
 80073cc:	f04f 0a00 	mov.w	sl, #0
 80073d0:	f8bc b000 	ldrh.w	fp, [ip]
 80073d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073d8:	fb09 220b 	mla	r2, r9, fp, r2
 80073dc:	4452      	add	r2, sl
 80073de:	b289      	uxth	r1, r1
 80073e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073e4:	f84e 1b04 	str.w	r1, [lr], #4
 80073e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80073ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073f0:	f8be 1000 	ldrh.w	r1, [lr]
 80073f4:	fb09 110a 	mla	r1, r9, sl, r1
 80073f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80073fc:	4567      	cmp	r7, ip
 80073fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007402:	d8e5      	bhi.n	80073d0 <__multiply+0x10c>
 8007404:	9a01      	ldr	r2, [sp, #4]
 8007406:	50a9      	str	r1, [r5, r2]
 8007408:	3504      	adds	r5, #4
 800740a:	e799      	b.n	8007340 <__multiply+0x7c>
 800740c:	3e01      	subs	r6, #1
 800740e:	e79b      	b.n	8007348 <__multiply+0x84>
 8007410:	080083d4 	.word	0x080083d4
 8007414:	080083e5 	.word	0x080083e5

08007418 <__pow5mult>:
 8007418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800741c:	4615      	mov	r5, r2
 800741e:	f012 0203 	ands.w	r2, r2, #3
 8007422:	4606      	mov	r6, r0
 8007424:	460f      	mov	r7, r1
 8007426:	d007      	beq.n	8007438 <__pow5mult+0x20>
 8007428:	4c25      	ldr	r4, [pc, #148]	; (80074c0 <__pow5mult+0xa8>)
 800742a:	3a01      	subs	r2, #1
 800742c:	2300      	movs	r3, #0
 800742e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007432:	f7ff fe9d 	bl	8007170 <__multadd>
 8007436:	4607      	mov	r7, r0
 8007438:	10ad      	asrs	r5, r5, #2
 800743a:	d03d      	beq.n	80074b8 <__pow5mult+0xa0>
 800743c:	69f4      	ldr	r4, [r6, #28]
 800743e:	b97c      	cbnz	r4, 8007460 <__pow5mult+0x48>
 8007440:	2010      	movs	r0, #16
 8007442:	f7ff fd7f 	bl	8006f44 <malloc>
 8007446:	4602      	mov	r2, r0
 8007448:	61f0      	str	r0, [r6, #28]
 800744a:	b928      	cbnz	r0, 8007458 <__pow5mult+0x40>
 800744c:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <__pow5mult+0xac>)
 800744e:	481e      	ldr	r0, [pc, #120]	; (80074c8 <__pow5mult+0xb0>)
 8007450:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007454:	f000 fbe4 	bl	8007c20 <__assert_func>
 8007458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800745c:	6004      	str	r4, [r0, #0]
 800745e:	60c4      	str	r4, [r0, #12]
 8007460:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007468:	b94c      	cbnz	r4, 800747e <__pow5mult+0x66>
 800746a:	f240 2171 	movw	r1, #625	; 0x271
 800746e:	4630      	mov	r0, r6
 8007470:	f7ff ff12 	bl	8007298 <__i2b>
 8007474:	2300      	movs	r3, #0
 8007476:	f8c8 0008 	str.w	r0, [r8, #8]
 800747a:	4604      	mov	r4, r0
 800747c:	6003      	str	r3, [r0, #0]
 800747e:	f04f 0900 	mov.w	r9, #0
 8007482:	07eb      	lsls	r3, r5, #31
 8007484:	d50a      	bpl.n	800749c <__pow5mult+0x84>
 8007486:	4639      	mov	r1, r7
 8007488:	4622      	mov	r2, r4
 800748a:	4630      	mov	r0, r6
 800748c:	f7ff ff1a 	bl	80072c4 <__multiply>
 8007490:	4639      	mov	r1, r7
 8007492:	4680      	mov	r8, r0
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff fe49 	bl	800712c <_Bfree>
 800749a:	4647      	mov	r7, r8
 800749c:	106d      	asrs	r5, r5, #1
 800749e:	d00b      	beq.n	80074b8 <__pow5mult+0xa0>
 80074a0:	6820      	ldr	r0, [r4, #0]
 80074a2:	b938      	cbnz	r0, 80074b4 <__pow5mult+0x9c>
 80074a4:	4622      	mov	r2, r4
 80074a6:	4621      	mov	r1, r4
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7ff ff0b 	bl	80072c4 <__multiply>
 80074ae:	6020      	str	r0, [r4, #0]
 80074b0:	f8c0 9000 	str.w	r9, [r0]
 80074b4:	4604      	mov	r4, r0
 80074b6:	e7e4      	b.n	8007482 <__pow5mult+0x6a>
 80074b8:	4638      	mov	r0, r7
 80074ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074be:	bf00      	nop
 80074c0:	08008530 	.word	0x08008530
 80074c4:	08008365 	.word	0x08008365
 80074c8:	080083e5 	.word	0x080083e5

080074cc <__lshift>:
 80074cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d0:	460c      	mov	r4, r1
 80074d2:	6849      	ldr	r1, [r1, #4]
 80074d4:	6923      	ldr	r3, [r4, #16]
 80074d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074da:	68a3      	ldr	r3, [r4, #8]
 80074dc:	4607      	mov	r7, r0
 80074de:	4691      	mov	r9, r2
 80074e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074e4:	f108 0601 	add.w	r6, r8, #1
 80074e8:	42b3      	cmp	r3, r6
 80074ea:	db0b      	blt.n	8007504 <__lshift+0x38>
 80074ec:	4638      	mov	r0, r7
 80074ee:	f7ff fddd 	bl	80070ac <_Balloc>
 80074f2:	4605      	mov	r5, r0
 80074f4:	b948      	cbnz	r0, 800750a <__lshift+0x3e>
 80074f6:	4602      	mov	r2, r0
 80074f8:	4b28      	ldr	r3, [pc, #160]	; (800759c <__lshift+0xd0>)
 80074fa:	4829      	ldr	r0, [pc, #164]	; (80075a0 <__lshift+0xd4>)
 80074fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007500:	f000 fb8e 	bl	8007c20 <__assert_func>
 8007504:	3101      	adds	r1, #1
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	e7ee      	b.n	80074e8 <__lshift+0x1c>
 800750a:	2300      	movs	r3, #0
 800750c:	f100 0114 	add.w	r1, r0, #20
 8007510:	f100 0210 	add.w	r2, r0, #16
 8007514:	4618      	mov	r0, r3
 8007516:	4553      	cmp	r3, sl
 8007518:	db33      	blt.n	8007582 <__lshift+0xb6>
 800751a:	6920      	ldr	r0, [r4, #16]
 800751c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007520:	f104 0314 	add.w	r3, r4, #20
 8007524:	f019 091f 	ands.w	r9, r9, #31
 8007528:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800752c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007530:	d02b      	beq.n	800758a <__lshift+0xbe>
 8007532:	f1c9 0e20 	rsb	lr, r9, #32
 8007536:	468a      	mov	sl, r1
 8007538:	2200      	movs	r2, #0
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	fa00 f009 	lsl.w	r0, r0, r9
 8007540:	4310      	orrs	r0, r2
 8007542:	f84a 0b04 	str.w	r0, [sl], #4
 8007546:	f853 2b04 	ldr.w	r2, [r3], #4
 800754a:	459c      	cmp	ip, r3
 800754c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007550:	d8f3      	bhi.n	800753a <__lshift+0x6e>
 8007552:	ebac 0304 	sub.w	r3, ip, r4
 8007556:	3b15      	subs	r3, #21
 8007558:	f023 0303 	bic.w	r3, r3, #3
 800755c:	3304      	adds	r3, #4
 800755e:	f104 0015 	add.w	r0, r4, #21
 8007562:	4584      	cmp	ip, r0
 8007564:	bf38      	it	cc
 8007566:	2304      	movcc	r3, #4
 8007568:	50ca      	str	r2, [r1, r3]
 800756a:	b10a      	cbz	r2, 8007570 <__lshift+0xa4>
 800756c:	f108 0602 	add.w	r6, r8, #2
 8007570:	3e01      	subs	r6, #1
 8007572:	4638      	mov	r0, r7
 8007574:	612e      	str	r6, [r5, #16]
 8007576:	4621      	mov	r1, r4
 8007578:	f7ff fdd8 	bl	800712c <_Bfree>
 800757c:	4628      	mov	r0, r5
 800757e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007582:	f842 0f04 	str.w	r0, [r2, #4]!
 8007586:	3301      	adds	r3, #1
 8007588:	e7c5      	b.n	8007516 <__lshift+0x4a>
 800758a:	3904      	subs	r1, #4
 800758c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007590:	f841 2f04 	str.w	r2, [r1, #4]!
 8007594:	459c      	cmp	ip, r3
 8007596:	d8f9      	bhi.n	800758c <__lshift+0xc0>
 8007598:	e7ea      	b.n	8007570 <__lshift+0xa4>
 800759a:	bf00      	nop
 800759c:	080083d4 	.word	0x080083d4
 80075a0:	080083e5 	.word	0x080083e5

080075a4 <__mcmp>:
 80075a4:	b530      	push	{r4, r5, lr}
 80075a6:	6902      	ldr	r2, [r0, #16]
 80075a8:	690c      	ldr	r4, [r1, #16]
 80075aa:	1b12      	subs	r2, r2, r4
 80075ac:	d10e      	bne.n	80075cc <__mcmp+0x28>
 80075ae:	f100 0314 	add.w	r3, r0, #20
 80075b2:	3114      	adds	r1, #20
 80075b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075c4:	42a5      	cmp	r5, r4
 80075c6:	d003      	beq.n	80075d0 <__mcmp+0x2c>
 80075c8:	d305      	bcc.n	80075d6 <__mcmp+0x32>
 80075ca:	2201      	movs	r2, #1
 80075cc:	4610      	mov	r0, r2
 80075ce:	bd30      	pop	{r4, r5, pc}
 80075d0:	4283      	cmp	r3, r0
 80075d2:	d3f3      	bcc.n	80075bc <__mcmp+0x18>
 80075d4:	e7fa      	b.n	80075cc <__mcmp+0x28>
 80075d6:	f04f 32ff 	mov.w	r2, #4294967295
 80075da:	e7f7      	b.n	80075cc <__mcmp+0x28>

080075dc <__mdiff>:
 80075dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	460c      	mov	r4, r1
 80075e2:	4606      	mov	r6, r0
 80075e4:	4611      	mov	r1, r2
 80075e6:	4620      	mov	r0, r4
 80075e8:	4690      	mov	r8, r2
 80075ea:	f7ff ffdb 	bl	80075a4 <__mcmp>
 80075ee:	1e05      	subs	r5, r0, #0
 80075f0:	d110      	bne.n	8007614 <__mdiff+0x38>
 80075f2:	4629      	mov	r1, r5
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7ff fd59 	bl	80070ac <_Balloc>
 80075fa:	b930      	cbnz	r0, 800760a <__mdiff+0x2e>
 80075fc:	4b3a      	ldr	r3, [pc, #232]	; (80076e8 <__mdiff+0x10c>)
 80075fe:	4602      	mov	r2, r0
 8007600:	f240 2137 	movw	r1, #567	; 0x237
 8007604:	4839      	ldr	r0, [pc, #228]	; (80076ec <__mdiff+0x110>)
 8007606:	f000 fb0b 	bl	8007c20 <__assert_func>
 800760a:	2301      	movs	r3, #1
 800760c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007614:	bfa4      	itt	ge
 8007616:	4643      	movge	r3, r8
 8007618:	46a0      	movge	r8, r4
 800761a:	4630      	mov	r0, r6
 800761c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007620:	bfa6      	itte	ge
 8007622:	461c      	movge	r4, r3
 8007624:	2500      	movge	r5, #0
 8007626:	2501      	movlt	r5, #1
 8007628:	f7ff fd40 	bl	80070ac <_Balloc>
 800762c:	b920      	cbnz	r0, 8007638 <__mdiff+0x5c>
 800762e:	4b2e      	ldr	r3, [pc, #184]	; (80076e8 <__mdiff+0x10c>)
 8007630:	4602      	mov	r2, r0
 8007632:	f240 2145 	movw	r1, #581	; 0x245
 8007636:	e7e5      	b.n	8007604 <__mdiff+0x28>
 8007638:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800763c:	6926      	ldr	r6, [r4, #16]
 800763e:	60c5      	str	r5, [r0, #12]
 8007640:	f104 0914 	add.w	r9, r4, #20
 8007644:	f108 0514 	add.w	r5, r8, #20
 8007648:	f100 0e14 	add.w	lr, r0, #20
 800764c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007654:	f108 0210 	add.w	r2, r8, #16
 8007658:	46f2      	mov	sl, lr
 800765a:	2100      	movs	r1, #0
 800765c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007660:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007664:	fa11 f88b 	uxtah	r8, r1, fp
 8007668:	b299      	uxth	r1, r3
 800766a:	0c1b      	lsrs	r3, r3, #16
 800766c:	eba8 0801 	sub.w	r8, r8, r1
 8007670:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007674:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007678:	fa1f f888 	uxth.w	r8, r8
 800767c:	1419      	asrs	r1, r3, #16
 800767e:	454e      	cmp	r6, r9
 8007680:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007684:	f84a 3b04 	str.w	r3, [sl], #4
 8007688:	d8e8      	bhi.n	800765c <__mdiff+0x80>
 800768a:	1b33      	subs	r3, r6, r4
 800768c:	3b15      	subs	r3, #21
 800768e:	f023 0303 	bic.w	r3, r3, #3
 8007692:	3304      	adds	r3, #4
 8007694:	3415      	adds	r4, #21
 8007696:	42a6      	cmp	r6, r4
 8007698:	bf38      	it	cc
 800769a:	2304      	movcc	r3, #4
 800769c:	441d      	add	r5, r3
 800769e:	4473      	add	r3, lr
 80076a0:	469e      	mov	lr, r3
 80076a2:	462e      	mov	r6, r5
 80076a4:	4566      	cmp	r6, ip
 80076a6:	d30e      	bcc.n	80076c6 <__mdiff+0xea>
 80076a8:	f10c 0203 	add.w	r2, ip, #3
 80076ac:	1b52      	subs	r2, r2, r5
 80076ae:	f022 0203 	bic.w	r2, r2, #3
 80076b2:	3d03      	subs	r5, #3
 80076b4:	45ac      	cmp	ip, r5
 80076b6:	bf38      	it	cc
 80076b8:	2200      	movcc	r2, #0
 80076ba:	4413      	add	r3, r2
 80076bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80076c0:	b17a      	cbz	r2, 80076e2 <__mdiff+0x106>
 80076c2:	6107      	str	r7, [r0, #16]
 80076c4:	e7a4      	b.n	8007610 <__mdiff+0x34>
 80076c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80076ca:	fa11 f288 	uxtah	r2, r1, r8
 80076ce:	1414      	asrs	r4, r2, #16
 80076d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076d4:	b292      	uxth	r2, r2
 80076d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076da:	f84e 2b04 	str.w	r2, [lr], #4
 80076de:	1421      	asrs	r1, r4, #16
 80076e0:	e7e0      	b.n	80076a4 <__mdiff+0xc8>
 80076e2:	3f01      	subs	r7, #1
 80076e4:	e7ea      	b.n	80076bc <__mdiff+0xe0>
 80076e6:	bf00      	nop
 80076e8:	080083d4 	.word	0x080083d4
 80076ec:	080083e5 	.word	0x080083e5

080076f0 <__d2b>:
 80076f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076f4:	460f      	mov	r7, r1
 80076f6:	2101      	movs	r1, #1
 80076f8:	ec59 8b10 	vmov	r8, r9, d0
 80076fc:	4616      	mov	r6, r2
 80076fe:	f7ff fcd5 	bl	80070ac <_Balloc>
 8007702:	4604      	mov	r4, r0
 8007704:	b930      	cbnz	r0, 8007714 <__d2b+0x24>
 8007706:	4602      	mov	r2, r0
 8007708:	4b24      	ldr	r3, [pc, #144]	; (800779c <__d2b+0xac>)
 800770a:	4825      	ldr	r0, [pc, #148]	; (80077a0 <__d2b+0xb0>)
 800770c:	f240 310f 	movw	r1, #783	; 0x30f
 8007710:	f000 fa86 	bl	8007c20 <__assert_func>
 8007714:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800771c:	bb2d      	cbnz	r5, 800776a <__d2b+0x7a>
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	f1b8 0300 	subs.w	r3, r8, #0
 8007724:	d026      	beq.n	8007774 <__d2b+0x84>
 8007726:	4668      	mov	r0, sp
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	f7ff fd87 	bl	800723c <__lo0bits>
 800772e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007732:	b1e8      	cbz	r0, 8007770 <__d2b+0x80>
 8007734:	f1c0 0320 	rsb	r3, r0, #32
 8007738:	fa02 f303 	lsl.w	r3, r2, r3
 800773c:	430b      	orrs	r3, r1
 800773e:	40c2      	lsrs	r2, r0
 8007740:	6163      	str	r3, [r4, #20]
 8007742:	9201      	str	r2, [sp, #4]
 8007744:	9b01      	ldr	r3, [sp, #4]
 8007746:	61a3      	str	r3, [r4, #24]
 8007748:	2b00      	cmp	r3, #0
 800774a:	bf14      	ite	ne
 800774c:	2202      	movne	r2, #2
 800774e:	2201      	moveq	r2, #1
 8007750:	6122      	str	r2, [r4, #16]
 8007752:	b1bd      	cbz	r5, 8007784 <__d2b+0x94>
 8007754:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007758:	4405      	add	r5, r0
 800775a:	603d      	str	r5, [r7, #0]
 800775c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007760:	6030      	str	r0, [r6, #0]
 8007762:	4620      	mov	r0, r4
 8007764:	b003      	add	sp, #12
 8007766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800776a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800776e:	e7d6      	b.n	800771e <__d2b+0x2e>
 8007770:	6161      	str	r1, [r4, #20]
 8007772:	e7e7      	b.n	8007744 <__d2b+0x54>
 8007774:	a801      	add	r0, sp, #4
 8007776:	f7ff fd61 	bl	800723c <__lo0bits>
 800777a:	9b01      	ldr	r3, [sp, #4]
 800777c:	6163      	str	r3, [r4, #20]
 800777e:	3020      	adds	r0, #32
 8007780:	2201      	movs	r2, #1
 8007782:	e7e5      	b.n	8007750 <__d2b+0x60>
 8007784:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800778c:	6038      	str	r0, [r7, #0]
 800778e:	6918      	ldr	r0, [r3, #16]
 8007790:	f7ff fd34 	bl	80071fc <__hi0bits>
 8007794:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007798:	e7e2      	b.n	8007760 <__d2b+0x70>
 800779a:	bf00      	nop
 800779c:	080083d4 	.word	0x080083d4
 80077a0:	080083e5 	.word	0x080083e5

080077a4 <__ssputs_r>:
 80077a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a8:	688e      	ldr	r6, [r1, #8]
 80077aa:	461f      	mov	r7, r3
 80077ac:	42be      	cmp	r6, r7
 80077ae:	680b      	ldr	r3, [r1, #0]
 80077b0:	4682      	mov	sl, r0
 80077b2:	460c      	mov	r4, r1
 80077b4:	4690      	mov	r8, r2
 80077b6:	d82c      	bhi.n	8007812 <__ssputs_r+0x6e>
 80077b8:	898a      	ldrh	r2, [r1, #12]
 80077ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077be:	d026      	beq.n	800780e <__ssputs_r+0x6a>
 80077c0:	6965      	ldr	r5, [r4, #20]
 80077c2:	6909      	ldr	r1, [r1, #16]
 80077c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077c8:	eba3 0901 	sub.w	r9, r3, r1
 80077cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077d0:	1c7b      	adds	r3, r7, #1
 80077d2:	444b      	add	r3, r9
 80077d4:	106d      	asrs	r5, r5, #1
 80077d6:	429d      	cmp	r5, r3
 80077d8:	bf38      	it	cc
 80077da:	461d      	movcc	r5, r3
 80077dc:	0553      	lsls	r3, r2, #21
 80077de:	d527      	bpl.n	8007830 <__ssputs_r+0x8c>
 80077e0:	4629      	mov	r1, r5
 80077e2:	f7ff fbd7 	bl	8006f94 <_malloc_r>
 80077e6:	4606      	mov	r6, r0
 80077e8:	b360      	cbz	r0, 8007844 <__ssputs_r+0xa0>
 80077ea:	6921      	ldr	r1, [r4, #16]
 80077ec:	464a      	mov	r2, r9
 80077ee:	f000 fa09 	bl	8007c04 <memcpy>
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077fc:	81a3      	strh	r3, [r4, #12]
 80077fe:	6126      	str	r6, [r4, #16]
 8007800:	6165      	str	r5, [r4, #20]
 8007802:	444e      	add	r6, r9
 8007804:	eba5 0509 	sub.w	r5, r5, r9
 8007808:	6026      	str	r6, [r4, #0]
 800780a:	60a5      	str	r5, [r4, #8]
 800780c:	463e      	mov	r6, r7
 800780e:	42be      	cmp	r6, r7
 8007810:	d900      	bls.n	8007814 <__ssputs_r+0x70>
 8007812:	463e      	mov	r6, r7
 8007814:	6820      	ldr	r0, [r4, #0]
 8007816:	4632      	mov	r2, r6
 8007818:	4641      	mov	r1, r8
 800781a:	f000 f9c9 	bl	8007bb0 <memmove>
 800781e:	68a3      	ldr	r3, [r4, #8]
 8007820:	1b9b      	subs	r3, r3, r6
 8007822:	60a3      	str	r3, [r4, #8]
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	4433      	add	r3, r6
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	2000      	movs	r0, #0
 800782c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007830:	462a      	mov	r2, r5
 8007832:	f000 fa3b 	bl	8007cac <_realloc_r>
 8007836:	4606      	mov	r6, r0
 8007838:	2800      	cmp	r0, #0
 800783a:	d1e0      	bne.n	80077fe <__ssputs_r+0x5a>
 800783c:	6921      	ldr	r1, [r4, #16]
 800783e:	4650      	mov	r0, sl
 8007840:	f7ff fb34 	bl	8006eac <_free_r>
 8007844:	230c      	movs	r3, #12
 8007846:	f8ca 3000 	str.w	r3, [sl]
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007850:	81a3      	strh	r3, [r4, #12]
 8007852:	f04f 30ff 	mov.w	r0, #4294967295
 8007856:	e7e9      	b.n	800782c <__ssputs_r+0x88>

08007858 <_svfiprintf_r>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	4698      	mov	r8, r3
 800785e:	898b      	ldrh	r3, [r1, #12]
 8007860:	061b      	lsls	r3, r3, #24
 8007862:	b09d      	sub	sp, #116	; 0x74
 8007864:	4607      	mov	r7, r0
 8007866:	460d      	mov	r5, r1
 8007868:	4614      	mov	r4, r2
 800786a:	d50e      	bpl.n	800788a <_svfiprintf_r+0x32>
 800786c:	690b      	ldr	r3, [r1, #16]
 800786e:	b963      	cbnz	r3, 800788a <_svfiprintf_r+0x32>
 8007870:	2140      	movs	r1, #64	; 0x40
 8007872:	f7ff fb8f 	bl	8006f94 <_malloc_r>
 8007876:	6028      	str	r0, [r5, #0]
 8007878:	6128      	str	r0, [r5, #16]
 800787a:	b920      	cbnz	r0, 8007886 <_svfiprintf_r+0x2e>
 800787c:	230c      	movs	r3, #12
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	e0d0      	b.n	8007a28 <_svfiprintf_r+0x1d0>
 8007886:	2340      	movs	r3, #64	; 0x40
 8007888:	616b      	str	r3, [r5, #20]
 800788a:	2300      	movs	r3, #0
 800788c:	9309      	str	r3, [sp, #36]	; 0x24
 800788e:	2320      	movs	r3, #32
 8007890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007894:	f8cd 800c 	str.w	r8, [sp, #12]
 8007898:	2330      	movs	r3, #48	; 0x30
 800789a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007a40 <_svfiprintf_r+0x1e8>
 800789e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078a2:	f04f 0901 	mov.w	r9, #1
 80078a6:	4623      	mov	r3, r4
 80078a8:	469a      	mov	sl, r3
 80078aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ae:	b10a      	cbz	r2, 80078b4 <_svfiprintf_r+0x5c>
 80078b0:	2a25      	cmp	r2, #37	; 0x25
 80078b2:	d1f9      	bne.n	80078a8 <_svfiprintf_r+0x50>
 80078b4:	ebba 0b04 	subs.w	fp, sl, r4
 80078b8:	d00b      	beq.n	80078d2 <_svfiprintf_r+0x7a>
 80078ba:	465b      	mov	r3, fp
 80078bc:	4622      	mov	r2, r4
 80078be:	4629      	mov	r1, r5
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff ff6f 	bl	80077a4 <__ssputs_r>
 80078c6:	3001      	adds	r0, #1
 80078c8:	f000 80a9 	beq.w	8007a1e <_svfiprintf_r+0x1c6>
 80078cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078ce:	445a      	add	r2, fp
 80078d0:	9209      	str	r2, [sp, #36]	; 0x24
 80078d2:	f89a 3000 	ldrb.w	r3, [sl]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80a1 	beq.w	8007a1e <_svfiprintf_r+0x1c6>
 80078dc:	2300      	movs	r3, #0
 80078de:	f04f 32ff 	mov.w	r2, #4294967295
 80078e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078e6:	f10a 0a01 	add.w	sl, sl, #1
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	9307      	str	r3, [sp, #28]
 80078ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078f2:	931a      	str	r3, [sp, #104]	; 0x68
 80078f4:	4654      	mov	r4, sl
 80078f6:	2205      	movs	r2, #5
 80078f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078fc:	4850      	ldr	r0, [pc, #320]	; (8007a40 <_svfiprintf_r+0x1e8>)
 80078fe:	f7f8 fc67 	bl	80001d0 <memchr>
 8007902:	9a04      	ldr	r2, [sp, #16]
 8007904:	b9d8      	cbnz	r0, 800793e <_svfiprintf_r+0xe6>
 8007906:	06d0      	lsls	r0, r2, #27
 8007908:	bf44      	itt	mi
 800790a:	2320      	movmi	r3, #32
 800790c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007910:	0711      	lsls	r1, r2, #28
 8007912:	bf44      	itt	mi
 8007914:	232b      	movmi	r3, #43	; 0x2b
 8007916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800791a:	f89a 3000 	ldrb.w	r3, [sl]
 800791e:	2b2a      	cmp	r3, #42	; 0x2a
 8007920:	d015      	beq.n	800794e <_svfiprintf_r+0xf6>
 8007922:	9a07      	ldr	r2, [sp, #28]
 8007924:	4654      	mov	r4, sl
 8007926:	2000      	movs	r0, #0
 8007928:	f04f 0c0a 	mov.w	ip, #10
 800792c:	4621      	mov	r1, r4
 800792e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007932:	3b30      	subs	r3, #48	; 0x30
 8007934:	2b09      	cmp	r3, #9
 8007936:	d94d      	bls.n	80079d4 <_svfiprintf_r+0x17c>
 8007938:	b1b0      	cbz	r0, 8007968 <_svfiprintf_r+0x110>
 800793a:	9207      	str	r2, [sp, #28]
 800793c:	e014      	b.n	8007968 <_svfiprintf_r+0x110>
 800793e:	eba0 0308 	sub.w	r3, r0, r8
 8007942:	fa09 f303 	lsl.w	r3, r9, r3
 8007946:	4313      	orrs	r3, r2
 8007948:	9304      	str	r3, [sp, #16]
 800794a:	46a2      	mov	sl, r4
 800794c:	e7d2      	b.n	80078f4 <_svfiprintf_r+0x9c>
 800794e:	9b03      	ldr	r3, [sp, #12]
 8007950:	1d19      	adds	r1, r3, #4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	9103      	str	r1, [sp, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	bfbb      	ittet	lt
 800795a:	425b      	neglt	r3, r3
 800795c:	f042 0202 	orrlt.w	r2, r2, #2
 8007960:	9307      	strge	r3, [sp, #28]
 8007962:	9307      	strlt	r3, [sp, #28]
 8007964:	bfb8      	it	lt
 8007966:	9204      	strlt	r2, [sp, #16]
 8007968:	7823      	ldrb	r3, [r4, #0]
 800796a:	2b2e      	cmp	r3, #46	; 0x2e
 800796c:	d10c      	bne.n	8007988 <_svfiprintf_r+0x130>
 800796e:	7863      	ldrb	r3, [r4, #1]
 8007970:	2b2a      	cmp	r3, #42	; 0x2a
 8007972:	d134      	bne.n	80079de <_svfiprintf_r+0x186>
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	1d1a      	adds	r2, r3, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	9203      	str	r2, [sp, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	bfb8      	it	lt
 8007980:	f04f 33ff 	movlt.w	r3, #4294967295
 8007984:	3402      	adds	r4, #2
 8007986:	9305      	str	r3, [sp, #20]
 8007988:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007a50 <_svfiprintf_r+0x1f8>
 800798c:	7821      	ldrb	r1, [r4, #0]
 800798e:	2203      	movs	r2, #3
 8007990:	4650      	mov	r0, sl
 8007992:	f7f8 fc1d 	bl	80001d0 <memchr>
 8007996:	b138      	cbz	r0, 80079a8 <_svfiprintf_r+0x150>
 8007998:	9b04      	ldr	r3, [sp, #16]
 800799a:	eba0 000a 	sub.w	r0, r0, sl
 800799e:	2240      	movs	r2, #64	; 0x40
 80079a0:	4082      	lsls	r2, r0
 80079a2:	4313      	orrs	r3, r2
 80079a4:	3401      	adds	r4, #1
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ac:	4825      	ldr	r0, [pc, #148]	; (8007a44 <_svfiprintf_r+0x1ec>)
 80079ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079b2:	2206      	movs	r2, #6
 80079b4:	f7f8 fc0c 	bl	80001d0 <memchr>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d038      	beq.n	8007a2e <_svfiprintf_r+0x1d6>
 80079bc:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <_svfiprintf_r+0x1f0>)
 80079be:	bb1b      	cbnz	r3, 8007a08 <_svfiprintf_r+0x1b0>
 80079c0:	9b03      	ldr	r3, [sp, #12]
 80079c2:	3307      	adds	r3, #7
 80079c4:	f023 0307 	bic.w	r3, r3, #7
 80079c8:	3308      	adds	r3, #8
 80079ca:	9303      	str	r3, [sp, #12]
 80079cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ce:	4433      	add	r3, r6
 80079d0:	9309      	str	r3, [sp, #36]	; 0x24
 80079d2:	e768      	b.n	80078a6 <_svfiprintf_r+0x4e>
 80079d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80079d8:	460c      	mov	r4, r1
 80079da:	2001      	movs	r0, #1
 80079dc:	e7a6      	b.n	800792c <_svfiprintf_r+0xd4>
 80079de:	2300      	movs	r3, #0
 80079e0:	3401      	adds	r4, #1
 80079e2:	9305      	str	r3, [sp, #20]
 80079e4:	4619      	mov	r1, r3
 80079e6:	f04f 0c0a 	mov.w	ip, #10
 80079ea:	4620      	mov	r0, r4
 80079ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079f0:	3a30      	subs	r2, #48	; 0x30
 80079f2:	2a09      	cmp	r2, #9
 80079f4:	d903      	bls.n	80079fe <_svfiprintf_r+0x1a6>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0c6      	beq.n	8007988 <_svfiprintf_r+0x130>
 80079fa:	9105      	str	r1, [sp, #20]
 80079fc:	e7c4      	b.n	8007988 <_svfiprintf_r+0x130>
 80079fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a02:	4604      	mov	r4, r0
 8007a04:	2301      	movs	r3, #1
 8007a06:	e7f0      	b.n	80079ea <_svfiprintf_r+0x192>
 8007a08:	ab03      	add	r3, sp, #12
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	462a      	mov	r2, r5
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <_svfiprintf_r+0x1f4>)
 8007a10:	a904      	add	r1, sp, #16
 8007a12:	4638      	mov	r0, r7
 8007a14:	f7fd fe64 	bl	80056e0 <_printf_float>
 8007a18:	1c42      	adds	r2, r0, #1
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	d1d6      	bne.n	80079cc <_svfiprintf_r+0x174>
 8007a1e:	89ab      	ldrh	r3, [r5, #12]
 8007a20:	065b      	lsls	r3, r3, #25
 8007a22:	f53f af2d 	bmi.w	8007880 <_svfiprintf_r+0x28>
 8007a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a28:	b01d      	add	sp, #116	; 0x74
 8007a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2e:	ab03      	add	r3, sp, #12
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	462a      	mov	r2, r5
 8007a34:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <_svfiprintf_r+0x1f4>)
 8007a36:	a904      	add	r1, sp, #16
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7fe f8f5 	bl	8005c28 <_printf_i>
 8007a3e:	e7eb      	b.n	8007a18 <_svfiprintf_r+0x1c0>
 8007a40:	0800853c 	.word	0x0800853c
 8007a44:	08008546 	.word	0x08008546
 8007a48:	080056e1 	.word	0x080056e1
 8007a4c:	080077a5 	.word	0x080077a5
 8007a50:	08008542 	.word	0x08008542

08007a54 <__sflush_r>:
 8007a54:	898a      	ldrh	r2, [r1, #12]
 8007a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	0710      	lsls	r0, r2, #28
 8007a5e:	460c      	mov	r4, r1
 8007a60:	d458      	bmi.n	8007b14 <__sflush_r+0xc0>
 8007a62:	684b      	ldr	r3, [r1, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dc05      	bgt.n	8007a74 <__sflush_r+0x20>
 8007a68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	dc02      	bgt.n	8007a74 <__sflush_r+0x20>
 8007a6e:	2000      	movs	r0, #0
 8007a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	d0f9      	beq.n	8007a6e <__sflush_r+0x1a>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a80:	682f      	ldr	r7, [r5, #0]
 8007a82:	6a21      	ldr	r1, [r4, #32]
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	d032      	beq.n	8007aee <__sflush_r+0x9a>
 8007a88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	075a      	lsls	r2, r3, #29
 8007a8e:	d505      	bpl.n	8007a9c <__sflush_r+0x48>
 8007a90:	6863      	ldr	r3, [r4, #4]
 8007a92:	1ac0      	subs	r0, r0, r3
 8007a94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a96:	b10b      	cbz	r3, 8007a9c <__sflush_r+0x48>
 8007a98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a9a:	1ac0      	subs	r0, r0, r3
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aa2:	6a21      	ldr	r1, [r4, #32]
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	47b0      	blx	r6
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	d106      	bne.n	8007abc <__sflush_r+0x68>
 8007aae:	6829      	ldr	r1, [r5, #0]
 8007ab0:	291d      	cmp	r1, #29
 8007ab2:	d82b      	bhi.n	8007b0c <__sflush_r+0xb8>
 8007ab4:	4a29      	ldr	r2, [pc, #164]	; (8007b5c <__sflush_r+0x108>)
 8007ab6:	410a      	asrs	r2, r1
 8007ab8:	07d6      	lsls	r6, r2, #31
 8007aba:	d427      	bmi.n	8007b0c <__sflush_r+0xb8>
 8007abc:	2200      	movs	r2, #0
 8007abe:	6062      	str	r2, [r4, #4]
 8007ac0:	04d9      	lsls	r1, r3, #19
 8007ac2:	6922      	ldr	r2, [r4, #16]
 8007ac4:	6022      	str	r2, [r4, #0]
 8007ac6:	d504      	bpl.n	8007ad2 <__sflush_r+0x7e>
 8007ac8:	1c42      	adds	r2, r0, #1
 8007aca:	d101      	bne.n	8007ad0 <__sflush_r+0x7c>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	b903      	cbnz	r3, 8007ad2 <__sflush_r+0x7e>
 8007ad0:	6560      	str	r0, [r4, #84]	; 0x54
 8007ad2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ad4:	602f      	str	r7, [r5, #0]
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	d0c9      	beq.n	8007a6e <__sflush_r+0x1a>
 8007ada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ade:	4299      	cmp	r1, r3
 8007ae0:	d002      	beq.n	8007ae8 <__sflush_r+0x94>
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f7ff f9e2 	bl	8006eac <_free_r>
 8007ae8:	2000      	movs	r0, #0
 8007aea:	6360      	str	r0, [r4, #52]	; 0x34
 8007aec:	e7c0      	b.n	8007a70 <__sflush_r+0x1c>
 8007aee:	2301      	movs	r3, #1
 8007af0:	4628      	mov	r0, r5
 8007af2:	47b0      	blx	r6
 8007af4:	1c41      	adds	r1, r0, #1
 8007af6:	d1c8      	bne.n	8007a8a <__sflush_r+0x36>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0c5      	beq.n	8007a8a <__sflush_r+0x36>
 8007afe:	2b1d      	cmp	r3, #29
 8007b00:	d001      	beq.n	8007b06 <__sflush_r+0xb2>
 8007b02:	2b16      	cmp	r3, #22
 8007b04:	d101      	bne.n	8007b0a <__sflush_r+0xb6>
 8007b06:	602f      	str	r7, [r5, #0]
 8007b08:	e7b1      	b.n	8007a6e <__sflush_r+0x1a>
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b10:	81a3      	strh	r3, [r4, #12]
 8007b12:	e7ad      	b.n	8007a70 <__sflush_r+0x1c>
 8007b14:	690f      	ldr	r7, [r1, #16]
 8007b16:	2f00      	cmp	r7, #0
 8007b18:	d0a9      	beq.n	8007a6e <__sflush_r+0x1a>
 8007b1a:	0793      	lsls	r3, r2, #30
 8007b1c:	680e      	ldr	r6, [r1, #0]
 8007b1e:	bf08      	it	eq
 8007b20:	694b      	ldreq	r3, [r1, #20]
 8007b22:	600f      	str	r7, [r1, #0]
 8007b24:	bf18      	it	ne
 8007b26:	2300      	movne	r3, #0
 8007b28:	eba6 0807 	sub.w	r8, r6, r7
 8007b2c:	608b      	str	r3, [r1, #8]
 8007b2e:	f1b8 0f00 	cmp.w	r8, #0
 8007b32:	dd9c      	ble.n	8007a6e <__sflush_r+0x1a>
 8007b34:	6a21      	ldr	r1, [r4, #32]
 8007b36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b38:	4643      	mov	r3, r8
 8007b3a:	463a      	mov	r2, r7
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	47b0      	blx	r6
 8007b40:	2800      	cmp	r0, #0
 8007b42:	dc06      	bgt.n	8007b52 <__sflush_r+0xfe>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b4a:	81a3      	strh	r3, [r4, #12]
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	e78e      	b.n	8007a70 <__sflush_r+0x1c>
 8007b52:	4407      	add	r7, r0
 8007b54:	eba8 0800 	sub.w	r8, r8, r0
 8007b58:	e7e9      	b.n	8007b2e <__sflush_r+0xda>
 8007b5a:	bf00      	nop
 8007b5c:	dfbffffe 	.word	0xdfbffffe

08007b60 <_fflush_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	690b      	ldr	r3, [r1, #16]
 8007b64:	4605      	mov	r5, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	b913      	cbnz	r3, 8007b70 <_fflush_r+0x10>
 8007b6a:	2500      	movs	r5, #0
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	bd38      	pop	{r3, r4, r5, pc}
 8007b70:	b118      	cbz	r0, 8007b7a <_fflush_r+0x1a>
 8007b72:	6a03      	ldr	r3, [r0, #32]
 8007b74:	b90b      	cbnz	r3, 8007b7a <_fflush_r+0x1a>
 8007b76:	f7fe fa05 	bl	8005f84 <__sinit>
 8007b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0f3      	beq.n	8007b6a <_fflush_r+0xa>
 8007b82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b84:	07d0      	lsls	r0, r2, #31
 8007b86:	d404      	bmi.n	8007b92 <_fflush_r+0x32>
 8007b88:	0599      	lsls	r1, r3, #22
 8007b8a:	d402      	bmi.n	8007b92 <_fflush_r+0x32>
 8007b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b8e:	f7fe fb10 	bl	80061b2 <__retarget_lock_acquire_recursive>
 8007b92:	4628      	mov	r0, r5
 8007b94:	4621      	mov	r1, r4
 8007b96:	f7ff ff5d 	bl	8007a54 <__sflush_r>
 8007b9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b9c:	07da      	lsls	r2, r3, #31
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	d4e4      	bmi.n	8007b6c <_fflush_r+0xc>
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	059b      	lsls	r3, r3, #22
 8007ba6:	d4e1      	bmi.n	8007b6c <_fflush_r+0xc>
 8007ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007baa:	f7fe fb03 	bl	80061b4 <__retarget_lock_release_recursive>
 8007bae:	e7dd      	b.n	8007b6c <_fflush_r+0xc>

08007bb0 <memmove>:
 8007bb0:	4288      	cmp	r0, r1
 8007bb2:	b510      	push	{r4, lr}
 8007bb4:	eb01 0402 	add.w	r4, r1, r2
 8007bb8:	d902      	bls.n	8007bc0 <memmove+0x10>
 8007bba:	4284      	cmp	r4, r0
 8007bbc:	4623      	mov	r3, r4
 8007bbe:	d807      	bhi.n	8007bd0 <memmove+0x20>
 8007bc0:	1e43      	subs	r3, r0, #1
 8007bc2:	42a1      	cmp	r1, r4
 8007bc4:	d008      	beq.n	8007bd8 <memmove+0x28>
 8007bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bce:	e7f8      	b.n	8007bc2 <memmove+0x12>
 8007bd0:	4402      	add	r2, r0
 8007bd2:	4601      	mov	r1, r0
 8007bd4:	428a      	cmp	r2, r1
 8007bd6:	d100      	bne.n	8007bda <memmove+0x2a>
 8007bd8:	bd10      	pop	{r4, pc}
 8007bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007be2:	e7f7      	b.n	8007bd4 <memmove+0x24>

08007be4 <_sbrk_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4d06      	ldr	r5, [pc, #24]	; (8007c00 <_sbrk_r+0x1c>)
 8007be8:	2300      	movs	r3, #0
 8007bea:	4604      	mov	r4, r0
 8007bec:	4608      	mov	r0, r1
 8007bee:	602b      	str	r3, [r5, #0]
 8007bf0:	f7fa f8ca 	bl	8001d88 <_sbrk>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d102      	bne.n	8007bfe <_sbrk_r+0x1a>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <_sbrk_r+0x1a>
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	2000049c 	.word	0x2000049c

08007c04 <memcpy>:
 8007c04:	440a      	add	r2, r1
 8007c06:	4291      	cmp	r1, r2
 8007c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c0c:	d100      	bne.n	8007c10 <memcpy+0xc>
 8007c0e:	4770      	bx	lr
 8007c10:	b510      	push	{r4, lr}
 8007c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	d1f9      	bne.n	8007c12 <memcpy+0xe>
 8007c1e:	bd10      	pop	{r4, pc}

08007c20 <__assert_func>:
 8007c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c22:	4614      	mov	r4, r2
 8007c24:	461a      	mov	r2, r3
 8007c26:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <__assert_func+0x2c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	68d8      	ldr	r0, [r3, #12]
 8007c2e:	b14c      	cbz	r4, 8007c44 <__assert_func+0x24>
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <__assert_func+0x30>)
 8007c32:	9100      	str	r1, [sp, #0]
 8007c34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c38:	4906      	ldr	r1, [pc, #24]	; (8007c54 <__assert_func+0x34>)
 8007c3a:	462b      	mov	r3, r5
 8007c3c:	f000 f872 	bl	8007d24 <fiprintf>
 8007c40:	f000 f882 	bl	8007d48 <abort>
 8007c44:	4b04      	ldr	r3, [pc, #16]	; (8007c58 <__assert_func+0x38>)
 8007c46:	461c      	mov	r4, r3
 8007c48:	e7f3      	b.n	8007c32 <__assert_func+0x12>
 8007c4a:	bf00      	nop
 8007c4c:	20000064 	.word	0x20000064
 8007c50:	08008557 	.word	0x08008557
 8007c54:	08008564 	.word	0x08008564
 8007c58:	08008592 	.word	0x08008592

08007c5c <_calloc_r>:
 8007c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c5e:	fba1 2402 	umull	r2, r4, r1, r2
 8007c62:	b94c      	cbnz	r4, 8007c78 <_calloc_r+0x1c>
 8007c64:	4611      	mov	r1, r2
 8007c66:	9201      	str	r2, [sp, #4]
 8007c68:	f7ff f994 	bl	8006f94 <_malloc_r>
 8007c6c:	9a01      	ldr	r2, [sp, #4]
 8007c6e:	4605      	mov	r5, r0
 8007c70:	b930      	cbnz	r0, 8007c80 <_calloc_r+0x24>
 8007c72:	4628      	mov	r0, r5
 8007c74:	b003      	add	sp, #12
 8007c76:	bd30      	pop	{r4, r5, pc}
 8007c78:	220c      	movs	r2, #12
 8007c7a:	6002      	str	r2, [r0, #0]
 8007c7c:	2500      	movs	r5, #0
 8007c7e:	e7f8      	b.n	8007c72 <_calloc_r+0x16>
 8007c80:	4621      	mov	r1, r4
 8007c82:	f7fe fa18 	bl	80060b6 <memset>
 8007c86:	e7f4      	b.n	8007c72 <_calloc_r+0x16>

08007c88 <__ascii_mbtowc>:
 8007c88:	b082      	sub	sp, #8
 8007c8a:	b901      	cbnz	r1, 8007c8e <__ascii_mbtowc+0x6>
 8007c8c:	a901      	add	r1, sp, #4
 8007c8e:	b142      	cbz	r2, 8007ca2 <__ascii_mbtowc+0x1a>
 8007c90:	b14b      	cbz	r3, 8007ca6 <__ascii_mbtowc+0x1e>
 8007c92:	7813      	ldrb	r3, [r2, #0]
 8007c94:	600b      	str	r3, [r1, #0]
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	1e10      	subs	r0, r2, #0
 8007c9a:	bf18      	it	ne
 8007c9c:	2001      	movne	r0, #1
 8007c9e:	b002      	add	sp, #8
 8007ca0:	4770      	bx	lr
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	e7fb      	b.n	8007c9e <__ascii_mbtowc+0x16>
 8007ca6:	f06f 0001 	mvn.w	r0, #1
 8007caa:	e7f8      	b.n	8007c9e <__ascii_mbtowc+0x16>

08007cac <_realloc_r>:
 8007cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	4614      	mov	r4, r2
 8007cb4:	460e      	mov	r6, r1
 8007cb6:	b921      	cbnz	r1, 8007cc2 <_realloc_r+0x16>
 8007cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	f7ff b969 	b.w	8006f94 <_malloc_r>
 8007cc2:	b92a      	cbnz	r2, 8007cd0 <_realloc_r+0x24>
 8007cc4:	f7ff f8f2 	bl	8006eac <_free_r>
 8007cc8:	4625      	mov	r5, r4
 8007cca:	4628      	mov	r0, r5
 8007ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd0:	f000 f841 	bl	8007d56 <_malloc_usable_size_r>
 8007cd4:	4284      	cmp	r4, r0
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	d802      	bhi.n	8007ce0 <_realloc_r+0x34>
 8007cda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cde:	d812      	bhi.n	8007d06 <_realloc_r+0x5a>
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	f7ff f956 	bl	8006f94 <_malloc_r>
 8007ce8:	4605      	mov	r5, r0
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d0ed      	beq.n	8007cca <_realloc_r+0x1e>
 8007cee:	42bc      	cmp	r4, r7
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	bf28      	it	cs
 8007cf6:	463a      	movcs	r2, r7
 8007cf8:	f7ff ff84 	bl	8007c04 <memcpy>
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4640      	mov	r0, r8
 8007d00:	f7ff f8d4 	bl	8006eac <_free_r>
 8007d04:	e7e1      	b.n	8007cca <_realloc_r+0x1e>
 8007d06:	4635      	mov	r5, r6
 8007d08:	e7df      	b.n	8007cca <_realloc_r+0x1e>

08007d0a <__ascii_wctomb>:
 8007d0a:	b149      	cbz	r1, 8007d20 <__ascii_wctomb+0x16>
 8007d0c:	2aff      	cmp	r2, #255	; 0xff
 8007d0e:	bf85      	ittet	hi
 8007d10:	238a      	movhi	r3, #138	; 0x8a
 8007d12:	6003      	strhi	r3, [r0, #0]
 8007d14:	700a      	strbls	r2, [r1, #0]
 8007d16:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d1a:	bf98      	it	ls
 8007d1c:	2001      	movls	r0, #1
 8007d1e:	4770      	bx	lr
 8007d20:	4608      	mov	r0, r1
 8007d22:	4770      	bx	lr

08007d24 <fiprintf>:
 8007d24:	b40e      	push	{r1, r2, r3}
 8007d26:	b503      	push	{r0, r1, lr}
 8007d28:	4601      	mov	r1, r0
 8007d2a:	ab03      	add	r3, sp, #12
 8007d2c:	4805      	ldr	r0, [pc, #20]	; (8007d44 <fiprintf+0x20>)
 8007d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d32:	6800      	ldr	r0, [r0, #0]
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	f000 f83f 	bl	8007db8 <_vfiprintf_r>
 8007d3a:	b002      	add	sp, #8
 8007d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d40:	b003      	add	sp, #12
 8007d42:	4770      	bx	lr
 8007d44:	20000064 	.word	0x20000064

08007d48 <abort>:
 8007d48:	b508      	push	{r3, lr}
 8007d4a:	2006      	movs	r0, #6
 8007d4c:	f000 fa0c 	bl	8008168 <raise>
 8007d50:	2001      	movs	r0, #1
 8007d52:	f7f9 ffa1 	bl	8001c98 <_exit>

08007d56 <_malloc_usable_size_r>:
 8007d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d5a:	1f18      	subs	r0, r3, #4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bfbc      	itt	lt
 8007d60:	580b      	ldrlt	r3, [r1, r0]
 8007d62:	18c0      	addlt	r0, r0, r3
 8007d64:	4770      	bx	lr

08007d66 <__sfputc_r>:
 8007d66:	6893      	ldr	r3, [r2, #8]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	b410      	push	{r4}
 8007d6e:	6093      	str	r3, [r2, #8]
 8007d70:	da08      	bge.n	8007d84 <__sfputc_r+0x1e>
 8007d72:	6994      	ldr	r4, [r2, #24]
 8007d74:	42a3      	cmp	r3, r4
 8007d76:	db01      	blt.n	8007d7c <__sfputc_r+0x16>
 8007d78:	290a      	cmp	r1, #10
 8007d7a:	d103      	bne.n	8007d84 <__sfputc_r+0x1e>
 8007d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d80:	f000 b934 	b.w	8007fec <__swbuf_r>
 8007d84:	6813      	ldr	r3, [r2, #0]
 8007d86:	1c58      	adds	r0, r3, #1
 8007d88:	6010      	str	r0, [r2, #0]
 8007d8a:	7019      	strb	r1, [r3, #0]
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <__sfputs_r>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	4606      	mov	r6, r0
 8007d98:	460f      	mov	r7, r1
 8007d9a:	4614      	mov	r4, r2
 8007d9c:	18d5      	adds	r5, r2, r3
 8007d9e:	42ac      	cmp	r4, r5
 8007da0:	d101      	bne.n	8007da6 <__sfputs_r+0x12>
 8007da2:	2000      	movs	r0, #0
 8007da4:	e007      	b.n	8007db6 <__sfputs_r+0x22>
 8007da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007daa:	463a      	mov	r2, r7
 8007dac:	4630      	mov	r0, r6
 8007dae:	f7ff ffda 	bl	8007d66 <__sfputc_r>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	d1f3      	bne.n	8007d9e <__sfputs_r+0xa>
 8007db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007db8 <_vfiprintf_r>:
 8007db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbc:	460d      	mov	r5, r1
 8007dbe:	b09d      	sub	sp, #116	; 0x74
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	4698      	mov	r8, r3
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	b118      	cbz	r0, 8007dd0 <_vfiprintf_r+0x18>
 8007dc8:	6a03      	ldr	r3, [r0, #32]
 8007dca:	b90b      	cbnz	r3, 8007dd0 <_vfiprintf_r+0x18>
 8007dcc:	f7fe f8da 	bl	8005f84 <__sinit>
 8007dd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dd2:	07d9      	lsls	r1, r3, #31
 8007dd4:	d405      	bmi.n	8007de2 <_vfiprintf_r+0x2a>
 8007dd6:	89ab      	ldrh	r3, [r5, #12]
 8007dd8:	059a      	lsls	r2, r3, #22
 8007dda:	d402      	bmi.n	8007de2 <_vfiprintf_r+0x2a>
 8007ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dde:	f7fe f9e8 	bl	80061b2 <__retarget_lock_acquire_recursive>
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	071b      	lsls	r3, r3, #28
 8007de6:	d501      	bpl.n	8007dec <_vfiprintf_r+0x34>
 8007de8:	692b      	ldr	r3, [r5, #16]
 8007dea:	b99b      	cbnz	r3, 8007e14 <_vfiprintf_r+0x5c>
 8007dec:	4629      	mov	r1, r5
 8007dee:	4630      	mov	r0, r6
 8007df0:	f000 f93a 	bl	8008068 <__swsetup_r>
 8007df4:	b170      	cbz	r0, 8007e14 <_vfiprintf_r+0x5c>
 8007df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df8:	07dc      	lsls	r4, r3, #31
 8007dfa:	d504      	bpl.n	8007e06 <_vfiprintf_r+0x4e>
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	b01d      	add	sp, #116	; 0x74
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	89ab      	ldrh	r3, [r5, #12]
 8007e08:	0598      	lsls	r0, r3, #22
 8007e0a:	d4f7      	bmi.n	8007dfc <_vfiprintf_r+0x44>
 8007e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e0e:	f7fe f9d1 	bl	80061b4 <__retarget_lock_release_recursive>
 8007e12:	e7f3      	b.n	8007dfc <_vfiprintf_r+0x44>
 8007e14:	2300      	movs	r3, #0
 8007e16:	9309      	str	r3, [sp, #36]	; 0x24
 8007e18:	2320      	movs	r3, #32
 8007e1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e22:	2330      	movs	r3, #48	; 0x30
 8007e24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007fd8 <_vfiprintf_r+0x220>
 8007e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e2c:	f04f 0901 	mov.w	r9, #1
 8007e30:	4623      	mov	r3, r4
 8007e32:	469a      	mov	sl, r3
 8007e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e38:	b10a      	cbz	r2, 8007e3e <_vfiprintf_r+0x86>
 8007e3a:	2a25      	cmp	r2, #37	; 0x25
 8007e3c:	d1f9      	bne.n	8007e32 <_vfiprintf_r+0x7a>
 8007e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e42:	d00b      	beq.n	8007e5c <_vfiprintf_r+0xa4>
 8007e44:	465b      	mov	r3, fp
 8007e46:	4622      	mov	r2, r4
 8007e48:	4629      	mov	r1, r5
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f7ff ffa2 	bl	8007d94 <__sfputs_r>
 8007e50:	3001      	adds	r0, #1
 8007e52:	f000 80a9 	beq.w	8007fa8 <_vfiprintf_r+0x1f0>
 8007e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e58:	445a      	add	r2, fp
 8007e5a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 80a1 	beq.w	8007fa8 <_vfiprintf_r+0x1f0>
 8007e66:	2300      	movs	r3, #0
 8007e68:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e70:	f10a 0a01 	add.w	sl, sl, #1
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	9307      	str	r3, [sp, #28]
 8007e78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e7c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e7e:	4654      	mov	r4, sl
 8007e80:	2205      	movs	r2, #5
 8007e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e86:	4854      	ldr	r0, [pc, #336]	; (8007fd8 <_vfiprintf_r+0x220>)
 8007e88:	f7f8 f9a2 	bl	80001d0 <memchr>
 8007e8c:	9a04      	ldr	r2, [sp, #16]
 8007e8e:	b9d8      	cbnz	r0, 8007ec8 <_vfiprintf_r+0x110>
 8007e90:	06d1      	lsls	r1, r2, #27
 8007e92:	bf44      	itt	mi
 8007e94:	2320      	movmi	r3, #32
 8007e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e9a:	0713      	lsls	r3, r2, #28
 8007e9c:	bf44      	itt	mi
 8007e9e:	232b      	movmi	r3, #43	; 0x2b
 8007ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eaa:	d015      	beq.n	8007ed8 <_vfiprintf_r+0x120>
 8007eac:	9a07      	ldr	r2, [sp, #28]
 8007eae:	4654      	mov	r4, sl
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	f04f 0c0a 	mov.w	ip, #10
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ebc:	3b30      	subs	r3, #48	; 0x30
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	d94d      	bls.n	8007f5e <_vfiprintf_r+0x1a6>
 8007ec2:	b1b0      	cbz	r0, 8007ef2 <_vfiprintf_r+0x13a>
 8007ec4:	9207      	str	r2, [sp, #28]
 8007ec6:	e014      	b.n	8007ef2 <_vfiprintf_r+0x13a>
 8007ec8:	eba0 0308 	sub.w	r3, r0, r8
 8007ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	9304      	str	r3, [sp, #16]
 8007ed4:	46a2      	mov	sl, r4
 8007ed6:	e7d2      	b.n	8007e7e <_vfiprintf_r+0xc6>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	1d19      	adds	r1, r3, #4
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	9103      	str	r1, [sp, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bfbb      	ittet	lt
 8007ee4:	425b      	neglt	r3, r3
 8007ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8007eea:	9307      	strge	r3, [sp, #28]
 8007eec:	9307      	strlt	r3, [sp, #28]
 8007eee:	bfb8      	it	lt
 8007ef0:	9204      	strlt	r2, [sp, #16]
 8007ef2:	7823      	ldrb	r3, [r4, #0]
 8007ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ef6:	d10c      	bne.n	8007f12 <_vfiprintf_r+0x15a>
 8007ef8:	7863      	ldrb	r3, [r4, #1]
 8007efa:	2b2a      	cmp	r3, #42	; 0x2a
 8007efc:	d134      	bne.n	8007f68 <_vfiprintf_r+0x1b0>
 8007efe:	9b03      	ldr	r3, [sp, #12]
 8007f00:	1d1a      	adds	r2, r3, #4
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	9203      	str	r2, [sp, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	bfb8      	it	lt
 8007f0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f0e:	3402      	adds	r4, #2
 8007f10:	9305      	str	r3, [sp, #20]
 8007f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007fe8 <_vfiprintf_r+0x230>
 8007f16:	7821      	ldrb	r1, [r4, #0]
 8007f18:	2203      	movs	r2, #3
 8007f1a:	4650      	mov	r0, sl
 8007f1c:	f7f8 f958 	bl	80001d0 <memchr>
 8007f20:	b138      	cbz	r0, 8007f32 <_vfiprintf_r+0x17a>
 8007f22:	9b04      	ldr	r3, [sp, #16]
 8007f24:	eba0 000a 	sub.w	r0, r0, sl
 8007f28:	2240      	movs	r2, #64	; 0x40
 8007f2a:	4082      	lsls	r2, r0
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	3401      	adds	r4, #1
 8007f30:	9304      	str	r3, [sp, #16]
 8007f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f36:	4829      	ldr	r0, [pc, #164]	; (8007fdc <_vfiprintf_r+0x224>)
 8007f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f3c:	2206      	movs	r2, #6
 8007f3e:	f7f8 f947 	bl	80001d0 <memchr>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d03f      	beq.n	8007fc6 <_vfiprintf_r+0x20e>
 8007f46:	4b26      	ldr	r3, [pc, #152]	; (8007fe0 <_vfiprintf_r+0x228>)
 8007f48:	bb1b      	cbnz	r3, 8007f92 <_vfiprintf_r+0x1da>
 8007f4a:	9b03      	ldr	r3, [sp, #12]
 8007f4c:	3307      	adds	r3, #7
 8007f4e:	f023 0307 	bic.w	r3, r3, #7
 8007f52:	3308      	adds	r3, #8
 8007f54:	9303      	str	r3, [sp, #12]
 8007f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f58:	443b      	add	r3, r7
 8007f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f5c:	e768      	b.n	8007e30 <_vfiprintf_r+0x78>
 8007f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f62:	460c      	mov	r4, r1
 8007f64:	2001      	movs	r0, #1
 8007f66:	e7a6      	b.n	8007eb6 <_vfiprintf_r+0xfe>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	3401      	adds	r4, #1
 8007f6c:	9305      	str	r3, [sp, #20]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	f04f 0c0a 	mov.w	ip, #10
 8007f74:	4620      	mov	r0, r4
 8007f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f7a:	3a30      	subs	r2, #48	; 0x30
 8007f7c:	2a09      	cmp	r2, #9
 8007f7e:	d903      	bls.n	8007f88 <_vfiprintf_r+0x1d0>
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0c6      	beq.n	8007f12 <_vfiprintf_r+0x15a>
 8007f84:	9105      	str	r1, [sp, #20]
 8007f86:	e7c4      	b.n	8007f12 <_vfiprintf_r+0x15a>
 8007f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e7f0      	b.n	8007f74 <_vfiprintf_r+0x1bc>
 8007f92:	ab03      	add	r3, sp, #12
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	462a      	mov	r2, r5
 8007f98:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <_vfiprintf_r+0x22c>)
 8007f9a:	a904      	add	r1, sp, #16
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7fd fb9f 	bl	80056e0 <_printf_float>
 8007fa2:	4607      	mov	r7, r0
 8007fa4:	1c78      	adds	r0, r7, #1
 8007fa6:	d1d6      	bne.n	8007f56 <_vfiprintf_r+0x19e>
 8007fa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007faa:	07d9      	lsls	r1, r3, #31
 8007fac:	d405      	bmi.n	8007fba <_vfiprintf_r+0x202>
 8007fae:	89ab      	ldrh	r3, [r5, #12]
 8007fb0:	059a      	lsls	r2, r3, #22
 8007fb2:	d402      	bmi.n	8007fba <_vfiprintf_r+0x202>
 8007fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fb6:	f7fe f8fd 	bl	80061b4 <__retarget_lock_release_recursive>
 8007fba:	89ab      	ldrh	r3, [r5, #12]
 8007fbc:	065b      	lsls	r3, r3, #25
 8007fbe:	f53f af1d 	bmi.w	8007dfc <_vfiprintf_r+0x44>
 8007fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fc4:	e71c      	b.n	8007e00 <_vfiprintf_r+0x48>
 8007fc6:	ab03      	add	r3, sp, #12
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	462a      	mov	r2, r5
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <_vfiprintf_r+0x22c>)
 8007fce:	a904      	add	r1, sp, #16
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7fd fe29 	bl	8005c28 <_printf_i>
 8007fd6:	e7e4      	b.n	8007fa2 <_vfiprintf_r+0x1ea>
 8007fd8:	0800853c 	.word	0x0800853c
 8007fdc:	08008546 	.word	0x08008546
 8007fe0:	080056e1 	.word	0x080056e1
 8007fe4:	08007d95 	.word	0x08007d95
 8007fe8:	08008542 	.word	0x08008542

08007fec <__swbuf_r>:
 8007fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fee:	460e      	mov	r6, r1
 8007ff0:	4614      	mov	r4, r2
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	b118      	cbz	r0, 8007ffe <__swbuf_r+0x12>
 8007ff6:	6a03      	ldr	r3, [r0, #32]
 8007ff8:	b90b      	cbnz	r3, 8007ffe <__swbuf_r+0x12>
 8007ffa:	f7fd ffc3 	bl	8005f84 <__sinit>
 8007ffe:	69a3      	ldr	r3, [r4, #24]
 8008000:	60a3      	str	r3, [r4, #8]
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	071a      	lsls	r2, r3, #28
 8008006:	d525      	bpl.n	8008054 <__swbuf_r+0x68>
 8008008:	6923      	ldr	r3, [r4, #16]
 800800a:	b31b      	cbz	r3, 8008054 <__swbuf_r+0x68>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	6922      	ldr	r2, [r4, #16]
 8008010:	1a98      	subs	r0, r3, r2
 8008012:	6963      	ldr	r3, [r4, #20]
 8008014:	b2f6      	uxtb	r6, r6
 8008016:	4283      	cmp	r3, r0
 8008018:	4637      	mov	r7, r6
 800801a:	dc04      	bgt.n	8008026 <__swbuf_r+0x3a>
 800801c:	4621      	mov	r1, r4
 800801e:	4628      	mov	r0, r5
 8008020:	f7ff fd9e 	bl	8007b60 <_fflush_r>
 8008024:	b9e0      	cbnz	r0, 8008060 <__swbuf_r+0x74>
 8008026:	68a3      	ldr	r3, [r4, #8]
 8008028:	3b01      	subs	r3, #1
 800802a:	60a3      	str	r3, [r4, #8]
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	6022      	str	r2, [r4, #0]
 8008032:	701e      	strb	r6, [r3, #0]
 8008034:	6962      	ldr	r2, [r4, #20]
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	429a      	cmp	r2, r3
 800803a:	d004      	beq.n	8008046 <__swbuf_r+0x5a>
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	07db      	lsls	r3, r3, #31
 8008040:	d506      	bpl.n	8008050 <__swbuf_r+0x64>
 8008042:	2e0a      	cmp	r6, #10
 8008044:	d104      	bne.n	8008050 <__swbuf_r+0x64>
 8008046:	4621      	mov	r1, r4
 8008048:	4628      	mov	r0, r5
 800804a:	f7ff fd89 	bl	8007b60 <_fflush_r>
 800804e:	b938      	cbnz	r0, 8008060 <__swbuf_r+0x74>
 8008050:	4638      	mov	r0, r7
 8008052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008054:	4621      	mov	r1, r4
 8008056:	4628      	mov	r0, r5
 8008058:	f000 f806 	bl	8008068 <__swsetup_r>
 800805c:	2800      	cmp	r0, #0
 800805e:	d0d5      	beq.n	800800c <__swbuf_r+0x20>
 8008060:	f04f 37ff 	mov.w	r7, #4294967295
 8008064:	e7f4      	b.n	8008050 <__swbuf_r+0x64>
	...

08008068 <__swsetup_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4b2a      	ldr	r3, [pc, #168]	; (8008114 <__swsetup_r+0xac>)
 800806c:	4605      	mov	r5, r0
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	460c      	mov	r4, r1
 8008072:	b118      	cbz	r0, 800807c <__swsetup_r+0x14>
 8008074:	6a03      	ldr	r3, [r0, #32]
 8008076:	b90b      	cbnz	r3, 800807c <__swsetup_r+0x14>
 8008078:	f7fd ff84 	bl	8005f84 <__sinit>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008082:	0718      	lsls	r0, r3, #28
 8008084:	d422      	bmi.n	80080cc <__swsetup_r+0x64>
 8008086:	06d9      	lsls	r1, r3, #27
 8008088:	d407      	bmi.n	800809a <__swsetup_r+0x32>
 800808a:	2309      	movs	r3, #9
 800808c:	602b      	str	r3, [r5, #0]
 800808e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	e034      	b.n	8008104 <__swsetup_r+0x9c>
 800809a:	0758      	lsls	r0, r3, #29
 800809c:	d512      	bpl.n	80080c4 <__swsetup_r+0x5c>
 800809e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080a0:	b141      	cbz	r1, 80080b4 <__swsetup_r+0x4c>
 80080a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080a6:	4299      	cmp	r1, r3
 80080a8:	d002      	beq.n	80080b0 <__swsetup_r+0x48>
 80080aa:	4628      	mov	r0, r5
 80080ac:	f7fe fefe 	bl	8006eac <_free_r>
 80080b0:	2300      	movs	r3, #0
 80080b2:	6363      	str	r3, [r4, #52]	; 0x34
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080ba:	81a3      	strh	r3, [r4, #12]
 80080bc:	2300      	movs	r3, #0
 80080be:	6063      	str	r3, [r4, #4]
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	f043 0308 	orr.w	r3, r3, #8
 80080ca:	81a3      	strh	r3, [r4, #12]
 80080cc:	6923      	ldr	r3, [r4, #16]
 80080ce:	b94b      	cbnz	r3, 80080e4 <__swsetup_r+0x7c>
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080da:	d003      	beq.n	80080e4 <__swsetup_r+0x7c>
 80080dc:	4621      	mov	r1, r4
 80080de:	4628      	mov	r0, r5
 80080e0:	f000 f884 	bl	80081ec <__smakebuf_r>
 80080e4:	89a0      	ldrh	r0, [r4, #12]
 80080e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080ea:	f010 0301 	ands.w	r3, r0, #1
 80080ee:	d00a      	beq.n	8008106 <__swsetup_r+0x9e>
 80080f0:	2300      	movs	r3, #0
 80080f2:	60a3      	str	r3, [r4, #8]
 80080f4:	6963      	ldr	r3, [r4, #20]
 80080f6:	425b      	negs	r3, r3
 80080f8:	61a3      	str	r3, [r4, #24]
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	b943      	cbnz	r3, 8008110 <__swsetup_r+0xa8>
 80080fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008102:	d1c4      	bne.n	800808e <__swsetup_r+0x26>
 8008104:	bd38      	pop	{r3, r4, r5, pc}
 8008106:	0781      	lsls	r1, r0, #30
 8008108:	bf58      	it	pl
 800810a:	6963      	ldrpl	r3, [r4, #20]
 800810c:	60a3      	str	r3, [r4, #8]
 800810e:	e7f4      	b.n	80080fa <__swsetup_r+0x92>
 8008110:	2000      	movs	r0, #0
 8008112:	e7f7      	b.n	8008104 <__swsetup_r+0x9c>
 8008114:	20000064 	.word	0x20000064

08008118 <_raise_r>:
 8008118:	291f      	cmp	r1, #31
 800811a:	b538      	push	{r3, r4, r5, lr}
 800811c:	4604      	mov	r4, r0
 800811e:	460d      	mov	r5, r1
 8008120:	d904      	bls.n	800812c <_raise_r+0x14>
 8008122:	2316      	movs	r3, #22
 8008124:	6003      	str	r3, [r0, #0]
 8008126:	f04f 30ff 	mov.w	r0, #4294967295
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800812e:	b112      	cbz	r2, 8008136 <_raise_r+0x1e>
 8008130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008134:	b94b      	cbnz	r3, 800814a <_raise_r+0x32>
 8008136:	4620      	mov	r0, r4
 8008138:	f000 f830 	bl	800819c <_getpid_r>
 800813c:	462a      	mov	r2, r5
 800813e:	4601      	mov	r1, r0
 8008140:	4620      	mov	r0, r4
 8008142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008146:	f000 b817 	b.w	8008178 <_kill_r>
 800814a:	2b01      	cmp	r3, #1
 800814c:	d00a      	beq.n	8008164 <_raise_r+0x4c>
 800814e:	1c59      	adds	r1, r3, #1
 8008150:	d103      	bne.n	800815a <_raise_r+0x42>
 8008152:	2316      	movs	r3, #22
 8008154:	6003      	str	r3, [r0, #0]
 8008156:	2001      	movs	r0, #1
 8008158:	e7e7      	b.n	800812a <_raise_r+0x12>
 800815a:	2400      	movs	r4, #0
 800815c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008160:	4628      	mov	r0, r5
 8008162:	4798      	blx	r3
 8008164:	2000      	movs	r0, #0
 8008166:	e7e0      	b.n	800812a <_raise_r+0x12>

08008168 <raise>:
 8008168:	4b02      	ldr	r3, [pc, #8]	; (8008174 <raise+0xc>)
 800816a:	4601      	mov	r1, r0
 800816c:	6818      	ldr	r0, [r3, #0]
 800816e:	f7ff bfd3 	b.w	8008118 <_raise_r>
 8008172:	bf00      	nop
 8008174:	20000064 	.word	0x20000064

08008178 <_kill_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4d07      	ldr	r5, [pc, #28]	; (8008198 <_kill_r+0x20>)
 800817c:	2300      	movs	r3, #0
 800817e:	4604      	mov	r4, r0
 8008180:	4608      	mov	r0, r1
 8008182:	4611      	mov	r1, r2
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	f7f9 fd77 	bl	8001c78 <_kill>
 800818a:	1c43      	adds	r3, r0, #1
 800818c:	d102      	bne.n	8008194 <_kill_r+0x1c>
 800818e:	682b      	ldr	r3, [r5, #0]
 8008190:	b103      	cbz	r3, 8008194 <_kill_r+0x1c>
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	bd38      	pop	{r3, r4, r5, pc}
 8008196:	bf00      	nop
 8008198:	2000049c 	.word	0x2000049c

0800819c <_getpid_r>:
 800819c:	f7f9 bd64 	b.w	8001c68 <_getpid>

080081a0 <__swhatbuf_r>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	460c      	mov	r4, r1
 80081a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a8:	2900      	cmp	r1, #0
 80081aa:	b096      	sub	sp, #88	; 0x58
 80081ac:	4615      	mov	r5, r2
 80081ae:	461e      	mov	r6, r3
 80081b0:	da0d      	bge.n	80081ce <__swhatbuf_r+0x2e>
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081b8:	f04f 0100 	mov.w	r1, #0
 80081bc:	bf0c      	ite	eq
 80081be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80081c2:	2340      	movne	r3, #64	; 0x40
 80081c4:	2000      	movs	r0, #0
 80081c6:	6031      	str	r1, [r6, #0]
 80081c8:	602b      	str	r3, [r5, #0]
 80081ca:	b016      	add	sp, #88	; 0x58
 80081cc:	bd70      	pop	{r4, r5, r6, pc}
 80081ce:	466a      	mov	r2, sp
 80081d0:	f000 f848 	bl	8008264 <_fstat_r>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	dbec      	blt.n	80081b2 <__swhatbuf_r+0x12>
 80081d8:	9901      	ldr	r1, [sp, #4]
 80081da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80081de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80081e2:	4259      	negs	r1, r3
 80081e4:	4159      	adcs	r1, r3
 80081e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ea:	e7eb      	b.n	80081c4 <__swhatbuf_r+0x24>

080081ec <__smakebuf_r>:
 80081ec:	898b      	ldrh	r3, [r1, #12]
 80081ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081f0:	079d      	lsls	r5, r3, #30
 80081f2:	4606      	mov	r6, r0
 80081f4:	460c      	mov	r4, r1
 80081f6:	d507      	bpl.n	8008208 <__smakebuf_r+0x1c>
 80081f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	6123      	str	r3, [r4, #16]
 8008200:	2301      	movs	r3, #1
 8008202:	6163      	str	r3, [r4, #20]
 8008204:	b002      	add	sp, #8
 8008206:	bd70      	pop	{r4, r5, r6, pc}
 8008208:	ab01      	add	r3, sp, #4
 800820a:	466a      	mov	r2, sp
 800820c:	f7ff ffc8 	bl	80081a0 <__swhatbuf_r>
 8008210:	9900      	ldr	r1, [sp, #0]
 8008212:	4605      	mov	r5, r0
 8008214:	4630      	mov	r0, r6
 8008216:	f7fe febd 	bl	8006f94 <_malloc_r>
 800821a:	b948      	cbnz	r0, 8008230 <__smakebuf_r+0x44>
 800821c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008220:	059a      	lsls	r2, r3, #22
 8008222:	d4ef      	bmi.n	8008204 <__smakebuf_r+0x18>
 8008224:	f023 0303 	bic.w	r3, r3, #3
 8008228:	f043 0302 	orr.w	r3, r3, #2
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	e7e3      	b.n	80081f8 <__smakebuf_r+0xc>
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	6020      	str	r0, [r4, #0]
 8008234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008238:	81a3      	strh	r3, [r4, #12]
 800823a:	9b00      	ldr	r3, [sp, #0]
 800823c:	6163      	str	r3, [r4, #20]
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	6120      	str	r0, [r4, #16]
 8008242:	b15b      	cbz	r3, 800825c <__smakebuf_r+0x70>
 8008244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008248:	4630      	mov	r0, r6
 800824a:	f000 f81d 	bl	8008288 <_isatty_r>
 800824e:	b128      	cbz	r0, 800825c <__smakebuf_r+0x70>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	f023 0303 	bic.w	r3, r3, #3
 8008256:	f043 0301 	orr.w	r3, r3, #1
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	431d      	orrs	r5, r3
 8008260:	81a5      	strh	r5, [r4, #12]
 8008262:	e7cf      	b.n	8008204 <__smakebuf_r+0x18>

08008264 <_fstat_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4d07      	ldr	r5, [pc, #28]	; (8008284 <_fstat_r+0x20>)
 8008268:	2300      	movs	r3, #0
 800826a:	4604      	mov	r4, r0
 800826c:	4608      	mov	r0, r1
 800826e:	4611      	mov	r1, r2
 8008270:	602b      	str	r3, [r5, #0]
 8008272:	f7f9 fd60 	bl	8001d36 <_fstat>
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	d102      	bne.n	8008280 <_fstat_r+0x1c>
 800827a:	682b      	ldr	r3, [r5, #0]
 800827c:	b103      	cbz	r3, 8008280 <_fstat_r+0x1c>
 800827e:	6023      	str	r3, [r4, #0]
 8008280:	bd38      	pop	{r3, r4, r5, pc}
 8008282:	bf00      	nop
 8008284:	2000049c 	.word	0x2000049c

08008288 <_isatty_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d06      	ldr	r5, [pc, #24]	; (80082a4 <_isatty_r+0x1c>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7f9 fd5f 	bl	8001d56 <_isatty>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_isatty_r+0x1a>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_isatty_r+0x1a>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	2000049c 	.word	0x2000049c

080082a8 <_init>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr

080082b4 <_fini>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	bf00      	nop
 80082b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ba:	bc08      	pop	{r3}
 80082bc:	469e      	mov	lr, r3
 80082be:	4770      	bx	lr
